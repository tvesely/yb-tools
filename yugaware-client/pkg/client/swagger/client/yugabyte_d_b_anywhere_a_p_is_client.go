// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/access_keys"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/alerts"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/asynchronous_replication"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/audit"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/availability_zones"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/backups"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/certificate_info"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/cloud_providers"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/customer_configuration"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/customer_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/customer_tasks"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/encryption_at_rest"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/grafana_dashboard"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/instance_types"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/logging_config"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/maintenance_windows"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/metrics"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/node_instances"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/region_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/release_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/runtime_configuration"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/schedule_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/session_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/support_bundle_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/table_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/tablet_server_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/universe_actions"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/universe_cluster_mutations"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/universe_database_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/universe_information"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/universe_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/universe_node_metadata_metamaster"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/universe_upgrades_management"
	"github.com/yugabyte/yb-tools/yugaware-client/pkg/client/swagger/client/user_management"
)

// Default yugabyte d b anywhere a p is HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new yugabyte d b anywhere a p is HTTP client.
func NewHTTPClient(formats strfmt.Registry) *YugabyteDBAnywhereAPIs {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new yugabyte d b anywhere a p is HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *YugabyteDBAnywhereAPIs {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new yugabyte d b anywhere a p is client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *YugabyteDBAnywhereAPIs {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(YugabyteDBAnywhereAPIs)
	cli.Transport = transport
	cli.AccessKeys = access_keys.New(transport, formats)
	cli.Alerts = alerts.New(transport, formats)
	cli.AsynchronousReplication = asynchronous_replication.New(transport, formats)
	cli.Audit = audit.New(transport, formats)
	cli.AvailabilityZones = availability_zones.New(transport, formats)
	cli.Backups = backups.New(transport, formats)
	cli.CertificateInfo = certificate_info.New(transport, formats)
	cli.CloudProviders = cloud_providers.New(transport, formats)
	cli.CustomerConfiguration = customer_configuration.New(transport, formats)
	cli.CustomerManagement = customer_management.New(transport, formats)
	cli.CustomerTasks = customer_tasks.New(transport, formats)
	cli.EncryptionAtRest = encryption_at_rest.New(transport, formats)
	cli.GrafanaDashboard = grafana_dashboard.New(transport, formats)
	cli.InstanceTypes = instance_types.New(transport, formats)
	cli.LoggingConfig = logging_config.New(transport, formats)
	cli.MaintenanceWindows = maintenance_windows.New(transport, formats)
	cli.Metrics = metrics.New(transport, formats)
	cli.NodeInstances = node_instances.New(transport, formats)
	cli.RegionManagement = region_management.New(transport, formats)
	cli.ReleaseManagement = release_management.New(transport, formats)
	cli.RuntimeConfiguration = runtime_configuration.New(transport, formats)
	cli.ScheduleManagement = schedule_management.New(transport, formats)
	cli.SessionManagement = session_management.New(transport, formats)
	cli.SupportBundleManagement = support_bundle_management.New(transport, formats)
	cli.TableManagement = table_management.New(transport, formats)
	cli.TabletServerManagement = tablet_server_management.New(transport, formats)
	cli.UniverseActions = universe_actions.New(transport, formats)
	cli.UniverseClusterMutations = universe_cluster_mutations.New(transport, formats)
	cli.UniverseDatabaseManagement = universe_database_management.New(transport, formats)
	cli.UniverseInformation = universe_information.New(transport, formats)
	cli.UniverseManagement = universe_management.New(transport, formats)
	cli.UniverseNodeMetadataMetamaster = universe_node_metadata_metamaster.New(transport, formats)
	cli.UniverseUpgradesManagement = universe_upgrades_management.New(transport, formats)
	cli.UserManagement = user_management.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// YugabyteDBAnywhereAPIs is a client for yugabyte d b anywhere a p is
type YugabyteDBAnywhereAPIs struct {
	AccessKeys access_keys.ClientService

	Alerts alerts.ClientService

	AsynchronousReplication asynchronous_replication.ClientService

	Audit audit.ClientService

	AvailabilityZones availability_zones.ClientService

	Backups backups.ClientService

	CertificateInfo certificate_info.ClientService

	CloudProviders cloud_providers.ClientService

	CustomerConfiguration customer_configuration.ClientService

	CustomerManagement customer_management.ClientService

	CustomerTasks customer_tasks.ClientService

	EncryptionAtRest encryption_at_rest.ClientService

	GrafanaDashboard grafana_dashboard.ClientService

	InstanceTypes instance_types.ClientService

	LoggingConfig logging_config.ClientService

	MaintenanceWindows maintenance_windows.ClientService

	Metrics metrics.ClientService

	NodeInstances node_instances.ClientService

	RegionManagement region_management.ClientService

	ReleaseManagement release_management.ClientService

	RuntimeConfiguration runtime_configuration.ClientService

	ScheduleManagement schedule_management.ClientService

	SessionManagement session_management.ClientService

	SupportBundleManagement support_bundle_management.ClientService

	TableManagement table_management.ClientService

	TabletServerManagement tablet_server_management.ClientService

	UniverseActions universe_actions.ClientService

	UniverseClusterMutations universe_cluster_mutations.ClientService

	UniverseDatabaseManagement universe_database_management.ClientService

	UniverseInformation universe_information.ClientService

	UniverseManagement universe_management.ClientService

	UniverseNodeMetadataMetamaster universe_node_metadata_metamaster.ClientService

	UniverseUpgradesManagement universe_upgrades_management.ClientService

	UserManagement user_management.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *YugabyteDBAnywhereAPIs) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.AccessKeys.SetTransport(transport)
	c.Alerts.SetTransport(transport)
	c.AsynchronousReplication.SetTransport(transport)
	c.Audit.SetTransport(transport)
	c.AvailabilityZones.SetTransport(transport)
	c.Backups.SetTransport(transport)
	c.CertificateInfo.SetTransport(transport)
	c.CloudProviders.SetTransport(transport)
	c.CustomerConfiguration.SetTransport(transport)
	c.CustomerManagement.SetTransport(transport)
	c.CustomerTasks.SetTransport(transport)
	c.EncryptionAtRest.SetTransport(transport)
	c.GrafanaDashboard.SetTransport(transport)
	c.InstanceTypes.SetTransport(transport)
	c.LoggingConfig.SetTransport(transport)
	c.MaintenanceWindows.SetTransport(transport)
	c.Metrics.SetTransport(transport)
	c.NodeInstances.SetTransport(transport)
	c.RegionManagement.SetTransport(transport)
	c.ReleaseManagement.SetTransport(transport)
	c.RuntimeConfiguration.SetTransport(transport)
	c.ScheduleManagement.SetTransport(transport)
	c.SessionManagement.SetTransport(transport)
	c.SupportBundleManagement.SetTransport(transport)
	c.TableManagement.SetTransport(transport)
	c.TabletServerManagement.SetTransport(transport)
	c.UniverseActions.SetTransport(transport)
	c.UniverseClusterMutations.SetTransport(transport)
	c.UniverseDatabaseManagement.SetTransport(transport)
	c.UniverseInformation.SetTransport(transport)
	c.UniverseManagement.SetTransport(transport)
	c.UniverseNodeMetadataMetamaster.SetTransport(transport)
	c.UniverseUpgradesManagement.SetTransport(transport)
	c.UserManagement.SetTransport(transport)
}
