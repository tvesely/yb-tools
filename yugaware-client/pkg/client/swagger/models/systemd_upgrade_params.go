// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemdUpgradeParams systemd upgrade params
//
// swagger:model SystemdUpgradeParams
type SystemdUpgradeParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload UpdateUniverseTags]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this systemd upgrade params
func (m *SystemdUpgradeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var systemdUpgradeParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemdUpgradeParamsTypeCapabilityPropEnum = append(systemdUpgradeParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// SystemdUpgradeParamsCapabilityREADONLY captures enum value "READ_ONLY"
	SystemdUpgradeParamsCapabilityREADONLY string = "READ_ONLY"

	// SystemdUpgradeParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	SystemdUpgradeParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *SystemdUpgradeParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemdUpgradeParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemdUpgradeParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemdUpgradeParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var systemdUpgradeParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemdUpgradeParamsTypeCurrentClusterTypePropEnum = append(systemdUpgradeParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// SystemdUpgradeParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	SystemdUpgradeParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// SystemdUpgradeParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	SystemdUpgradeParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *SystemdUpgradeParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemdUpgradeParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemdUpgradeParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SystemdUpgradeParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SystemdUpgradeParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var systemdUpgradeParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemdUpgradeParamsTypeImportedStatePropEnum = append(systemdUpgradeParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// SystemdUpgradeParamsImportedStateNONE captures enum value "NONE"
	SystemdUpgradeParamsImportedStateNONE string = "NONE"

	// SystemdUpgradeParamsImportedStateSTARTED captures enum value "STARTED"
	SystemdUpgradeParamsImportedStateSTARTED string = "STARTED"

	// SystemdUpgradeParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	SystemdUpgradeParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// SystemdUpgradeParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	SystemdUpgradeParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// SystemdUpgradeParamsImportedStateIMPORTED captures enum value "IMPORTED"
	SystemdUpgradeParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *SystemdUpgradeParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemdUpgradeParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemdUpgradeParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemdUpgradeParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *SystemdUpgradeParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *SystemdUpgradeParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var systemdUpgradeParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload","UpdateUniverseTags"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemdUpgradeParamsTypeUpdatingTaskPropEnum = append(systemdUpgradeParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// SystemdUpgradeParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	SystemdUpgradeParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// SystemdUpgradeParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	SystemdUpgradeParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// SystemdUpgradeParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	SystemdUpgradeParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// SystemdUpgradeParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	SystemdUpgradeParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// SystemdUpgradeParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	SystemdUpgradeParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// SystemdUpgradeParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	SystemdUpgradeParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// SystemdUpgradeParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	SystemdUpgradeParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// SystemdUpgradeParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	SystemdUpgradeParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// SystemdUpgradeParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	SystemdUpgradeParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// SystemdUpgradeParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	SystemdUpgradeParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// SystemdUpgradeParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	SystemdUpgradeParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// SystemdUpgradeParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	SystemdUpgradeParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// SystemdUpgradeParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	SystemdUpgradeParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// SystemdUpgradeParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	SystemdUpgradeParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// SystemdUpgradeParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	SystemdUpgradeParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// SystemdUpgradeParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	SystemdUpgradeParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// SystemdUpgradeParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	SystemdUpgradeParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// SystemdUpgradeParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	SystemdUpgradeParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// SystemdUpgradeParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	SystemdUpgradeParamsUpdatingTaskExternalScript string = "ExternalScript"

	// SystemdUpgradeParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	SystemdUpgradeParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// SystemdUpgradeParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	SystemdUpgradeParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// SystemdUpgradeParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	SystemdUpgradeParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// SystemdUpgradeParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	SystemdUpgradeParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// SystemdUpgradeParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	SystemdUpgradeParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// SystemdUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	SystemdUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// SystemdUpgradeParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	SystemdUpgradeParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// SystemdUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	SystemdUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// SystemdUpgradeParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	SystemdUpgradeParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// SystemdUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	SystemdUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// SystemdUpgradeParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	SystemdUpgradeParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// SystemdUpgradeParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	SystemdUpgradeParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// SystemdUpgradeParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	SystemdUpgradeParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// SystemdUpgradeParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	SystemdUpgradeParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// SystemdUpgradeParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	SystemdUpgradeParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// SystemdUpgradeParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	SystemdUpgradeParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// SystemdUpgradeParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	SystemdUpgradeParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// SystemdUpgradeParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	SystemdUpgradeParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// SystemdUpgradeParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	SystemdUpgradeParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// SystemdUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	SystemdUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// SystemdUpgradeParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	SystemdUpgradeParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// SystemdUpgradeParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	SystemdUpgradeParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// SystemdUpgradeParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	SystemdUpgradeParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// SystemdUpgradeParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	SystemdUpgradeParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// SystemdUpgradeParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	SystemdUpgradeParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// SystemdUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	SystemdUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// SystemdUpgradeParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	SystemdUpgradeParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// SystemdUpgradeParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	SystemdUpgradeParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// SystemdUpgradeParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	SystemdUpgradeParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// SystemdUpgradeParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	SystemdUpgradeParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// SystemdUpgradeParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	SystemdUpgradeParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// SystemdUpgradeParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	SystemdUpgradeParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// SystemdUpgradeParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	SystemdUpgradeParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// SystemdUpgradeParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	SystemdUpgradeParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// SystemdUpgradeParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	SystemdUpgradeParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// SystemdUpgradeParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	SystemdUpgradeParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// SystemdUpgradeParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	SystemdUpgradeParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// SystemdUpgradeParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	SystemdUpgradeParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// SystemdUpgradeParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	SystemdUpgradeParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// SystemdUpgradeParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	SystemdUpgradeParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// SystemdUpgradeParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	SystemdUpgradeParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// SystemdUpgradeParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	SystemdUpgradeParamsUpdatingTaskPauseServer string = "PauseServer"

	// SystemdUpgradeParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	SystemdUpgradeParamsUpdatingTaskResumeServer string = "ResumeServer"

	// SystemdUpgradeParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	SystemdUpgradeParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// SystemdUpgradeParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	SystemdUpgradeParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// SystemdUpgradeParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	SystemdUpgradeParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// SystemdUpgradeParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	SystemdUpgradeParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// SystemdUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	SystemdUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// SystemdUpgradeParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	SystemdUpgradeParamsUpdatingTaskBulkImport string = "BulkImport"

	// SystemdUpgradeParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	SystemdUpgradeParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// SystemdUpgradeParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	SystemdUpgradeParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// SystemdUpgradeParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	SystemdUpgradeParamsUpdatingTaskCreateTable string = "CreateTable"

	// SystemdUpgradeParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	SystemdUpgradeParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// SystemdUpgradeParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	SystemdUpgradeParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// SystemdUpgradeParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	SystemdUpgradeParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// SystemdUpgradeParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	SystemdUpgradeParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// SystemdUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	SystemdUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// SystemdUpgradeParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	SystemdUpgradeParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// SystemdUpgradeParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	SystemdUpgradeParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// SystemdUpgradeParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	SystemdUpgradeParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// SystemdUpgradeParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	SystemdUpgradeParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// SystemdUpgradeParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	SystemdUpgradeParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// SystemdUpgradeParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	SystemdUpgradeParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// SystemdUpgradeParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	SystemdUpgradeParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// SystemdUpgradeParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	SystemdUpgradeParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// SystemdUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	SystemdUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// SystemdUpgradeParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	SystemdUpgradeParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// SystemdUpgradeParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	SystemdUpgradeParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// SystemdUpgradeParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	SystemdUpgradeParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// SystemdUpgradeParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	SystemdUpgradeParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// SystemdUpgradeParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	SystemdUpgradeParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// SystemdUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	SystemdUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// SystemdUpgradeParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	SystemdUpgradeParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// SystemdUpgradeParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	SystemdUpgradeParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// SystemdUpgradeParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	SystemdUpgradeParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// SystemdUpgradeParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	SystemdUpgradeParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// SystemdUpgradeParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	SystemdUpgradeParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// SystemdUpgradeParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	SystemdUpgradeParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// SystemdUpgradeParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	SystemdUpgradeParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// SystemdUpgradeParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	SystemdUpgradeParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// SystemdUpgradeParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	SystemdUpgradeParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// SystemdUpgradeParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	SystemdUpgradeParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// SystemdUpgradeParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	SystemdUpgradeParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// SystemdUpgradeParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	SystemdUpgradeParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// SystemdUpgradeParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	SystemdUpgradeParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// SystemdUpgradeParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	SystemdUpgradeParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// SystemdUpgradeParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	SystemdUpgradeParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// SystemdUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	SystemdUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// SystemdUpgradeParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	SystemdUpgradeParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// SystemdUpgradeParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	SystemdUpgradeParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// SystemdUpgradeParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	SystemdUpgradeParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// SystemdUpgradeParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	SystemdUpgradeParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// SystemdUpgradeParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	SystemdUpgradeParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// SystemdUpgradeParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	SystemdUpgradeParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// SystemdUpgradeParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	SystemdUpgradeParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// SystemdUpgradeParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	SystemdUpgradeParamsUpdatingTaskBackupTable string = "BackupTable"

	// SystemdUpgradeParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	SystemdUpgradeParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// SystemdUpgradeParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	SystemdUpgradeParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// SystemdUpgradeParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	SystemdUpgradeParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// SystemdUpgradeParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	SystemdUpgradeParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// SystemdUpgradeParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	SystemdUpgradeParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// SystemdUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	SystemdUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// SystemdUpgradeParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	SystemdUpgradeParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// SystemdUpgradeParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	SystemdUpgradeParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// SystemdUpgradeParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	SystemdUpgradeParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// SystemdUpgradeParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	SystemdUpgradeParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// SystemdUpgradeParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	SystemdUpgradeParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// SystemdUpgradeParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	SystemdUpgradeParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// SystemdUpgradeParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	SystemdUpgradeParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// SystemdUpgradeParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	SystemdUpgradeParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// SystemdUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	SystemdUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// SystemdUpgradeParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	SystemdUpgradeParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// SystemdUpgradeParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	SystemdUpgradeParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// SystemdUpgradeParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	SystemdUpgradeParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// SystemdUpgradeParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	SystemdUpgradeParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// SystemdUpgradeParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	SystemdUpgradeParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// SystemdUpgradeParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	SystemdUpgradeParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// SystemdUpgradeParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	SystemdUpgradeParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// SystemdUpgradeParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	SystemdUpgradeParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// SystemdUpgradeParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	SystemdUpgradeParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// SystemdUpgradeParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	SystemdUpgradeParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// SystemdUpgradeParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	SystemdUpgradeParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// SystemdUpgradeParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	SystemdUpgradeParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// SystemdUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	SystemdUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// SystemdUpgradeParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	SystemdUpgradeParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// SystemdUpgradeParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	SystemdUpgradeParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// SystemdUpgradeParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	SystemdUpgradeParamsUpdatingTaskResizeNode string = "ResizeNode"

	// SystemdUpgradeParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	SystemdUpgradeParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// SystemdUpgradeParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	SystemdUpgradeParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// SystemdUpgradeParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	SystemdUpgradeParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// SystemdUpgradeParamsUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	SystemdUpgradeParamsUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// SystemdUpgradeParamsUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	SystemdUpgradeParamsUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// SystemdUpgradeParamsUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	SystemdUpgradeParamsUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// SystemdUpgradeParamsUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	SystemdUpgradeParamsUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"

	// SystemdUpgradeParamsUpdatingTaskUpdateUniverseTags captures enum value "UpdateUniverseTags"
	SystemdUpgradeParamsUpdatingTaskUpdateUniverseTags string = "UpdateUniverseTags"
)

// prop value enum
func (m *SystemdUpgradeParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemdUpgradeParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemdUpgradeParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var systemdUpgradeParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemdUpgradeParamsTypeUpgradeOptionPropEnum = append(systemdUpgradeParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// SystemdUpgradeParamsUpgradeOptionRolling captures enum value "Rolling"
	SystemdUpgradeParamsUpgradeOptionRolling string = "Rolling"

	// SystemdUpgradeParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	SystemdUpgradeParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// SystemdUpgradeParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	SystemdUpgradeParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *SystemdUpgradeParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemdUpgradeParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemdUpgradeParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this systemd upgrade params based on the context it is used
func (m *SystemdUpgradeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemdUpgradeParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemdUpgradeParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *SystemdUpgradeParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SystemdUpgradeParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SystemdUpgradeParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *SystemdUpgradeParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemdUpgradeParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *SystemdUpgradeParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemdUpgradeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemdUpgradeParams) UnmarshalBinary(b []byte) error {
	var res SystemdUpgradeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
