// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlacementBlock placement block
//
// swagger:model PlacementBlock
type PlacementBlock struct {

	// Cloud
	// Required: true
	// Max Length: 2147483647
	// Min Length: 1
	Cloud *string `json:"cloud"`

	// Leader preference
	// Minimum: 1
	LeaderPreference int32 `json:"leader_preference,omitempty"`

	// Minimum replicas
	// Minimum: 1
	MinNumReplicas int32 `json:"min_num_replicas,omitempty"`

	// Region
	// Required: true
	// Max Length: 2147483647
	// Min Length: 1
	Region *string `json:"region"`

	// Zone
	// Required: true
	// Max Length: 2147483647
	// Min Length: 1
	Zone *string `json:"zone"`
}

// Validate validates this placement block
func (m *PlacementBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLeaderPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinNumReplicas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlacementBlock) validateCloud(formats strfmt.Registry) error {

	if err := validate.Required("cloud", "body", m.Cloud); err != nil {
		return err
	}

	if err := validate.MinLength("cloud", "body", *m.Cloud, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("cloud", "body", *m.Cloud, 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *PlacementBlock) validateLeaderPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.LeaderPreference) { // not required
		return nil
	}

	if err := validate.MinimumInt("leader_preference", "body", int64(m.LeaderPreference), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *PlacementBlock) validateMinNumReplicas(formats strfmt.Registry) error {
	if swag.IsZero(m.MinNumReplicas) { // not required
		return nil
	}

	if err := validate.MinimumInt("min_num_replicas", "body", int64(m.MinNumReplicas), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *PlacementBlock) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	if err := validate.MinLength("region", "body", *m.Region, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("region", "body", *m.Region, 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *PlacementBlock) validateZone(formats strfmt.Registry) error {

	if err := validate.Required("zone", "body", m.Zone); err != nil {
		return err
	}

	if err := validate.MinLength("zone", "body", *m.Zone, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("zone", "body", *m.Zone, 2147483647); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this placement block based on context it is used
func (m *PlacementBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlacementBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlacementBlock) UnmarshalBinary(b []byte) error {
	var res PlacementBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
