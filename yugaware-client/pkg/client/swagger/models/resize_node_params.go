// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResizeNodeParams resize node params
//
// swagger:model ResizeNodeParams
type ResizeNodeParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// force resize node
	// Required: true
	ForceResizeNode *bool `json:"forceResizeNode"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload UpdateUniverseTags]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this resize node params
func (m *ResizeNodeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceResizeNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resizeNodeParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resizeNodeParamsTypeCapabilityPropEnum = append(resizeNodeParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// ResizeNodeParamsCapabilityREADONLY captures enum value "READ_ONLY"
	ResizeNodeParamsCapabilityREADONLY string = "READ_ONLY"

	// ResizeNodeParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	ResizeNodeParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *ResizeNodeParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resizeNodeParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResizeNodeParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResizeNodeParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var resizeNodeParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resizeNodeParamsTypeCurrentClusterTypePropEnum = append(resizeNodeParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// ResizeNodeParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	ResizeNodeParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// ResizeNodeParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	ResizeNodeParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *ResizeNodeParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resizeNodeParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResizeNodeParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ResizeNodeParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ResizeNodeParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *ResizeNodeParams) validateForceResizeNode(formats strfmt.Registry) error {

	if err := validate.Required("forceResizeNode", "body", m.ForceResizeNode); err != nil {
		return err
	}

	return nil
}

var resizeNodeParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resizeNodeParamsTypeImportedStatePropEnum = append(resizeNodeParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// ResizeNodeParamsImportedStateNONE captures enum value "NONE"
	ResizeNodeParamsImportedStateNONE string = "NONE"

	// ResizeNodeParamsImportedStateSTARTED captures enum value "STARTED"
	ResizeNodeParamsImportedStateSTARTED string = "STARTED"

	// ResizeNodeParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	ResizeNodeParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// ResizeNodeParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	ResizeNodeParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// ResizeNodeParamsImportedStateIMPORTED captures enum value "IMPORTED"
	ResizeNodeParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *ResizeNodeParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resizeNodeParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResizeNodeParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResizeNodeParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *ResizeNodeParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *ResizeNodeParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var resizeNodeParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload","UpdateUniverseTags"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resizeNodeParamsTypeUpdatingTaskPropEnum = append(resizeNodeParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// ResizeNodeParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	ResizeNodeParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// ResizeNodeParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	ResizeNodeParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// ResizeNodeParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	ResizeNodeParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// ResizeNodeParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	ResizeNodeParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// ResizeNodeParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	ResizeNodeParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// ResizeNodeParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	ResizeNodeParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// ResizeNodeParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	ResizeNodeParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// ResizeNodeParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	ResizeNodeParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// ResizeNodeParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	ResizeNodeParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// ResizeNodeParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	ResizeNodeParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// ResizeNodeParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	ResizeNodeParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// ResizeNodeParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	ResizeNodeParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// ResizeNodeParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	ResizeNodeParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// ResizeNodeParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	ResizeNodeParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// ResizeNodeParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	ResizeNodeParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// ResizeNodeParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	ResizeNodeParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// ResizeNodeParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	ResizeNodeParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// ResizeNodeParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	ResizeNodeParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// ResizeNodeParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	ResizeNodeParamsUpdatingTaskExternalScript string = "ExternalScript"

	// ResizeNodeParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	ResizeNodeParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// ResizeNodeParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	ResizeNodeParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// ResizeNodeParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	ResizeNodeParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// ResizeNodeParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	ResizeNodeParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// ResizeNodeParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	ResizeNodeParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// ResizeNodeParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	ResizeNodeParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// ResizeNodeParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	ResizeNodeParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// ResizeNodeParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	ResizeNodeParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// ResizeNodeParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	ResizeNodeParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// ResizeNodeParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	ResizeNodeParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// ResizeNodeParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	ResizeNodeParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// ResizeNodeParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	ResizeNodeParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// ResizeNodeParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	ResizeNodeParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// ResizeNodeParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	ResizeNodeParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// ResizeNodeParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	ResizeNodeParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// ResizeNodeParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	ResizeNodeParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// ResizeNodeParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	ResizeNodeParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// ResizeNodeParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	ResizeNodeParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// ResizeNodeParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	ResizeNodeParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// ResizeNodeParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	ResizeNodeParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// ResizeNodeParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	ResizeNodeParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// ResizeNodeParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	ResizeNodeParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// ResizeNodeParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	ResizeNodeParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// ResizeNodeParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	ResizeNodeParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// ResizeNodeParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	ResizeNodeParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// ResizeNodeParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	ResizeNodeParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// ResizeNodeParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	ResizeNodeParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// ResizeNodeParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	ResizeNodeParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// ResizeNodeParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	ResizeNodeParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// ResizeNodeParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	ResizeNodeParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// ResizeNodeParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	ResizeNodeParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// ResizeNodeParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	ResizeNodeParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// ResizeNodeParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	ResizeNodeParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// ResizeNodeParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	ResizeNodeParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// ResizeNodeParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	ResizeNodeParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// ResizeNodeParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	ResizeNodeParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// ResizeNodeParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	ResizeNodeParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// ResizeNodeParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	ResizeNodeParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// ResizeNodeParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	ResizeNodeParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// ResizeNodeParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	ResizeNodeParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// ResizeNodeParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	ResizeNodeParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// ResizeNodeParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	ResizeNodeParamsUpdatingTaskPauseServer string = "PauseServer"

	// ResizeNodeParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	ResizeNodeParamsUpdatingTaskResumeServer string = "ResumeServer"

	// ResizeNodeParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	ResizeNodeParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// ResizeNodeParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	ResizeNodeParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// ResizeNodeParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	ResizeNodeParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// ResizeNodeParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	ResizeNodeParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// ResizeNodeParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	ResizeNodeParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// ResizeNodeParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	ResizeNodeParamsUpdatingTaskBulkImport string = "BulkImport"

	// ResizeNodeParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	ResizeNodeParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// ResizeNodeParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	ResizeNodeParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// ResizeNodeParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	ResizeNodeParamsUpdatingTaskCreateTable string = "CreateTable"

	// ResizeNodeParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	ResizeNodeParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// ResizeNodeParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	ResizeNodeParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// ResizeNodeParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	ResizeNodeParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// ResizeNodeParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	ResizeNodeParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// ResizeNodeParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	ResizeNodeParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// ResizeNodeParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	ResizeNodeParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// ResizeNodeParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	ResizeNodeParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// ResizeNodeParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	ResizeNodeParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// ResizeNodeParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	ResizeNodeParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// ResizeNodeParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	ResizeNodeParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// ResizeNodeParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	ResizeNodeParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// ResizeNodeParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	ResizeNodeParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// ResizeNodeParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	ResizeNodeParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// ResizeNodeParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	ResizeNodeParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// ResizeNodeParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	ResizeNodeParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// ResizeNodeParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	ResizeNodeParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// ResizeNodeParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	ResizeNodeParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// ResizeNodeParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	ResizeNodeParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// ResizeNodeParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	ResizeNodeParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// ResizeNodeParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	ResizeNodeParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// ResizeNodeParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	ResizeNodeParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// ResizeNodeParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	ResizeNodeParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// ResizeNodeParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	ResizeNodeParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// ResizeNodeParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	ResizeNodeParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// ResizeNodeParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	ResizeNodeParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// ResizeNodeParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	ResizeNodeParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// ResizeNodeParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	ResizeNodeParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// ResizeNodeParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	ResizeNodeParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// ResizeNodeParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	ResizeNodeParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// ResizeNodeParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	ResizeNodeParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// ResizeNodeParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	ResizeNodeParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// ResizeNodeParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	ResizeNodeParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// ResizeNodeParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	ResizeNodeParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// ResizeNodeParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	ResizeNodeParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// ResizeNodeParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	ResizeNodeParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// ResizeNodeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	ResizeNodeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// ResizeNodeParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	ResizeNodeParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// ResizeNodeParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	ResizeNodeParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// ResizeNodeParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	ResizeNodeParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// ResizeNodeParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	ResizeNodeParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// ResizeNodeParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	ResizeNodeParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// ResizeNodeParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	ResizeNodeParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// ResizeNodeParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	ResizeNodeParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// ResizeNodeParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	ResizeNodeParamsUpdatingTaskBackupTable string = "BackupTable"

	// ResizeNodeParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	ResizeNodeParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// ResizeNodeParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	ResizeNodeParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// ResizeNodeParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	ResizeNodeParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// ResizeNodeParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	ResizeNodeParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// ResizeNodeParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	ResizeNodeParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// ResizeNodeParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	ResizeNodeParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// ResizeNodeParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	ResizeNodeParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// ResizeNodeParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	ResizeNodeParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// ResizeNodeParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	ResizeNodeParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// ResizeNodeParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	ResizeNodeParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// ResizeNodeParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	ResizeNodeParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// ResizeNodeParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	ResizeNodeParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// ResizeNodeParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	ResizeNodeParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// ResizeNodeParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	ResizeNodeParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// ResizeNodeParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	ResizeNodeParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// ResizeNodeParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	ResizeNodeParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// ResizeNodeParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	ResizeNodeParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// ResizeNodeParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	ResizeNodeParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// ResizeNodeParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	ResizeNodeParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// ResizeNodeParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	ResizeNodeParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// ResizeNodeParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	ResizeNodeParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// ResizeNodeParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	ResizeNodeParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// ResizeNodeParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	ResizeNodeParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// ResizeNodeParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	ResizeNodeParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// ResizeNodeParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	ResizeNodeParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// ResizeNodeParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	ResizeNodeParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// ResizeNodeParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	ResizeNodeParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// ResizeNodeParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	ResizeNodeParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// ResizeNodeParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	ResizeNodeParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// ResizeNodeParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	ResizeNodeParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// ResizeNodeParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	ResizeNodeParamsUpdatingTaskResizeNode string = "ResizeNode"

	// ResizeNodeParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	ResizeNodeParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// ResizeNodeParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	ResizeNodeParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// ResizeNodeParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	ResizeNodeParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// ResizeNodeParamsUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	ResizeNodeParamsUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// ResizeNodeParamsUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	ResizeNodeParamsUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// ResizeNodeParamsUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	ResizeNodeParamsUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// ResizeNodeParamsUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	ResizeNodeParamsUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"

	// ResizeNodeParamsUpdatingTaskUpdateUniverseTags captures enum value "UpdateUniverseTags"
	ResizeNodeParamsUpdatingTaskUpdateUniverseTags string = "UpdateUniverseTags"
)

// prop value enum
func (m *ResizeNodeParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resizeNodeParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResizeNodeParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var resizeNodeParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resizeNodeParamsTypeUpgradeOptionPropEnum = append(resizeNodeParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// ResizeNodeParamsUpgradeOptionRolling captures enum value "Rolling"
	ResizeNodeParamsUpgradeOptionRolling string = "Rolling"

	// ResizeNodeParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	ResizeNodeParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// ResizeNodeParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	ResizeNodeParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *ResizeNodeParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, resizeNodeParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResizeNodeParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this resize node params based on the context it is used
func (m *ResizeNodeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResizeNodeParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResizeNodeParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *ResizeNodeParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ResizeNodeParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ResizeNodeParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *ResizeNodeParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResizeNodeParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *ResizeNodeParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResizeNodeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResizeNodeParams) UnmarshalBinary(b []byte) error {
	var res ResizeNodeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
