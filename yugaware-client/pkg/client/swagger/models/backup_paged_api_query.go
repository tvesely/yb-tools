// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupPagedAPIQuery backup paged Api query
//
// swagger:model BackupPagedApiQuery
type BackupPagedAPIQuery struct {

	// direction
	// Required: true
	// Enum: [ASC DESC]
	Direction *string `json:"direction"`

	// filter
	// Required: true
	Filter *BackupAPIFilter `json:"filter"`

	// limit
	// Required: true
	Limit *int32 `json:"limit"`

	// need total count
	// Required: true
	NeedTotalCount *bool `json:"needTotalCount"`

	// offset
	// Required: true
	Offset *int32 `json:"offset"`

	// sort by
	// Required: true
	// Enum: [createTime]
	SortBy *string `json:"sortBy"`
}

// Validate validates this backup paged Api query
func (m *BackupPagedAPIQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeedTotalCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var backupPagedApiQueryTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupPagedApiQueryTypeDirectionPropEnum = append(backupPagedApiQueryTypeDirectionPropEnum, v)
	}
}

const (

	// BackupPagedAPIQueryDirectionASC captures enum value "ASC"
	BackupPagedAPIQueryDirectionASC string = "ASC"

	// BackupPagedAPIQueryDirectionDESC captures enum value "DESC"
	BackupPagedAPIQueryDirectionDESC string = "DESC"
)

// prop value enum
func (m *BackupPagedAPIQuery) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupPagedApiQueryTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupPagedAPIQuery) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *BackupPagedAPIQuery) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *BackupPagedAPIQuery) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *BackupPagedAPIQuery) validateNeedTotalCount(formats strfmt.Registry) error {

	if err := validate.Required("needTotalCount", "body", m.NeedTotalCount); err != nil {
		return err
	}

	return nil
}

func (m *BackupPagedAPIQuery) validateOffset(formats strfmt.Registry) error {

	if err := validate.Required("offset", "body", m.Offset); err != nil {
		return err
	}

	return nil
}

var backupPagedApiQueryTypeSortByPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["createTime"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupPagedApiQueryTypeSortByPropEnum = append(backupPagedApiQueryTypeSortByPropEnum, v)
	}
}

const (

	// BackupPagedAPIQuerySortByCreateTime captures enum value "createTime"
	BackupPagedAPIQuerySortByCreateTime string = "createTime"
)

// prop value enum
func (m *BackupPagedAPIQuery) validateSortByEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupPagedApiQueryTypeSortByPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupPagedAPIQuery) validateSortBy(formats strfmt.Registry) error {

	if err := validate.Required("sortBy", "body", m.SortBy); err != nil {
		return err
	}

	// value enum
	if err := m.validateSortByEnum("sortBy", "body", *m.SortBy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup paged Api query based on the context it is used
func (m *BackupPagedAPIQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPagedAPIQuery) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.Filter != nil {
		if err := m.Filter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupPagedAPIQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupPagedAPIQuery) UnmarshalBinary(b []byte) error {
	var res BackupPagedAPIQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
