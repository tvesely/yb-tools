// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// XClusterConfigEditFormData xcluster edit form
//
// swagger:model XClusterConfigEditFormData
type XClusterConfigEditFormData struct {

	// Name
	// Example: Repl-config1
	Name string `json:"name,omitempty"`

	// Status
	// Enum: [Running Paused]
	Status string `json:"status,omitempty"`

	// Source Universe table IDs
	// Example: [000033df000030008000000000004006, 000033df00003000800000000000400b]
	// Unique: true
	Tables []string `json:"tables"`
}

// Validate validates this x cluster config edit form data
func (m *XClusterConfigEditFormData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var xClusterConfigEditFormDataTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		xClusterConfigEditFormDataTypeStatusPropEnum = append(xClusterConfigEditFormDataTypeStatusPropEnum, v)
	}
}

const (

	// XClusterConfigEditFormDataStatusRunning captures enum value "Running"
	XClusterConfigEditFormDataStatusRunning string = "Running"

	// XClusterConfigEditFormDataStatusPaused captures enum value "Paused"
	XClusterConfigEditFormDataStatusPaused string = "Paused"
)

// prop value enum
func (m *XClusterConfigEditFormData) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, xClusterConfigEditFormDataTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *XClusterConfigEditFormData) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigEditFormData) validateTables(formats strfmt.Registry) error {
	if swag.IsZero(m.Tables) { // not required
		return nil
	}

	if err := validate.UniqueItems("tables", "body", m.Tables); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this x cluster config edit form data based on context it is used
func (m *XClusterConfigEditFormData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *XClusterConfigEditFormData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *XClusterConfigEditFormData) UnmarshalBinary(b []byte) error {
	var res XClusterConfigEditFormData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
