// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Provider provider
//
// swagger:model Provider
type Provider struct {

	// Provider active status
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// Transient property - only present in mutate API request
	AirGapInstall bool `json:"airGapInstall,omitempty"`

	// Provider cloud code
	Code string `json:"code,omitempty"`

	// config
	Config map[string]string `json:"config,omitempty"`

	// Transient property - only present in mutate API request
	CustomHostCidrs []string `json:"customHostCidrs"`

	// Customer uuid
	// Read Only: true
	// Format: uuid
	CustomerUUID strfmt.UUID `json:"customerUUID,omitempty"`

	// Transient property - only present in mutate API request
	DestVpcID string `json:"destVpcId,omitempty"`

	// Transient property - only present in mutate API request
	HostVpcID string `json:"hostVpcId,omitempty"`

	// Transient property - only present in mutate API request
	HostVpcRegion string `json:"hostVpcRegion,omitempty"`

	// hosted zone Id
	HostedZoneID string `json:"hostedZoneId,omitempty"`

	// hosted zone name
	HostedZoneName string `json:"hostedZoneName,omitempty"`

	// Transient property - only present in mutate API request
	KeyPairName string `json:"keyPairName,omitempty"`

	// Provider name
	Name string `json:"name,omitempty"`

	// Transient property - only present in mutate API request
	NtpServers []string `json:"ntpServers"`

	// Transient property - only present in mutate API request
	OverrideKeyValidate bool `json:"overrideKeyValidate,omitempty"`

	// regions
	// Required: true
	Regions []*Region `json:"regions"`

	// Transient property - only present in mutate API request
	SetUpChrony bool `json:"setUpChrony,omitempty"`

	// Transient property - only present in mutate API request
	SSHPort int32 `json:"sshPort,omitempty"`

	// Transient property - only present in mutate API request
	SSHPrivateKeyContent string `json:"sshPrivateKeyContent,omitempty"`

	// Transient property - only present in mutate API request
	SSHUser string `json:"sshUser,omitempty"`

	// Provider uuid
	// Read Only: true
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this provider
func (m *Provider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Provider) validateCustomerUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("customerUUID", "body", "uuid", m.CustomerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Provider) validateRegions(formats strfmt.Registry) error {

	if err := validate.Required("regions", "body", m.Regions); err != nil {
		return err
	}

	for i := 0; i < len(m.Regions); i++ {
		if swag.IsZero(m.Regions[i]) { // not required
			continue
		}

		if m.Regions[i] != nil {
			if err := m.Regions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Provider) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this provider based on the context it is used
func (m *Provider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Provider) contextValidateActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *Provider) contextValidateCustomerUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	return nil
}

func (m *Provider) contextValidateRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Regions); i++ {

		if m.Regions[i] != nil {
			if err := m.Regions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Provider) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", strfmt.UUID(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Provider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Provider) UnmarshalBinary(b []byte) error {
	var res Provider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
