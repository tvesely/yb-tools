// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniverseConfigureTaskParams universe configure task params
//
// swagger:model UniverseConfigureTaskParams
type UniverseConfigureTaskParams struct {

	// allow geo partitioning
	AllowGeoPartitioning bool `json:"allowGeoPartitioning,omitempty"`

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// cluster operation
	// Enum: [CREATE EDIT DELETE]
	ClusterOperation string `json:"clusterOperation,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// regions changed
	RegionsChanged bool `json:"regionsChanged,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this universe configure task params
func (m *UniverseConfigureTaskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var universeConfigureTaskParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeCapabilityPropEnum = append(universeConfigureTaskParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsCapabilityREADONLY captures enum value "READ_ONLY"
	UniverseConfigureTaskParamsCapabilityREADONLY string = "READ_ONLY"

	// UniverseConfigureTaskParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	UniverseConfigureTaskParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

var universeConfigureTaskParamsTypeClusterOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATE","EDIT","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeClusterOperationPropEnum = append(universeConfigureTaskParamsTypeClusterOperationPropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsClusterOperationCREATE captures enum value "CREATE"
	UniverseConfigureTaskParamsClusterOperationCREATE string = "CREATE"

	// UniverseConfigureTaskParamsClusterOperationEDIT captures enum value "EDIT"
	UniverseConfigureTaskParamsClusterOperationEDIT string = "EDIT"

	// UniverseConfigureTaskParamsClusterOperationDELETE captures enum value "DELETE"
	UniverseConfigureTaskParamsClusterOperationDELETE string = "DELETE"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateClusterOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeClusterOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateClusterOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterOperation) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterOperationEnum("clusterOperation", "body", m.ClusterOperation); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var universeConfigureTaskParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeCurrentClusterTypePropEnum = append(universeConfigureTaskParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	UniverseConfigureTaskParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// UniverseConfigureTaskParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	UniverseConfigureTaskParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var universeConfigureTaskParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeImportedStatePropEnum = append(universeConfigureTaskParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsImportedStateNONE captures enum value "NONE"
	UniverseConfigureTaskParamsImportedStateNONE string = "NONE"

	// UniverseConfigureTaskParamsImportedStateSTARTED captures enum value "STARTED"
	UniverseConfigureTaskParamsImportedStateSTARTED string = "STARTED"

	// UniverseConfigureTaskParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	UniverseConfigureTaskParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// UniverseConfigureTaskParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	UniverseConfigureTaskParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// UniverseConfigureTaskParamsImportedStateIMPORTED captures enum value "IMPORTED"
	UniverseConfigureTaskParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var universeConfigureTaskParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeConfigureTaskParamsTypeUpdatingTaskPropEnum = append(universeConfigureTaskParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// UniverseConfigureTaskParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	UniverseConfigureTaskParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// UniverseConfigureTaskParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	UniverseConfigureTaskParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// UniverseConfigureTaskParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	UniverseConfigureTaskParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// UniverseConfigureTaskParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	UniverseConfigureTaskParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	UniverseConfigureTaskParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// UniverseConfigureTaskParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	UniverseConfigureTaskParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// UniverseConfigureTaskParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	UniverseConfigureTaskParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	UniverseConfigureTaskParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	UniverseConfigureTaskParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	UniverseConfigureTaskParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	UniverseConfigureTaskParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	UniverseConfigureTaskParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// UniverseConfigureTaskParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	UniverseConfigureTaskParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	UniverseConfigureTaskParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// UniverseConfigureTaskParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	UniverseConfigureTaskParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// UniverseConfigureTaskParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	UniverseConfigureTaskParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// UniverseConfigureTaskParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	UniverseConfigureTaskParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	UniverseConfigureTaskParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	UniverseConfigureTaskParamsUpdatingTaskExternalScript string = "ExternalScript"

	// UniverseConfigureTaskParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	UniverseConfigureTaskParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// UniverseConfigureTaskParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	UniverseConfigureTaskParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// UniverseConfigureTaskParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	UniverseConfigureTaskParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	UniverseConfigureTaskParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	UniverseConfigureTaskParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// UniverseConfigureTaskParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	UniverseConfigureTaskParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// UniverseConfigureTaskParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	UniverseConfigureTaskParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// UniverseConfigureTaskParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	UniverseConfigureTaskParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// UniverseConfigureTaskParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	UniverseConfigureTaskParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// UniverseConfigureTaskParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	UniverseConfigureTaskParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// UniverseConfigureTaskParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	UniverseConfigureTaskParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// UniverseConfigureTaskParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	UniverseConfigureTaskParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	UniverseConfigureTaskParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	UniverseConfigureTaskParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	UniverseConfigureTaskParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	UniverseConfigureTaskParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	UniverseConfigureTaskParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	UniverseConfigureTaskParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	UniverseConfigureTaskParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// UniverseConfigureTaskParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	UniverseConfigureTaskParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// UniverseConfigureTaskParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	UniverseConfigureTaskParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// UniverseConfigureTaskParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	UniverseConfigureTaskParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	UniverseConfigureTaskParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// UniverseConfigureTaskParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	UniverseConfigureTaskParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// UniverseConfigureTaskParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	UniverseConfigureTaskParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// UniverseConfigureTaskParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	UniverseConfigureTaskParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// UniverseConfigureTaskParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	UniverseConfigureTaskParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	UniverseConfigureTaskParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// UniverseConfigureTaskParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	UniverseConfigureTaskParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// UniverseConfigureTaskParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	UniverseConfigureTaskParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// UniverseConfigureTaskParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	UniverseConfigureTaskParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// UniverseConfigureTaskParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	UniverseConfigureTaskParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// UniverseConfigureTaskParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	UniverseConfigureTaskParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// UniverseConfigureTaskParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	UniverseConfigureTaskParamsUpdatingTaskPauseServer string = "PauseServer"

	// UniverseConfigureTaskParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	UniverseConfigureTaskParamsUpdatingTaskResumeServer string = "ResumeServer"

	// UniverseConfigureTaskParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	UniverseConfigureTaskParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// UniverseConfigureTaskParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	UniverseConfigureTaskParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// UniverseConfigureTaskParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	UniverseConfigureTaskParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// UniverseConfigureTaskParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	UniverseConfigureTaskParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// UniverseConfigureTaskParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	UniverseConfigureTaskParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// UniverseConfigureTaskParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	UniverseConfigureTaskParamsUpdatingTaskBulkImport string = "BulkImport"

	// UniverseConfigureTaskParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	UniverseConfigureTaskParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// UniverseConfigureTaskParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	UniverseConfigureTaskParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// UniverseConfigureTaskParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	UniverseConfigureTaskParamsUpdatingTaskCreateTable string = "CreateTable"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	UniverseConfigureTaskParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	UniverseConfigureTaskParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	UniverseConfigureTaskParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	UniverseConfigureTaskParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	UniverseConfigureTaskParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// UniverseConfigureTaskParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	UniverseConfigureTaskParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	UniverseConfigureTaskParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	UniverseConfigureTaskParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// UniverseConfigureTaskParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	UniverseConfigureTaskParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// UniverseConfigureTaskParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	UniverseConfigureTaskParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// UniverseConfigureTaskParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	UniverseConfigureTaskParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// UniverseConfigureTaskParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	UniverseConfigureTaskParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// UniverseConfigureTaskParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	UniverseConfigureTaskParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// UniverseConfigureTaskParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	UniverseConfigureTaskParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// UniverseConfigureTaskParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	UniverseConfigureTaskParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// UniverseConfigureTaskParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	UniverseConfigureTaskParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// UniverseConfigureTaskParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	UniverseConfigureTaskParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// UniverseConfigureTaskParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	UniverseConfigureTaskParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	UniverseConfigureTaskParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	UniverseConfigureTaskParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	UniverseConfigureTaskParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	UniverseConfigureTaskParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	UniverseConfigureTaskParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	UniverseConfigureTaskParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	UniverseConfigureTaskParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	UniverseConfigureTaskParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	UniverseConfigureTaskParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	UniverseConfigureTaskParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// UniverseConfigureTaskParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	UniverseConfigureTaskParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// UniverseConfigureTaskParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	UniverseConfigureTaskParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// UniverseConfigureTaskParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	UniverseConfigureTaskParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// UniverseConfigureTaskParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	UniverseConfigureTaskParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// UniverseConfigureTaskParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	UniverseConfigureTaskParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// UniverseConfigureTaskParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	UniverseConfigureTaskParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// UniverseConfigureTaskParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	UniverseConfigureTaskParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// UniverseConfigureTaskParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	UniverseConfigureTaskParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// UniverseConfigureTaskParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	UniverseConfigureTaskParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// UniverseConfigureTaskParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	UniverseConfigureTaskParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// UniverseConfigureTaskParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	UniverseConfigureTaskParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// UniverseConfigureTaskParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	UniverseConfigureTaskParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// UniverseConfigureTaskParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	UniverseConfigureTaskParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// UniverseConfigureTaskParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	UniverseConfigureTaskParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// UniverseConfigureTaskParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	UniverseConfigureTaskParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// UniverseConfigureTaskParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	UniverseConfigureTaskParamsUpdatingTaskBackupTable string = "BackupTable"

	// UniverseConfigureTaskParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	UniverseConfigureTaskParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// UniverseConfigureTaskParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	UniverseConfigureTaskParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// UniverseConfigureTaskParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	UniverseConfigureTaskParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// UniverseConfigureTaskParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	UniverseConfigureTaskParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// UniverseConfigureTaskParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	UniverseConfigureTaskParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	UniverseConfigureTaskParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// UniverseConfigureTaskParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	UniverseConfigureTaskParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// UniverseConfigureTaskParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	UniverseConfigureTaskParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// UniverseConfigureTaskParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	UniverseConfigureTaskParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// UniverseConfigureTaskParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	UniverseConfigureTaskParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// UniverseConfigureTaskParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	UniverseConfigureTaskParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// UniverseConfigureTaskParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	UniverseConfigureTaskParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// UniverseConfigureTaskParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	UniverseConfigureTaskParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// UniverseConfigureTaskParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	UniverseConfigureTaskParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	UniverseConfigureTaskParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// UniverseConfigureTaskParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	UniverseConfigureTaskParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// UniverseConfigureTaskParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	UniverseConfigureTaskParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// UniverseConfigureTaskParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	UniverseConfigureTaskParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// UniverseConfigureTaskParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	UniverseConfigureTaskParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// UniverseConfigureTaskParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	UniverseConfigureTaskParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// UniverseConfigureTaskParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	UniverseConfigureTaskParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// UniverseConfigureTaskParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	UniverseConfigureTaskParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// UniverseConfigureTaskParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	UniverseConfigureTaskParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// UniverseConfigureTaskParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	UniverseConfigureTaskParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// UniverseConfigureTaskParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	UniverseConfigureTaskParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// UniverseConfigureTaskParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	UniverseConfigureTaskParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// UniverseConfigureTaskParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	UniverseConfigureTaskParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// UniverseConfigureTaskParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	UniverseConfigureTaskParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// UniverseConfigureTaskParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	UniverseConfigureTaskParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// UniverseConfigureTaskParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	UniverseConfigureTaskParamsUpdatingTaskResizeNode string = "ResizeNode"

	// UniverseConfigureTaskParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	UniverseConfigureTaskParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// UniverseConfigureTaskParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	UniverseConfigureTaskParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// UniverseConfigureTaskParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	UniverseConfigureTaskParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// UniverseConfigureTaskParamsUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	UniverseConfigureTaskParamsUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// UniverseConfigureTaskParamsUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	UniverseConfigureTaskParamsUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// UniverseConfigureTaskParamsUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	UniverseConfigureTaskParamsUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// UniverseConfigureTaskParamsUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	UniverseConfigureTaskParamsUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"
)

// prop value enum
func (m *UniverseConfigureTaskParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeConfigureTaskParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseConfigureTaskParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this universe configure task params based on the context it is used
func (m *UniverseConfigureTaskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *UniverseConfigureTaskParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniverseConfigureTaskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniverseConfigureTaskParams) UnmarshalBinary(b []byte) error {
	var res UniverseConfigureTaskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
