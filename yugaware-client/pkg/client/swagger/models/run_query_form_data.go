// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RunQueryFormData run query form data
//
// swagger:model RunQueryFormData
type RunQueryFormData struct {

	// db name
	// Required: true
	DbName *string `json:"db_name"`

	// query
	// Required: true
	Query *string `json:"query"`

	// table type
	// Required: true
	// Enum: [YQL_TABLE_TYPE REDIS_TABLE_TYPE PGSQL_TABLE_TYPE TRANSACTION_STATUS_TABLE_TYPE]
	TableType *string `json:"tableType"`
}

// Validate validates this run query form data
func (m *RunQueryFormData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RunQueryFormData) validateDbName(formats strfmt.Registry) error {

	if err := validate.Required("db_name", "body", m.DbName); err != nil {
		return err
	}

	return nil
}

func (m *RunQueryFormData) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

var runQueryFormDataTypeTableTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["YQL_TABLE_TYPE","REDIS_TABLE_TYPE","PGSQL_TABLE_TYPE","TRANSACTION_STATUS_TABLE_TYPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runQueryFormDataTypeTableTypePropEnum = append(runQueryFormDataTypeTableTypePropEnum, v)
	}
}

const (

	// RunQueryFormDataTableTypeYQLTABLETYPE captures enum value "YQL_TABLE_TYPE"
	RunQueryFormDataTableTypeYQLTABLETYPE string = "YQL_TABLE_TYPE"

	// RunQueryFormDataTableTypeREDISTABLETYPE captures enum value "REDIS_TABLE_TYPE"
	RunQueryFormDataTableTypeREDISTABLETYPE string = "REDIS_TABLE_TYPE"

	// RunQueryFormDataTableTypePGSQLTABLETYPE captures enum value "PGSQL_TABLE_TYPE"
	RunQueryFormDataTableTypePGSQLTABLETYPE string = "PGSQL_TABLE_TYPE"

	// RunQueryFormDataTableTypeTRANSACTIONSTATUSTABLETYPE captures enum value "TRANSACTION_STATUS_TABLE_TYPE"
	RunQueryFormDataTableTypeTRANSACTIONSTATUSTABLETYPE string = "TRANSACTION_STATUS_TABLE_TYPE"
)

// prop value enum
func (m *RunQueryFormData) validateTableTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, runQueryFormDataTypeTableTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RunQueryFormData) validateTableType(formats strfmt.Registry) error {

	if err := validate.Required("tableType", "body", m.TableType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTableTypeEnum("tableType", "body", *m.TableType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this run query form data based on context it is used
func (m *RunQueryFormData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RunQueryFormData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RunQueryFormData) UnmarshalBinary(b []byte) error {
	var res RunQueryFormData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
