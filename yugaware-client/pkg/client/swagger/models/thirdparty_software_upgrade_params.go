// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThirdpartySoftwareUpgradeParams thirdparty software upgrade params
//
// swagger:model ThirdpartySoftwareUpgradeParams
type ThirdpartySoftwareUpgradeParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// force all
	// Required: true
	ForceAll *bool `json:"forceAll"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload UpdateUniverseTags]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this thirdparty software upgrade params
func (m *ThirdpartySoftwareUpgradeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var thirdpartySoftwareUpgradeParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thirdpartySoftwareUpgradeParamsTypeCapabilityPropEnum = append(thirdpartySoftwareUpgradeParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// ThirdpartySoftwareUpgradeParamsCapabilityREADONLY captures enum value "READ_ONLY"
	ThirdpartySoftwareUpgradeParamsCapabilityREADONLY string = "READ_ONLY"

	// ThirdpartySoftwareUpgradeParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	ThirdpartySoftwareUpgradeParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *ThirdpartySoftwareUpgradeParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thirdpartySoftwareUpgradeParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var thirdpartySoftwareUpgradeParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thirdpartySoftwareUpgradeParamsTypeCurrentClusterTypePropEnum = append(thirdpartySoftwareUpgradeParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// ThirdpartySoftwareUpgradeParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	ThirdpartySoftwareUpgradeParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// ThirdpartySoftwareUpgradeParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	ThirdpartySoftwareUpgradeParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *ThirdpartySoftwareUpgradeParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thirdpartySoftwareUpgradeParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateForceAll(formats strfmt.Registry) error {

	if err := validate.Required("forceAll", "body", m.ForceAll); err != nil {
		return err
	}

	return nil
}

var thirdpartySoftwareUpgradeParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thirdpartySoftwareUpgradeParamsTypeImportedStatePropEnum = append(thirdpartySoftwareUpgradeParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// ThirdpartySoftwareUpgradeParamsImportedStateNONE captures enum value "NONE"
	ThirdpartySoftwareUpgradeParamsImportedStateNONE string = "NONE"

	// ThirdpartySoftwareUpgradeParamsImportedStateSTARTED captures enum value "STARTED"
	ThirdpartySoftwareUpgradeParamsImportedStateSTARTED string = "STARTED"

	// ThirdpartySoftwareUpgradeParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	ThirdpartySoftwareUpgradeParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// ThirdpartySoftwareUpgradeParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	ThirdpartySoftwareUpgradeParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// ThirdpartySoftwareUpgradeParamsImportedStateIMPORTED captures enum value "IMPORTED"
	ThirdpartySoftwareUpgradeParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *ThirdpartySoftwareUpgradeParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thirdpartySoftwareUpgradeParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var thirdpartySoftwareUpgradeParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload","UpdateUniverseTags"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thirdpartySoftwareUpgradeParamsTypeUpdatingTaskPropEnum = append(thirdpartySoftwareUpgradeParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskExternalScript string = "ExternalScript"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskPauseServer string = "PauseServer"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskResumeServer string = "ResumeServer"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskBulkImport string = "BulkImport"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateTable string = "CreateTable"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskBackupTable string = "BackupTable"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskResizeNode string = "ResizeNode"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"

	// ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateUniverseTags captures enum value "UpdateUniverseTags"
	ThirdpartySoftwareUpgradeParamsUpdatingTaskUpdateUniverseTags string = "UpdateUniverseTags"
)

// prop value enum
func (m *ThirdpartySoftwareUpgradeParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thirdpartySoftwareUpgradeParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var thirdpartySoftwareUpgradeParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thirdpartySoftwareUpgradeParamsTypeUpgradeOptionPropEnum = append(thirdpartySoftwareUpgradeParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// ThirdpartySoftwareUpgradeParamsUpgradeOptionRolling captures enum value "Rolling"
	ThirdpartySoftwareUpgradeParamsUpgradeOptionRolling string = "Rolling"

	// ThirdpartySoftwareUpgradeParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	ThirdpartySoftwareUpgradeParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// ThirdpartySoftwareUpgradeParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	ThirdpartySoftwareUpgradeParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *ThirdpartySoftwareUpgradeParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, thirdpartySoftwareUpgradeParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this thirdparty software upgrade params based on the context it is used
func (m *ThirdpartySoftwareUpgradeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *ThirdpartySoftwareUpgradeParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThirdpartySoftwareUpgradeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThirdpartySoftwareUpgradeParams) UnmarshalBinary(b []byte) error {
	var res ThirdpartySoftwareUpgradeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
