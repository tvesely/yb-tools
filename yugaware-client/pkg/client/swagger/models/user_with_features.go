// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserWithFeatures A user with set of features, associated with a customer
//
// swagger:model UserWithFeatures
type UserWithFeatures struct {

	// API token creation date
	// Example: 1624255408795
	// Read Only: true
	// Format: date-time
	AuthTokenIssueDate strfmt.DateTime `json:"authTokenIssueDate,omitempty"`

	// User creation date
	// Example: 2021-06-17T15:00:05-04:00
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// Customer UUID
	// Read Only: true
	// Format: uuid
	CustomerUUID strfmt.UUID `json:"customerUUID,omitempty"`

	// User email address
	// Example: username1@example.com
	// Required: true
	Email *string `json:"email"`

	// True if the user is the primary user
	IsPrimary bool `json:"isPrimary,omitempty"`

	// LDAP Specified Role
	LdapSpecifiedRole bool `json:"ldapSpecifiedRole,omitempty"`

	// User role
	// Enum: [Admin ReadOnly SuperAdmin BackupAdmin]
	Role string `json:"role,omitempty"`

	// User timezone
	Timezone string `json:"timezone,omitempty"`

	// User Type
	// Enum: [local ldap]
	UserType string `json:"userType,omitempty"`

	// User UUID
	// Read Only: true
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this user with features
func (m *UserWithFeatures) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthTokenIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserWithFeatures) validateAuthTokenIssueDate(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthTokenIssueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("authTokenIssueDate", "body", "date-time", m.AuthTokenIssueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserWithFeatures) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserWithFeatures) validateCustomerUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("customerUUID", "body", "uuid", m.CustomerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserWithFeatures) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

var userWithFeaturesTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Admin","ReadOnly","SuperAdmin","BackupAdmin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userWithFeaturesTypeRolePropEnum = append(userWithFeaturesTypeRolePropEnum, v)
	}
}

const (

	// UserWithFeaturesRoleAdmin captures enum value "Admin"
	UserWithFeaturesRoleAdmin string = "Admin"

	// UserWithFeaturesRoleReadOnly captures enum value "ReadOnly"
	UserWithFeaturesRoleReadOnly string = "ReadOnly"

	// UserWithFeaturesRoleSuperAdmin captures enum value "SuperAdmin"
	UserWithFeaturesRoleSuperAdmin string = "SuperAdmin"

	// UserWithFeaturesRoleBackupAdmin captures enum value "BackupAdmin"
	UserWithFeaturesRoleBackupAdmin string = "BackupAdmin"
)

// prop value enum
func (m *UserWithFeatures) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userWithFeaturesTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserWithFeatures) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

var userWithFeaturesTypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["local","ldap"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userWithFeaturesTypeUserTypePropEnum = append(userWithFeaturesTypeUserTypePropEnum, v)
	}
}

const (

	// UserWithFeaturesUserTypeLocal captures enum value "local"
	UserWithFeaturesUserTypeLocal string = "local"

	// UserWithFeaturesUserTypeLdap captures enum value "ldap"
	UserWithFeaturesUserTypeLdap string = "ldap"
)

// prop value enum
func (m *UserWithFeatures) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userWithFeaturesTypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserWithFeatures) validateUserType(formats strfmt.Registry) error {
	if swag.IsZero(m.UserType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserTypeEnum("userType", "body", m.UserType); err != nil {
		return err
	}

	return nil
}

func (m *UserWithFeatures) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user with features based on the context it is used
func (m *UserWithFeatures) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthTokenIssueDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserWithFeatures) contextValidateAuthTokenIssueDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "authTokenIssueDate", "body", strfmt.DateTime(m.AuthTokenIssueDate)); err != nil {
		return err
	}

	return nil
}

func (m *UserWithFeatures) contextValidateCreationDate(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creationDate", "body", strfmt.DateTime(m.CreationDate)); err != nil {
		return err
	}

	return nil
}

func (m *UserWithFeatures) contextValidateCustomerUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	return nil
}

func (m *UserWithFeatures) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", strfmt.UUID(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserWithFeatures) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserWithFeatures) UnmarshalBinary(b []byte) error {
	var res UserWithFeatures
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
