// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Package package
//
// swagger:model Package
type Package struct {

	// arch
	// Enum: [x86_64 arm64]
	Arch string `json:"arch,omitempty"`

	// path
	Path string `json:"path,omitempty"`
}

// Validate validates this package
func (m *Package) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var packageTypeArchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["x86_64","arm64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packageTypeArchPropEnum = append(packageTypeArchPropEnum, v)
	}
}

const (

	// PackageArchX8664 captures enum value "x86_64"
	PackageArchX8664 string = "x86_64"

	// PackageArchArm64 captures enum value "arm64"
	PackageArchArm64 string = "arm64"
)

// prop value enum
func (m *Package) validateArchEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, packageTypeArchPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Package) validateArch(formats strfmt.Registry) error {
	if swag.IsZero(m.Arch) { // not required
		return nil
	}

	// value enum
	if err := m.validateArchEnum("arch", "body", m.Arch); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this package based on context it is used
func (m *Package) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Package) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Package) UnmarshalBinary(b []byte) error {
	var res Package
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
