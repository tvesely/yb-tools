// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HashicorpVaultConfigParams hashicorp vault config params
//
// swagger:model HashicorpVaultConfigParams
type HashicorpVaultConfigParams struct {

	// engine
	// Required: true
	Engine *string `json:"engine"`

	// mount path
	// Required: true
	MountPath *string `json:"mountPath"`

	// role
	// Required: true
	Role *string `json:"role"`

	// ttl
	TTL int64 `json:"ttl,omitempty"`

	// ttl expiry
	TTLExpiry int64 `json:"ttlExpiry,omitempty"`

	// vault addr
	// Required: true
	VaultAddr *string `json:"vaultAddr"`

	// vault token
	// Required: true
	VaultToken *string `json:"vaultToken"`
}

// Validate validates this hashicorp vault config params
func (m *HashicorpVaultConfigParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEngine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpVaultConfigParams) validateEngine(formats strfmt.Registry) error {

	if err := validate.Required("engine", "body", m.Engine); err != nil {
		return err
	}

	return nil
}

func (m *HashicorpVaultConfigParams) validateMountPath(formats strfmt.Registry) error {

	if err := validate.Required("mountPath", "body", m.MountPath); err != nil {
		return err
	}

	return nil
}

func (m *HashicorpVaultConfigParams) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *HashicorpVaultConfigParams) validateVaultAddr(formats strfmt.Registry) error {

	if err := validate.Required("vaultAddr", "body", m.VaultAddr); err != nil {
		return err
	}

	return nil
}

func (m *HashicorpVaultConfigParams) validateVaultToken(formats strfmt.Registry) error {

	if err := validate.Required("vaultToken", "body", m.VaultToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hashicorp vault config params based on context it is used
func (m *HashicorpVaultConfigParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpVaultConfigParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpVaultConfigParams) UnmarshalBinary(b []byte) error {
	var res HashicorpVaultConfigParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
