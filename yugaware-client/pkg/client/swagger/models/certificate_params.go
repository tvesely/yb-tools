// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateParams certificate params
//
// swagger:model CertificateParams
type CertificateParams struct {

	// cert content
	// Required: true
	CertContent *string `json:"certContent"`

	// cert expiry
	// Required: true
	CertExpiry *int64 `json:"certExpiry"`

	// cert start
	// Required: true
	CertStart *int64 `json:"certStart"`

	// cert type
	// Required: true
	// Enum: [SelfSigned CustomCertHostPath CustomServerCert HashicorpVault]
	CertType *string `json:"certType"`

	// custom cert info
	// Required: true
	CustomCertInfo *CustomCertInfo `json:"customCertInfo"`

	// custom server cert data
	// Required: true
	CustomServerCertData *CustomServerCertData `json:"customServerCertData"`

	// hc vault cert params
	// Required: true
	HcVaultCertParams *HashicorpVaultConfigParams `json:"hcVaultCertParams"`

	// key content
	// Required: true
	KeyContent *string `json:"keyContent"`

	// label
	// Required: true
	Label *string `json:"label"`
}

// Validate validates this certificate params
func (m *CertificateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomCertInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomServerCertData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcVaultCertParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateParams) validateCertContent(formats strfmt.Registry) error {

	if err := validate.Required("certContent", "body", m.CertContent); err != nil {
		return err
	}

	return nil
}

func (m *CertificateParams) validateCertExpiry(formats strfmt.Registry) error {

	if err := validate.Required("certExpiry", "body", m.CertExpiry); err != nil {
		return err
	}

	return nil
}

func (m *CertificateParams) validateCertStart(formats strfmt.Registry) error {

	if err := validate.Required("certStart", "body", m.CertStart); err != nil {
		return err
	}

	return nil
}

var certificateParamsTypeCertTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SelfSigned","CustomCertHostPath","CustomServerCert","HashicorpVault"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certificateParamsTypeCertTypePropEnum = append(certificateParamsTypeCertTypePropEnum, v)
	}
}

const (

	// CertificateParamsCertTypeSelfSigned captures enum value "SelfSigned"
	CertificateParamsCertTypeSelfSigned string = "SelfSigned"

	// CertificateParamsCertTypeCustomCertHostPath captures enum value "CustomCertHostPath"
	CertificateParamsCertTypeCustomCertHostPath string = "CustomCertHostPath"

	// CertificateParamsCertTypeCustomServerCert captures enum value "CustomServerCert"
	CertificateParamsCertTypeCustomServerCert string = "CustomServerCert"

	// CertificateParamsCertTypeHashicorpVault captures enum value "HashicorpVault"
	CertificateParamsCertTypeHashicorpVault string = "HashicorpVault"
)

// prop value enum
func (m *CertificateParams) validateCertTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certificateParamsTypeCertTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertificateParams) validateCertType(formats strfmt.Registry) error {

	if err := validate.Required("certType", "body", m.CertType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCertTypeEnum("certType", "body", *m.CertType); err != nil {
		return err
	}

	return nil
}

func (m *CertificateParams) validateCustomCertInfo(formats strfmt.Registry) error {

	if err := validate.Required("customCertInfo", "body", m.CustomCertInfo); err != nil {
		return err
	}

	if m.CustomCertInfo != nil {
		if err := m.CustomCertInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customCertInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customCertInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateParams) validateCustomServerCertData(formats strfmt.Registry) error {

	if err := validate.Required("customServerCertData", "body", m.CustomServerCertData); err != nil {
		return err
	}

	if m.CustomServerCertData != nil {
		if err := m.CustomServerCertData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customServerCertData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customServerCertData")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateParams) validateHcVaultCertParams(formats strfmt.Registry) error {

	if err := validate.Required("hcVaultCertParams", "body", m.HcVaultCertParams); err != nil {
		return err
	}

	if m.HcVaultCertParams != nil {
		if err := m.HcVaultCertParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hcVaultCertParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hcVaultCertParams")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateParams) validateKeyContent(formats strfmt.Registry) error {

	if err := validate.Required("keyContent", "body", m.KeyContent); err != nil {
		return err
	}

	return nil
}

func (m *CertificateParams) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this certificate params based on the context it is used
func (m *CertificateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomCertInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomServerCertData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHcVaultCertParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateParams) contextValidateCustomCertInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomCertInfo != nil {
		if err := m.CustomCertInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customCertInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customCertInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateParams) contextValidateCustomServerCertData(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomServerCertData != nil {
		if err := m.CustomServerCertData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customServerCertData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customServerCertData")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateParams) contextValidateHcVaultCertParams(ctx context.Context, formats strfmt.Registry) error {

	if m.HcVaultCertParams != nil {
		if err := m.HcVaultCertParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hcVaultCertParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hcVaultCertParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateParams) UnmarshalBinary(b []byte) error {
	var res CertificateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
