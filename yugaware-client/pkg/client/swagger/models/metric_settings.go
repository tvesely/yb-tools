// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricSettings Settings, selected for particular metric
//
// swagger:model MetricSettings
type MetricSettings struct {

	// Way of metrics aggregation over time and across nodes
	// Required: true
	// Enum: [DEFAULT MIN MAX AVG SUM]
	Aggregation *string `json:"aggregation"`

	// Metric name
	// Required: true
	Metric *string `json:"metric"`

	// Query result for 'top' nodes separately. 0 means aggregate over all nodes
	// Required: true
	SplitTopNodes *int32 `json:"splitTopNodes"`
}

// Validate validates this metric settings
func (m *MetricSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSplitTopNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var metricSettingsTypeAggregationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","MIN","MAX","AVG","SUM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricSettingsTypeAggregationPropEnum = append(metricSettingsTypeAggregationPropEnum, v)
	}
}

const (

	// MetricSettingsAggregationDEFAULT captures enum value "DEFAULT"
	MetricSettingsAggregationDEFAULT string = "DEFAULT"

	// MetricSettingsAggregationMIN captures enum value "MIN"
	MetricSettingsAggregationMIN string = "MIN"

	// MetricSettingsAggregationMAX captures enum value "MAX"
	MetricSettingsAggregationMAX string = "MAX"

	// MetricSettingsAggregationAVG captures enum value "AVG"
	MetricSettingsAggregationAVG string = "AVG"

	// MetricSettingsAggregationSUM captures enum value "SUM"
	MetricSettingsAggregationSUM string = "SUM"
)

// prop value enum
func (m *MetricSettings) validateAggregationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, metricSettingsTypeAggregationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MetricSettings) validateAggregation(formats strfmt.Registry) error {

	if err := validate.Required("aggregation", "body", m.Aggregation); err != nil {
		return err
	}

	// value enum
	if err := m.validateAggregationEnum("aggregation", "body", *m.Aggregation); err != nil {
		return err
	}

	return nil
}

func (m *MetricSettings) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	return nil
}

func (m *MetricSettings) validateSplitTopNodes(formats strfmt.Registry) error {

	if err := validate.Required("splitTopNodes", "body", m.SplitTopNodes); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this metric settings based on context it is used
func (m *MetricSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetricSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricSettings) UnmarshalBinary(b []byte) error {
	var res MetricSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
