// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerConfigUI Customer configuration with additional information. Includes storage, alerts, password policy, and call-home level.
//
// swagger:model CustomerConfigUI
type CustomerConfigUI struct {

	// Config name
	// Example: backup20-01-2021
	// Required: true
	// Max Length: 100
	// Min Length: 1
	ConfigName *string `json:"configName"`

	// Config UUID
	// Read Only: true
	// Format: uuid
	ConfigUUID strfmt.UUID `json:"configUUID,omitempty"`

	// Customer UUID
	// Required: true
	// Read Only: true
	// Format: uuid
	CustomerUUID strfmt.UUID `json:"customerUUID"`

	// Configuration data
	// Example: {\"AWS_ACCESS_KEY_ID\": \"AK****************ZD\"}
	// Required: true
	Data interface{} `json:"data"`

	// True if there is an in use reference to the object
	// Read Only: true
	InUse *bool `json:"inUse,omitempty"`

	// Name
	// Example: S3
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Name *string `json:"name"`

	// state of the customerConfig. Possible values are Active, QueuedForDeletion.
	// Read Only: true
	// Enum: [Active QueuedForDeletion]
	State string `json:"state,omitempty"`

	// Config type
	// Example: STORAGE
	// Required: true
	// Enum: [STORAGE ALERTS CALLHOME PASSWORD_POLICY OTHER]
	Type *string `json:"type"`

	// Universe details
	// Example: {\"name\": \"jd-aws-21-6-21-test4\"}
	UniverseDetails []*UniverseDetailSubset `json:"universeDetails"`
}

// Validate validates this customer config UI
func (m *CustomerConfigUI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerConfigUI) validateConfigName(formats strfmt.Registry) error {

	if err := validate.Required("configName", "body", m.ConfigName); err != nil {
		return err
	}

	if err := validate.MinLength("configName", "body", *m.ConfigName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("configName", "body", *m.ConfigName, 100); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfigUI) validateConfigUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("configUUID", "body", "uuid", m.ConfigUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfigUI) validateCustomerUUID(formats strfmt.Registry) error {

	if err := validate.Required("customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	if err := validate.FormatOf("customerUUID", "body", "uuid", m.CustomerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfigUI) validateData(formats strfmt.Registry) error {

	if m.Data == nil {
		return errors.Required("data", "body", nil)
	}

	return nil
}

func (m *CustomerConfigUI) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 50); err != nil {
		return err
	}

	return nil
}

var customerConfigUiTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","QueuedForDeletion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerConfigUiTypeStatePropEnum = append(customerConfigUiTypeStatePropEnum, v)
	}
}

const (

	// CustomerConfigUIStateActive captures enum value "Active"
	CustomerConfigUIStateActive string = "Active"

	// CustomerConfigUIStateQueuedForDeletion captures enum value "QueuedForDeletion"
	CustomerConfigUIStateQueuedForDeletion string = "QueuedForDeletion"
)

// prop value enum
func (m *CustomerConfigUI) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerConfigUiTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerConfigUI) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var customerConfigUiTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STORAGE","ALERTS","CALLHOME","PASSWORD_POLICY","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerConfigUiTypeTypePropEnum = append(customerConfigUiTypeTypePropEnum, v)
	}
}

const (

	// CustomerConfigUITypeSTORAGE captures enum value "STORAGE"
	CustomerConfigUITypeSTORAGE string = "STORAGE"

	// CustomerConfigUITypeALERTS captures enum value "ALERTS"
	CustomerConfigUITypeALERTS string = "ALERTS"

	// CustomerConfigUITypeCALLHOME captures enum value "CALLHOME"
	CustomerConfigUITypeCALLHOME string = "CALLHOME"

	// CustomerConfigUITypePASSWORDPOLICY captures enum value "PASSWORD_POLICY"
	CustomerConfigUITypePASSWORDPOLICY string = "PASSWORD_POLICY"

	// CustomerConfigUITypeOTHER captures enum value "OTHER"
	CustomerConfigUITypeOTHER string = "OTHER"
)

// prop value enum
func (m *CustomerConfigUI) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerConfigUiTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerConfigUI) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfigUI) validateUniverseDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.UniverseDetails); i++ {
		if swag.IsZero(m.UniverseDetails[i]) { // not required
			continue
		}

		if m.UniverseDetails[i] != nil {
			if err := m.UniverseDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("universeDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("universeDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this customer config UI based on the context it is used
func (m *CustomerConfigUI) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInUse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUniverseDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerConfigUI) contextValidateConfigUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "configUUID", "body", strfmt.UUID(m.ConfigUUID)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfigUI) contextValidateCustomerUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfigUI) contextValidateInUse(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "inUse", "body", m.InUse); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfigUI) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfigUI) contextValidateUniverseDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UniverseDetails); i++ {

		if m.UniverseDetails[i] != nil {
			if err := m.UniverseDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("universeDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("universeDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerConfigUI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerConfigUI) UnmarshalBinary(b []byte) error {
	var res CustomerConfigUI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
