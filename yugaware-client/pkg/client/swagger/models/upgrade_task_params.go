// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeTaskParams upgrade task params
//
// swagger:model UpgradeTaskParams
type UpgradeTaskParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this upgrade task params
func (m *UpgradeTaskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradeTaskParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeTaskParamsTypeCapabilityPropEnum = append(upgradeTaskParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// UpgradeTaskParamsCapabilityREADONLY captures enum value "READ_ONLY"
	UpgradeTaskParamsCapabilityREADONLY string = "READ_ONLY"

	// UpgradeTaskParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	UpgradeTaskParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *UpgradeTaskParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeTaskParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeTaskParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeTaskParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var upgradeTaskParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeTaskParamsTypeCurrentClusterTypePropEnum = append(upgradeTaskParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// UpgradeTaskParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	UpgradeTaskParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// UpgradeTaskParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	UpgradeTaskParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *UpgradeTaskParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeTaskParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeTaskParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeTaskParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeTaskParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var upgradeTaskParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeTaskParamsTypeImportedStatePropEnum = append(upgradeTaskParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// UpgradeTaskParamsImportedStateNONE captures enum value "NONE"
	UpgradeTaskParamsImportedStateNONE string = "NONE"

	// UpgradeTaskParamsImportedStateSTARTED captures enum value "STARTED"
	UpgradeTaskParamsImportedStateSTARTED string = "STARTED"

	// UpgradeTaskParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	UpgradeTaskParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// UpgradeTaskParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	UpgradeTaskParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// UpgradeTaskParamsImportedStateIMPORTED captures enum value "IMPORTED"
	UpgradeTaskParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *UpgradeTaskParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeTaskParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeTaskParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeTaskParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpgradeTaskParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UpgradeTaskParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var upgradeTaskParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeTaskParamsTypeUpdatingTaskPropEnum = append(upgradeTaskParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// UpgradeTaskParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	UpgradeTaskParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// UpgradeTaskParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	UpgradeTaskParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// UpgradeTaskParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	UpgradeTaskParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// UpgradeTaskParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	UpgradeTaskParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// UpgradeTaskParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	UpgradeTaskParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// UpgradeTaskParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	UpgradeTaskParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// UpgradeTaskParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	UpgradeTaskParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// UpgradeTaskParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	UpgradeTaskParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// UpgradeTaskParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	UpgradeTaskParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// UpgradeTaskParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	UpgradeTaskParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// UpgradeTaskParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	UpgradeTaskParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// UpgradeTaskParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	UpgradeTaskParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// UpgradeTaskParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	UpgradeTaskParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// UpgradeTaskParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	UpgradeTaskParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// UpgradeTaskParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	UpgradeTaskParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// UpgradeTaskParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	UpgradeTaskParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// UpgradeTaskParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	UpgradeTaskParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// UpgradeTaskParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	UpgradeTaskParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// UpgradeTaskParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	UpgradeTaskParamsUpdatingTaskExternalScript string = "ExternalScript"

	// UpgradeTaskParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	UpgradeTaskParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// UpgradeTaskParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	UpgradeTaskParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// UpgradeTaskParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	UpgradeTaskParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// UpgradeTaskParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	UpgradeTaskParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// UpgradeTaskParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	UpgradeTaskParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// UpgradeTaskParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	UpgradeTaskParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// UpgradeTaskParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	UpgradeTaskParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// UpgradeTaskParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	UpgradeTaskParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// UpgradeTaskParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	UpgradeTaskParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// UpgradeTaskParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	UpgradeTaskParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// UpgradeTaskParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	UpgradeTaskParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// UpgradeTaskParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	UpgradeTaskParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// UpgradeTaskParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	UpgradeTaskParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// UpgradeTaskParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	UpgradeTaskParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// UpgradeTaskParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	UpgradeTaskParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// UpgradeTaskParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	UpgradeTaskParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// UpgradeTaskParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	UpgradeTaskParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// UpgradeTaskParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	UpgradeTaskParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// UpgradeTaskParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	UpgradeTaskParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// UpgradeTaskParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	UpgradeTaskParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// UpgradeTaskParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	UpgradeTaskParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// UpgradeTaskParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	UpgradeTaskParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// UpgradeTaskParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	UpgradeTaskParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// UpgradeTaskParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	UpgradeTaskParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// UpgradeTaskParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	UpgradeTaskParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// UpgradeTaskParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	UpgradeTaskParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// UpgradeTaskParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	UpgradeTaskParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// UpgradeTaskParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	UpgradeTaskParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// UpgradeTaskParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	UpgradeTaskParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// UpgradeTaskParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	UpgradeTaskParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// UpgradeTaskParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	UpgradeTaskParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// UpgradeTaskParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	UpgradeTaskParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// UpgradeTaskParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	UpgradeTaskParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// UpgradeTaskParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	UpgradeTaskParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// UpgradeTaskParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	UpgradeTaskParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// UpgradeTaskParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	UpgradeTaskParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// UpgradeTaskParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	UpgradeTaskParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// UpgradeTaskParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	UpgradeTaskParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// UpgradeTaskParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	UpgradeTaskParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// UpgradeTaskParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	UpgradeTaskParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// UpgradeTaskParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	UpgradeTaskParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// UpgradeTaskParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	UpgradeTaskParamsUpdatingTaskPauseServer string = "PauseServer"

	// UpgradeTaskParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	UpgradeTaskParamsUpdatingTaskResumeServer string = "ResumeServer"

	// UpgradeTaskParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	UpgradeTaskParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// UpgradeTaskParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	UpgradeTaskParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// UpgradeTaskParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	UpgradeTaskParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// UpgradeTaskParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	UpgradeTaskParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// UpgradeTaskParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	UpgradeTaskParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// UpgradeTaskParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	UpgradeTaskParamsUpdatingTaskBulkImport string = "BulkImport"

	// UpgradeTaskParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	UpgradeTaskParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// UpgradeTaskParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	UpgradeTaskParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// UpgradeTaskParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	UpgradeTaskParamsUpdatingTaskCreateTable string = "CreateTable"

	// UpgradeTaskParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	UpgradeTaskParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// UpgradeTaskParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	UpgradeTaskParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// UpgradeTaskParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	UpgradeTaskParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// UpgradeTaskParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	UpgradeTaskParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// UpgradeTaskParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	UpgradeTaskParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// UpgradeTaskParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	UpgradeTaskParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// UpgradeTaskParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	UpgradeTaskParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// UpgradeTaskParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	UpgradeTaskParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// UpgradeTaskParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	UpgradeTaskParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// UpgradeTaskParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	UpgradeTaskParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// UpgradeTaskParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	UpgradeTaskParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// UpgradeTaskParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	UpgradeTaskParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// UpgradeTaskParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	UpgradeTaskParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// UpgradeTaskParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	UpgradeTaskParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// UpgradeTaskParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	UpgradeTaskParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// UpgradeTaskParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	UpgradeTaskParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// UpgradeTaskParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	UpgradeTaskParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// UpgradeTaskParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	UpgradeTaskParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// UpgradeTaskParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	UpgradeTaskParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// UpgradeTaskParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	UpgradeTaskParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// UpgradeTaskParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	UpgradeTaskParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// UpgradeTaskParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	UpgradeTaskParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// UpgradeTaskParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	UpgradeTaskParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// UpgradeTaskParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	UpgradeTaskParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// UpgradeTaskParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	UpgradeTaskParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// UpgradeTaskParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	UpgradeTaskParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// UpgradeTaskParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	UpgradeTaskParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// UpgradeTaskParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	UpgradeTaskParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// UpgradeTaskParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	UpgradeTaskParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// UpgradeTaskParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	UpgradeTaskParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// UpgradeTaskParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	UpgradeTaskParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// UpgradeTaskParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	UpgradeTaskParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// UpgradeTaskParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	UpgradeTaskParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// UpgradeTaskParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	UpgradeTaskParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// UpgradeTaskParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	UpgradeTaskParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// UpgradeTaskParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	UpgradeTaskParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// UpgradeTaskParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	UpgradeTaskParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// UpgradeTaskParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	UpgradeTaskParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// UpgradeTaskParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	UpgradeTaskParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// UpgradeTaskParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	UpgradeTaskParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// UpgradeTaskParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	UpgradeTaskParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// UpgradeTaskParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	UpgradeTaskParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// UpgradeTaskParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	UpgradeTaskParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// UpgradeTaskParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	UpgradeTaskParamsUpdatingTaskBackupTable string = "BackupTable"

	// UpgradeTaskParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	UpgradeTaskParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// UpgradeTaskParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	UpgradeTaskParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// UpgradeTaskParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	UpgradeTaskParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// UpgradeTaskParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	UpgradeTaskParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// UpgradeTaskParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	UpgradeTaskParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// UpgradeTaskParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	UpgradeTaskParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// UpgradeTaskParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	UpgradeTaskParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// UpgradeTaskParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	UpgradeTaskParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// UpgradeTaskParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	UpgradeTaskParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// UpgradeTaskParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	UpgradeTaskParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// UpgradeTaskParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	UpgradeTaskParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// UpgradeTaskParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	UpgradeTaskParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// UpgradeTaskParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	UpgradeTaskParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// UpgradeTaskParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	UpgradeTaskParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// UpgradeTaskParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	UpgradeTaskParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// UpgradeTaskParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	UpgradeTaskParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// UpgradeTaskParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	UpgradeTaskParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// UpgradeTaskParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	UpgradeTaskParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// UpgradeTaskParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	UpgradeTaskParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// UpgradeTaskParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	UpgradeTaskParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// UpgradeTaskParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	UpgradeTaskParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// UpgradeTaskParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	UpgradeTaskParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// UpgradeTaskParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	UpgradeTaskParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// UpgradeTaskParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	UpgradeTaskParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// UpgradeTaskParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	UpgradeTaskParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// UpgradeTaskParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	UpgradeTaskParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// UpgradeTaskParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	UpgradeTaskParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// UpgradeTaskParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	UpgradeTaskParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// UpgradeTaskParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	UpgradeTaskParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// UpgradeTaskParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	UpgradeTaskParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// UpgradeTaskParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	UpgradeTaskParamsUpdatingTaskResizeNode string = "ResizeNode"

	// UpgradeTaskParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	UpgradeTaskParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// UpgradeTaskParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	UpgradeTaskParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// UpgradeTaskParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	UpgradeTaskParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// UpgradeTaskParamsUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	UpgradeTaskParamsUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// UpgradeTaskParamsUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	UpgradeTaskParamsUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// UpgradeTaskParamsUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	UpgradeTaskParamsUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// UpgradeTaskParamsUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	UpgradeTaskParamsUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"
)

// prop value enum
func (m *UpgradeTaskParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeTaskParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeTaskParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var upgradeTaskParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeTaskParamsTypeUpgradeOptionPropEnum = append(upgradeTaskParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// UpgradeTaskParamsUpgradeOptionRolling captures enum value "Rolling"
	UpgradeTaskParamsUpgradeOptionRolling string = "Rolling"

	// UpgradeTaskParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	UpgradeTaskParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// UpgradeTaskParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	UpgradeTaskParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *UpgradeTaskParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeTaskParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeTaskParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this upgrade task params based on the context it is used
func (m *UpgradeTaskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeTaskParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeTaskParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeTaskParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeTaskParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeTaskParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeTaskParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpgradeTaskParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *UpgradeTaskParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeTaskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeTaskParams) UnmarshalBinary(b []byte) error {
	var res UpgradeTaskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
