// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyspaceTablesList keyspace tables list
//
// swagger:model KeyspaceTablesList
type KeyspaceTablesList struct {

	// backup size in bytes
	// Required: true
	BackupSizeInBytes *int64 `json:"backupSizeInBytes"`

	// default location
	// Required: true
	DefaultLocation *string `json:"defaultLocation"`

	// keyspace
	// Required: true
	Keyspace *string `json:"keyspace"`

	// per region locations
	// Required: true
	PerRegionLocations []*RegionLocations `json:"perRegionLocations"`

	// table UUID list
	// Required: true
	// Unique: true
	TableUUIDList []strfmt.UUID `json:"tableUUIDList"`

	// tables list
	// Required: true
	// Unique: true
	TablesList []string `json:"tablesList"`
}

// Validate validates this keyspace tables list
func (m *KeyspaceTablesList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupSizeInBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyspace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerRegionLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableUUIDList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTablesList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyspaceTablesList) validateBackupSizeInBytes(formats strfmt.Registry) error {

	if err := validate.Required("backupSizeInBytes", "body", m.BackupSizeInBytes); err != nil {
		return err
	}

	return nil
}

func (m *KeyspaceTablesList) validateDefaultLocation(formats strfmt.Registry) error {

	if err := validate.Required("defaultLocation", "body", m.DefaultLocation); err != nil {
		return err
	}

	return nil
}

func (m *KeyspaceTablesList) validateKeyspace(formats strfmt.Registry) error {

	if err := validate.Required("keyspace", "body", m.Keyspace); err != nil {
		return err
	}

	return nil
}

func (m *KeyspaceTablesList) validatePerRegionLocations(formats strfmt.Registry) error {

	if err := validate.Required("perRegionLocations", "body", m.PerRegionLocations); err != nil {
		return err
	}

	for i := 0; i < len(m.PerRegionLocations); i++ {
		if swag.IsZero(m.PerRegionLocations[i]) { // not required
			continue
		}

		if m.PerRegionLocations[i] != nil {
			if err := m.PerRegionLocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("perRegionLocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("perRegionLocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KeyspaceTablesList) validateTableUUIDList(formats strfmt.Registry) error {

	if err := validate.Required("tableUUIDList", "body", m.TableUUIDList); err != nil {
		return err
	}

	if err := validate.UniqueItems("tableUUIDList", "body", m.TableUUIDList); err != nil {
		return err
	}

	for i := 0; i < len(m.TableUUIDList); i++ {

		if err := validate.FormatOf("tableUUIDList"+"."+strconv.Itoa(i), "body", "uuid", m.TableUUIDList[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *KeyspaceTablesList) validateTablesList(formats strfmt.Registry) error {

	if err := validate.Required("tablesList", "body", m.TablesList); err != nil {
		return err
	}

	if err := validate.UniqueItems("tablesList", "body", m.TablesList); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this keyspace tables list based on the context it is used
func (m *KeyspaceTablesList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerRegionLocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyspaceTablesList) contextValidatePerRegionLocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PerRegionLocations); i++ {

		if m.PerRegionLocations[i] != nil {
			if err := m.PerRegionLocations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("perRegionLocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("perRegionLocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyspaceTablesList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyspaceTablesList) UnmarshalBinary(b []byte) error {
	var res KeyspaceTablesList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
