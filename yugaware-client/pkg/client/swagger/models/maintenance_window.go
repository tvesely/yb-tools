// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaintenanceWindow Maintenance Window
//
// swagger:model MaintenanceWindow
type MaintenanceWindow struct {

	// Alert configuration filter
	// Required: true
	AlertConfigurationFilter *AlertConfigurationAPIFilter `json:"alertConfigurationFilter"`

	// Creation time
	// Required: true
	// Read Only: true
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime"`

	// Customer UUID
	// Required: true
	// Read Only: true
	// Format: uuid
	CustomerUUID strfmt.UUID `json:"customerUUID"`

	// Description
	// Required: true
	// Max Length: 2147483647
	// Min Length: 1
	Description *string `json:"description"`

	// End time
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"endTime"`

	// Name
	// Required: true
	// Max Length: 1000
	// Min Length: 1
	Name *string `json:"name"`

	// Start time
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"startTime"`

	// State
	// Read Only: true
	// Enum: [FINISHED ACTIVE PENDING]
	State string `json:"state,omitempty"`

	// Maintenance window UUID
	// Read Only: true
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this maintenance window
func (m *MaintenanceWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertConfigurationFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaintenanceWindow) validateAlertConfigurationFilter(formats strfmt.Registry) error {

	if err := validate.Required("alertConfigurationFilter", "body", m.AlertConfigurationFilter); err != nil {
		return err
	}

	if m.AlertConfigurationFilter != nil {
		if err := m.AlertConfigurationFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertConfigurationFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertConfigurationFilter")
			}
			return err
		}
	}

	return nil
}

func (m *MaintenanceWindow) validateCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("createTime", "body", strfmt.DateTime(m.CreateTime)); err != nil {
		return err
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) validateCustomerUUID(formats strfmt.Registry) error {

	if err := validate.Required("customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	if err := validate.FormatOf("customerUUID", "body", "uuid", m.CustomerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", *m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 2147483647); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 1000); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var maintenanceWindowTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FINISHED","ACTIVE","PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maintenanceWindowTypeStatePropEnum = append(maintenanceWindowTypeStatePropEnum, v)
	}
}

const (

	// MaintenanceWindowStateFINISHED captures enum value "FINISHED"
	MaintenanceWindowStateFINISHED string = "FINISHED"

	// MaintenanceWindowStateACTIVE captures enum value "ACTIVE"
	MaintenanceWindowStateACTIVE string = "ACTIVE"

	// MaintenanceWindowStatePENDING captures enum value "PENDING"
	MaintenanceWindowStatePENDING string = "PENDING"
)

// prop value enum
func (m *MaintenanceWindow) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maintenanceWindowTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaintenanceWindow) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this maintenance window based on the context it is used
func (m *MaintenanceWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertConfigurationFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaintenanceWindow) contextValidateAlertConfigurationFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.AlertConfigurationFilter != nil {
		if err := m.AlertConfigurationFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alertConfigurationFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alertConfigurationFilter")
			}
			return err
		}
	}

	return nil
}

func (m *MaintenanceWindow) contextValidateCreateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createTime", "body", strfmt.DateTime(m.CreateTime)); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) contextValidateCustomerUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", strfmt.UUID(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaintenanceWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaintenanceWindow) UnmarshalBinary(b []byte) error {
	var res MaintenanceWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
