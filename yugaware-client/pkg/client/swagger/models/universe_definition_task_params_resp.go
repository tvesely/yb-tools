// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniverseDefinitionTaskParamsResp universe definition task params resp
//
// swagger:model UniverseDefinitionTaskParamsResp
type UniverseDefinitionTaskParamsResp struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// node details set
	// Read Only: true
	// Unique: true
	NodeDetailsSet []*NodeDetailsResp `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload UpdateUniverseTags]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this universe definition task params resp
func (m *UniverseDefinitionTaskParamsResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var universeDefinitionTaskParamsRespTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeDefinitionTaskParamsRespTypeCapabilityPropEnum = append(universeDefinitionTaskParamsRespTypeCapabilityPropEnum, v)
	}
}

const (

	// UniverseDefinitionTaskParamsRespCapabilityREADONLY captures enum value "READ_ONLY"
	UniverseDefinitionTaskParamsRespCapabilityREADONLY string = "READ_ONLY"

	// UniverseDefinitionTaskParamsRespCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	UniverseDefinitionTaskParamsRespCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *UniverseDefinitionTaskParamsResp) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeDefinitionTaskParamsRespTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var universeDefinitionTaskParamsRespTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeDefinitionTaskParamsRespTypeCurrentClusterTypePropEnum = append(universeDefinitionTaskParamsRespTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// UniverseDefinitionTaskParamsRespCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	UniverseDefinitionTaskParamsRespCurrentClusterTypePRIMARY string = "PRIMARY"

	// UniverseDefinitionTaskParamsRespCurrentClusterTypeASYNC captures enum value "ASYNC"
	UniverseDefinitionTaskParamsRespCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *UniverseDefinitionTaskParamsResp) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeDefinitionTaskParamsRespTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var universeDefinitionTaskParamsRespTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeDefinitionTaskParamsRespTypeImportedStatePropEnum = append(universeDefinitionTaskParamsRespTypeImportedStatePropEnum, v)
	}
}

const (

	// UniverseDefinitionTaskParamsRespImportedStateNONE captures enum value "NONE"
	UniverseDefinitionTaskParamsRespImportedStateNONE string = "NONE"

	// UniverseDefinitionTaskParamsRespImportedStateSTARTED captures enum value "STARTED"
	UniverseDefinitionTaskParamsRespImportedStateSTARTED string = "STARTED"

	// UniverseDefinitionTaskParamsRespImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	UniverseDefinitionTaskParamsRespImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// UniverseDefinitionTaskParamsRespImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	UniverseDefinitionTaskParamsRespImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// UniverseDefinitionTaskParamsRespImportedStateIMPORTED captures enum value "IMPORTED"
	UniverseDefinitionTaskParamsRespImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *UniverseDefinitionTaskParamsResp) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeDefinitionTaskParamsRespTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var universeDefinitionTaskParamsRespTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload","UpdateUniverseTags"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeDefinitionTaskParamsRespTypeUpdatingTaskPropEnum = append(universeDefinitionTaskParamsRespTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudCleanup string = "CloudCleanup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateUniverse string = "CreateUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	UniverseDefinitionTaskParamsRespUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// UniverseDefinitionTaskParamsRespUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	UniverseDefinitionTaskParamsRespUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskPauseUniverse string = "PauseUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteTable captures enum value "DeleteTable"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteTable string = "DeleteTable"

	// UniverseDefinitionTaskParamsRespUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskBackupUniverse string = "BackupUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	UniverseDefinitionTaskParamsRespUpdatingTaskRestoreBackup string = "RestoreBackup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	UniverseDefinitionTaskParamsRespUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateBackup captures enum value "CreateBackup"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateBackup string = "CreateBackup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskEditUniverse captures enum value "EditUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskEditUniverse string = "EditUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskExternalScript captures enum value "ExternalScript"
	UniverseDefinitionTaskParamsRespUpdatingTaskExternalScript string = "ExternalScript"

	// UniverseDefinitionTaskParamsRespUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	UniverseDefinitionTaskParamsRespUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// UniverseDefinitionTaskParamsRespUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	UniverseDefinitionTaskParamsRespUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskRestartUniverse string = "RestartUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCertsRotate captures enum value "CertsRotate"
	UniverseDefinitionTaskParamsRespUpdatingTaskCertsRotate string = "CertsRotate"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskTLSToggle captures enum value "TlsToggle"
	UniverseDefinitionTaskParamsRespUpdatingTaskTLSToggle string = "TlsToggle"

	// UniverseDefinitionTaskParamsRespUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// UniverseDefinitionTaskParamsRespUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	UniverseDefinitionTaskParamsRespUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// UniverseDefinitionTaskParamsRespUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	UniverseDefinitionTaskParamsRespUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// UniverseDefinitionTaskParamsRespUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	UniverseDefinitionTaskParamsRespUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// UniverseDefinitionTaskParamsRespUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	UniverseDefinitionTaskParamsRespUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	UniverseDefinitionTaskParamsRespUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// UniverseDefinitionTaskParamsRespUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	UniverseDefinitionTaskParamsRespUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// UniverseDefinitionTaskParamsRespUpdatingTaskPauseServer captures enum value "PauseServer"
	UniverseDefinitionTaskParamsRespUpdatingTaskPauseServer string = "PauseServer"

	// UniverseDefinitionTaskParamsRespUpdatingTaskResumeServer captures enum value "ResumeServer"
	UniverseDefinitionTaskParamsRespUpdatingTaskResumeServer string = "ResumeServer"

	// UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// UniverseDefinitionTaskParamsRespUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	UniverseDefinitionTaskParamsRespUpdatingTaskPrecheckNode string = "PrecheckNode"

	// UniverseDefinitionTaskParamsRespUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	UniverseDefinitionTaskParamsRespUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	UniverseDefinitionTaskParamsRespUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// UniverseDefinitionTaskParamsRespUpdatingTaskBulkImport captures enum value "BulkImport"
	UniverseDefinitionTaskParamsRespUpdatingTaskBulkImport string = "BulkImport"

	// UniverseDefinitionTaskParamsRespUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	UniverseDefinitionTaskParamsRespUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateTable captures enum value "CreateTable"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateTable string = "CreateTable"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteNode captures enum value "DeleteNode"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteNode string = "DeleteNode"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteBackup string = "DeleteBackup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	UniverseDefinitionTaskParamsRespUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// UniverseDefinitionTaskParamsRespUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	UniverseDefinitionTaskParamsRespUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// UniverseDefinitionTaskParamsRespUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	UniverseDefinitionTaskParamsRespUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	UniverseDefinitionTaskParamsRespUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	UniverseDefinitionTaskParamsRespUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSetNodeState captures enum value "SetNodeState"
	UniverseDefinitionTaskParamsRespUpdatingTaskSetNodeState string = "SetNodeState"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	UniverseDefinitionTaskParamsRespUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	UniverseDefinitionTaskParamsRespUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForServer captures enum value "WaitForServer"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForServer string = "WaitForServer"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskInstanceActions captures enum value "InstanceActions"
	UniverseDefinitionTaskParamsRespUpdatingTaskInstanceActions string = "InstanceActions"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	UniverseDefinitionTaskParamsRespUpdatingTaskRunExternalScript string = "RunExternalScript"

	// UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	UniverseDefinitionTaskParamsRespUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudInitializer string = "CloudInitializer"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCloudSetup captures enum value "CloudSetup"
	UniverseDefinitionTaskParamsRespUpdatingTaskCloudSetup string = "CloudSetup"

	// UniverseDefinitionTaskParamsRespUpdatingTaskBackupTable captures enum value "BackupTable"
	UniverseDefinitionTaskParamsRespUpdatingTaskBackupTable string = "BackupTable"

	// UniverseDefinitionTaskParamsRespUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	UniverseDefinitionTaskParamsRespUpdatingTaskBackupTableYb string = "BackupTableYb"

	// UniverseDefinitionTaskParamsRespUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	UniverseDefinitionTaskParamsRespUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	UniverseDefinitionTaskParamsRespUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	UniverseDefinitionTaskParamsRespUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	UniverseDefinitionTaskParamsRespUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// UniverseDefinitionTaskParamsRespUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	UniverseDefinitionTaskParamsRespUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	UniverseDefinitionTaskParamsRespUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	UniverseDefinitionTaskParamsRespUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// UniverseDefinitionTaskParamsRespUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	UniverseDefinitionTaskParamsRespUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// UniverseDefinitionTaskParamsRespUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	UniverseDefinitionTaskParamsRespUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// UniverseDefinitionTaskParamsRespUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	UniverseDefinitionTaskParamsRespUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	UniverseDefinitionTaskParamsRespUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	UniverseDefinitionTaskParamsRespUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	UniverseDefinitionTaskParamsRespUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// UniverseDefinitionTaskParamsRespUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	UniverseDefinitionTaskParamsRespUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	UniverseDefinitionTaskParamsRespUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	UniverseDefinitionTaskParamsRespUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// UniverseDefinitionTaskParamsRespUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	UniverseDefinitionTaskParamsRespUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// UniverseDefinitionTaskParamsRespUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	UniverseDefinitionTaskParamsRespUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// UniverseDefinitionTaskParamsRespUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	UniverseDefinitionTaskParamsRespUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	UniverseDefinitionTaskParamsRespUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCheckMasters captures enum value "CheckMasters"
	UniverseDefinitionTaskParamsRespUpdatingTaskCheckMasters string = "CheckMasters"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCheckTServers captures enum value "CheckTServers"
	UniverseDefinitionTaskParamsRespUpdatingTaskCheckTServers string = "CheckTServers"

	// UniverseDefinitionTaskParamsRespUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	UniverseDefinitionTaskParamsRespUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// UniverseDefinitionTaskParamsRespUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	UniverseDefinitionTaskParamsRespUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// UniverseDefinitionTaskParamsRespUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskResizeNode captures enum value "ResizeNode"
	UniverseDefinitionTaskParamsRespUpdatingTaskResizeNode string = "ResizeNode"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCheckMemory captures enum value "CheckMemory"
	UniverseDefinitionTaskParamsRespUpdatingTaskCheckMemory string = "CheckMemory"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// UniverseDefinitionTaskParamsRespUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	UniverseDefinitionTaskParamsRespUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// UniverseDefinitionTaskParamsRespUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	UniverseDefinitionTaskParamsRespUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// UniverseDefinitionTaskParamsRespUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	UniverseDefinitionTaskParamsRespUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// UniverseDefinitionTaskParamsRespUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	UniverseDefinitionTaskParamsRespUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"

	// UniverseDefinitionTaskParamsRespUpdatingTaskUpdateUniverseTags captures enum value "UpdateUniverseTags"
	UniverseDefinitionTaskParamsRespUpdatingTaskUpdateUniverseTags string = "UpdateUniverseTags"
)

// prop value enum
func (m *UniverseDefinitionTaskParamsResp) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeDefinitionTaskParamsRespTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this universe definition task params resp based on the context it is used
func (m *UniverseDefinitionTaskParamsResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniverseDefinitionTaskParamsResp) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "nodeDetailsSet", "body", []*NodeDetailsResp(m.NodeDetailsSet)); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParamsResp) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniverseDefinitionTaskParamsResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniverseDefinitionTaskParamsResp) UnmarshalBinary(b []byte) error {
	var res UniverseDefinitionTaskParamsResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
