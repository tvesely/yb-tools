// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// XClusterConfigCreateFormData xcluster create form
//
// swagger:model XClusterConfigCreateFormData
type XClusterConfigCreateFormData struct {

	// Name
	// Example: Repl-config1
	// Required: true
	Name *string `json:"name"`

	// Source Universe UUID
	// Required: true
	// Format: uuid
	SourceUniverseUUID *strfmt.UUID `json:"sourceUniverseUUID"`

	// Source Universe table IDs
	// Example: [000033df000030008000000000004006, 000033df00003000800000000000400b]
	// Required: true
	// Unique: true
	Tables []string `json:"tables"`

	// Target Universe UUID
	// Required: true
	// Format: uuid
	TargetUniverseUUID *strfmt.UUID `json:"targetUniverseUUID"`
}

// Validate validates this x cluster config create form data
func (m *XClusterConfigCreateFormData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *XClusterConfigCreateFormData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigCreateFormData) validateSourceUniverseUUID(formats strfmt.Registry) error {

	if err := validate.Required("sourceUniverseUUID", "body", m.SourceUniverseUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("sourceUniverseUUID", "body", "uuid", m.SourceUniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigCreateFormData) validateTables(formats strfmt.Registry) error {

	if err := validate.Required("tables", "body", m.Tables); err != nil {
		return err
	}

	if err := validate.UniqueItems("tables", "body", m.Tables); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigCreateFormData) validateTargetUniverseUUID(formats strfmt.Registry) error {

	if err := validate.Required("targetUniverseUUID", "body", m.TargetUniverseUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("targetUniverseUUID", "body", "uuid", m.TargetUniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this x cluster config create form data based on context it is used
func (m *XClusterConfigCreateFormData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *XClusterConfigCreateFormData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *XClusterConfigCreateFormData) UnmarshalBinary(b []byte) error {
	var res XClusterConfigCreateFormData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
