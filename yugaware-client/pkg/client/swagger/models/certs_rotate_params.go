// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertsRotateParams certs rotate params
//
// swagger:model CertsRotateParams
type CertsRotateParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Required: true
	// Format: uuid
	ClientRootCA *strfmt.UUID `json:"clientRootCA"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	// Required: true
	RootAndClientRootCASame *bool `json:"rootAndClientRootCASame"`

	// root c a
	// Required: true
	// Format: uuid
	RootCA *strfmt.UUID `json:"rootCA"`

	// self signed client cert rotate
	// Required: true
	SelfSignedClientCertRotate *bool `json:"selfSignedClientCertRotate"`

	// self signed server cert rotate
	// Required: true
	SelfSignedServerCertRotate *bool `json:"selfSignedServerCertRotate"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload UpdateUniverseTags]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this certs rotate params
func (m *CertsRotateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootAndClientRootCASame(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfSignedClientCertRotate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfSignedServerCertRotate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var certsRotateParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certsRotateParamsTypeCapabilityPropEnum = append(certsRotateParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// CertsRotateParamsCapabilityREADONLY captures enum value "READ_ONLY"
	CertsRotateParamsCapabilityREADONLY string = "READ_ONLY"

	// CertsRotateParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	CertsRotateParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *CertsRotateParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certsRotateParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertsRotateParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateClientRootCA(formats strfmt.Registry) error {

	if err := validate.Required("clientRootCA", "body", m.ClientRootCA); err != nil {
		return err
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertsRotateParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var certsRotateParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certsRotateParamsTypeCurrentClusterTypePropEnum = append(certsRotateParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// CertsRotateParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	CertsRotateParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// CertsRotateParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	CertsRotateParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *CertsRotateParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certsRotateParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertsRotateParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CertsRotateParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CertsRotateParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var certsRotateParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certsRotateParamsTypeImportedStatePropEnum = append(certsRotateParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// CertsRotateParamsImportedStateNONE captures enum value "NONE"
	CertsRotateParamsImportedStateNONE string = "NONE"

	// CertsRotateParamsImportedStateSTARTED captures enum value "STARTED"
	CertsRotateParamsImportedStateSTARTED string = "STARTED"

	// CertsRotateParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	CertsRotateParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// CertsRotateParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	CertsRotateParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// CertsRotateParamsImportedStateIMPORTED captures enum value "IMPORTED"
	CertsRotateParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *CertsRotateParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certsRotateParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertsRotateParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertsRotateParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateRootAndClientRootCASame(formats strfmt.Registry) error {

	if err := validate.Required("rootAndClientRootCASame", "body", m.RootAndClientRootCASame); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateRootCA(formats strfmt.Registry) error {

	if err := validate.Required("rootCA", "body", m.RootCA); err != nil {
		return err
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateSelfSignedClientCertRotate(formats strfmt.Registry) error {

	if err := validate.Required("selfSignedClientCertRotate", "body", m.SelfSignedClientCertRotate); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateSelfSignedServerCertRotate(formats strfmt.Registry) error {

	if err := validate.Required("selfSignedServerCertRotate", "body", m.SelfSignedServerCertRotate); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *CertsRotateParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *CertsRotateParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var certsRotateParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload","UpdateUniverseTags"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certsRotateParamsTypeUpdatingTaskPropEnum = append(certsRotateParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// CertsRotateParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	CertsRotateParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// CertsRotateParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	CertsRotateParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// CertsRotateParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	CertsRotateParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// CertsRotateParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	CertsRotateParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// CertsRotateParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	CertsRotateParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// CertsRotateParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	CertsRotateParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// CertsRotateParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	CertsRotateParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// CertsRotateParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	CertsRotateParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// CertsRotateParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	CertsRotateParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// CertsRotateParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	CertsRotateParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// CertsRotateParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	CertsRotateParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// CertsRotateParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	CertsRotateParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// CertsRotateParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	CertsRotateParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// CertsRotateParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	CertsRotateParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// CertsRotateParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	CertsRotateParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// CertsRotateParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	CertsRotateParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// CertsRotateParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	CertsRotateParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// CertsRotateParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	CertsRotateParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// CertsRotateParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	CertsRotateParamsUpdatingTaskExternalScript string = "ExternalScript"

	// CertsRotateParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	CertsRotateParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// CertsRotateParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	CertsRotateParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// CertsRotateParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	CertsRotateParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// CertsRotateParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	CertsRotateParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// CertsRotateParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	CertsRotateParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// CertsRotateParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	CertsRotateParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// CertsRotateParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	CertsRotateParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// CertsRotateParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	CertsRotateParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// CertsRotateParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	CertsRotateParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// CertsRotateParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	CertsRotateParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// CertsRotateParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	CertsRotateParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// CertsRotateParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	CertsRotateParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// CertsRotateParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	CertsRotateParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// CertsRotateParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	CertsRotateParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// CertsRotateParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	CertsRotateParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// CertsRotateParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	CertsRotateParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// CertsRotateParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	CertsRotateParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// CertsRotateParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	CertsRotateParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// CertsRotateParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	CertsRotateParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// CertsRotateParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	CertsRotateParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// CertsRotateParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	CertsRotateParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// CertsRotateParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	CertsRotateParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// CertsRotateParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	CertsRotateParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// CertsRotateParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	CertsRotateParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// CertsRotateParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	CertsRotateParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// CertsRotateParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	CertsRotateParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// CertsRotateParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	CertsRotateParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// CertsRotateParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	CertsRotateParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// CertsRotateParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	CertsRotateParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// CertsRotateParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	CertsRotateParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// CertsRotateParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	CertsRotateParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// CertsRotateParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	CertsRotateParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// CertsRotateParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	CertsRotateParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// CertsRotateParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	CertsRotateParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// CertsRotateParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	CertsRotateParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// CertsRotateParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	CertsRotateParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// CertsRotateParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	CertsRotateParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// CertsRotateParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	CertsRotateParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// CertsRotateParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	CertsRotateParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// CertsRotateParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	CertsRotateParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// CertsRotateParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	CertsRotateParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// CertsRotateParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	CertsRotateParamsUpdatingTaskPauseServer string = "PauseServer"

	// CertsRotateParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	CertsRotateParamsUpdatingTaskResumeServer string = "ResumeServer"

	// CertsRotateParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	CertsRotateParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// CertsRotateParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	CertsRotateParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// CertsRotateParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	CertsRotateParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// CertsRotateParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	CertsRotateParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// CertsRotateParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	CertsRotateParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// CertsRotateParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	CertsRotateParamsUpdatingTaskBulkImport string = "BulkImport"

	// CertsRotateParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	CertsRotateParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// CertsRotateParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	CertsRotateParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// CertsRotateParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	CertsRotateParamsUpdatingTaskCreateTable string = "CreateTable"

	// CertsRotateParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	CertsRotateParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// CertsRotateParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	CertsRotateParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// CertsRotateParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	CertsRotateParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// CertsRotateParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	CertsRotateParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// CertsRotateParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	CertsRotateParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// CertsRotateParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	CertsRotateParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// CertsRotateParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	CertsRotateParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// CertsRotateParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	CertsRotateParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// CertsRotateParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	CertsRotateParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// CertsRotateParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	CertsRotateParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// CertsRotateParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	CertsRotateParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// CertsRotateParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	CertsRotateParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// CertsRotateParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	CertsRotateParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// CertsRotateParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	CertsRotateParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// CertsRotateParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	CertsRotateParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// CertsRotateParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	CertsRotateParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// CertsRotateParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	CertsRotateParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// CertsRotateParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	CertsRotateParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// CertsRotateParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	CertsRotateParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// CertsRotateParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	CertsRotateParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// CertsRotateParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	CertsRotateParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// CertsRotateParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	CertsRotateParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// CertsRotateParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	CertsRotateParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// CertsRotateParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	CertsRotateParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// CertsRotateParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	CertsRotateParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// CertsRotateParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	CertsRotateParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// CertsRotateParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	CertsRotateParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// CertsRotateParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	CertsRotateParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// CertsRotateParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	CertsRotateParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// CertsRotateParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	CertsRotateParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// CertsRotateParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	CertsRotateParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// CertsRotateParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	CertsRotateParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// CertsRotateParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	CertsRotateParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// CertsRotateParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	CertsRotateParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// CertsRotateParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	CertsRotateParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// CertsRotateParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	CertsRotateParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// CertsRotateParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	CertsRotateParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// CertsRotateParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	CertsRotateParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// CertsRotateParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	CertsRotateParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// CertsRotateParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	CertsRotateParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// CertsRotateParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	CertsRotateParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// CertsRotateParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	CertsRotateParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// CertsRotateParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	CertsRotateParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// CertsRotateParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	CertsRotateParamsUpdatingTaskBackupTable string = "BackupTable"

	// CertsRotateParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	CertsRotateParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// CertsRotateParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	CertsRotateParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// CertsRotateParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	CertsRotateParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// CertsRotateParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	CertsRotateParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// CertsRotateParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	CertsRotateParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// CertsRotateParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	CertsRotateParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// CertsRotateParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	CertsRotateParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// CertsRotateParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	CertsRotateParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// CertsRotateParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	CertsRotateParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// CertsRotateParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	CertsRotateParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// CertsRotateParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	CertsRotateParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// CertsRotateParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	CertsRotateParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// CertsRotateParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	CertsRotateParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// CertsRotateParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	CertsRotateParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// CertsRotateParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	CertsRotateParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// CertsRotateParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	CertsRotateParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// CertsRotateParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	CertsRotateParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// CertsRotateParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	CertsRotateParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// CertsRotateParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	CertsRotateParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// CertsRotateParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	CertsRotateParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// CertsRotateParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	CertsRotateParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// CertsRotateParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	CertsRotateParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// CertsRotateParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	CertsRotateParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// CertsRotateParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	CertsRotateParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// CertsRotateParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	CertsRotateParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// CertsRotateParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	CertsRotateParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// CertsRotateParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	CertsRotateParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// CertsRotateParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	CertsRotateParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// CertsRotateParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	CertsRotateParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// CertsRotateParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	CertsRotateParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// CertsRotateParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	CertsRotateParamsUpdatingTaskResizeNode string = "ResizeNode"

	// CertsRotateParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	CertsRotateParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// CertsRotateParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	CertsRotateParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// CertsRotateParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	CertsRotateParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// CertsRotateParamsUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	CertsRotateParamsUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// CertsRotateParamsUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	CertsRotateParamsUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// CertsRotateParamsUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	CertsRotateParamsUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// CertsRotateParamsUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	CertsRotateParamsUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"

	// CertsRotateParamsUpdatingTaskUpdateUniverseTags captures enum value "UpdateUniverseTags"
	CertsRotateParamsUpdatingTaskUpdateUniverseTags string = "UpdateUniverseTags"
)

// prop value enum
func (m *CertsRotateParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certsRotateParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertsRotateParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var certsRotateParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		certsRotateParamsTypeUpgradeOptionPropEnum = append(certsRotateParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// CertsRotateParamsUpgradeOptionRolling captures enum value "Rolling"
	CertsRotateParamsUpgradeOptionRolling string = "Rolling"

	// CertsRotateParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	CertsRotateParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// CertsRotateParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	CertsRotateParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *CertsRotateParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, certsRotateParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CertsRotateParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this certs rotate params based on the context it is used
func (m *CertsRotateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertsRotateParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertsRotateParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *CertsRotateParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *CertsRotateParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CertsRotateParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *CertsRotateParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertsRotateParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *CertsRotateParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertsRotateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertsRotateParams) UnmarshalBinary(b []byte) error {
	var res CertsRotateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
