// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvailabilityZone Availability zone (AZ) for a region
//
// swagger:model AvailabilityZone
type AvailabilityZone struct {

	// AZ status. This value is `true` for an active AZ.
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// AZ code
	// Example: us-west1-a
	Code string `json:"code,omitempty"`

	// AZ configuration values
	Config map[string]string `json:"config,omitempty"`

	// Path to Kubernetes configuration file
	// Read Only: true
	KubeconfigPath string `json:"kubeconfigPath,omitempty"`

	// AZ name
	// Example: us-west1-a
	// Required: true
	Name *string `json:"name"`

	// AZ secondary subnet
	// Example: secondary subnet id
	SecondarySubnet string `json:"secondarySubnet,omitempty"`

	// AZ subnet
	// Example: subnet id
	Subnet string `json:"subnet,omitempty"`

	// AZ UUID
	// Read Only: true
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`
}

// Validate validates this availability zone
func (m *AvailabilityZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailabilityZone) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AvailabilityZone) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this availability zone based on the context it is used
func (m *AvailabilityZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubeconfigPath(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailabilityZone) contextValidateActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *AvailabilityZone) contextValidateKubeconfigPath(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "kubeconfigPath", "body", string(m.KubeconfigPath)); err != nil {
		return err
	}

	return nil
}

func (m *AvailabilityZone) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", strfmt.UUID(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailabilityZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailabilityZone) UnmarshalBinary(b []byte) error {
	var res AvailabilityZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
