// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// XClusterConfigGetResp xcluster get response
//
// swagger:model XClusterConfigGetResp
type XClusterConfigGetResp struct {

	// Create time
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// Lag metric data
	// Required: true
	Lag interface{} `json:"lag"`

	// Modify time
	// Format: date-time
	ModifyTime strfmt.DateTime `json:"modifyTime,omitempty"`

	// Name
	Name string `json:"name,omitempty"`

	// Source Universe UUID
	// Format: uuid
	SourceUniverseUUID strfmt.UUID `json:"sourceUniverseUUID,omitempty"`

	// Status
	// Enum: [Init Running Updating Paused Failed]
	Status string `json:"status,omitempty"`

	// Source Universe table IDs
	// Unique: true
	Tables []string `json:"tables"`

	// Target Universe UUID
	// Format: uuid
	TargetUniverseUUID strfmt.UUID `json:"targetUniverseUUID,omitempty"`

	// UUID
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`

	// xcluster config
	// Required: true
	XclusterConfig *XClusterConfig `json:"xclusterConfig"`
}

// Validate validates this x cluster config get resp
func (m *XClusterConfigGetResp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifyTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXclusterConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *XClusterConfigGetResp) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigGetResp) validateLag(formats strfmt.Registry) error {

	if m.Lag == nil {
		return errors.Required("lag", "body", nil)
	}

	return nil
}

func (m *XClusterConfigGetResp) validateModifyTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifyTime) { // not required
		return nil
	}

	if err := validate.FormatOf("modifyTime", "body", "date-time", m.ModifyTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigGetResp) validateSourceUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceUniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("sourceUniverseUUID", "body", "uuid", m.SourceUniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var xClusterConfigGetRespTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Init","Running","Updating","Paused","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		xClusterConfigGetRespTypeStatusPropEnum = append(xClusterConfigGetRespTypeStatusPropEnum, v)
	}
}

const (

	// XClusterConfigGetRespStatusInit captures enum value "Init"
	XClusterConfigGetRespStatusInit string = "Init"

	// XClusterConfigGetRespStatusRunning captures enum value "Running"
	XClusterConfigGetRespStatusRunning string = "Running"

	// XClusterConfigGetRespStatusUpdating captures enum value "Updating"
	XClusterConfigGetRespStatusUpdating string = "Updating"

	// XClusterConfigGetRespStatusPaused captures enum value "Paused"
	XClusterConfigGetRespStatusPaused string = "Paused"

	// XClusterConfigGetRespStatusFailed captures enum value "Failed"
	XClusterConfigGetRespStatusFailed string = "Failed"
)

// prop value enum
func (m *XClusterConfigGetResp) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, xClusterConfigGetRespTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *XClusterConfigGetResp) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigGetResp) validateTables(formats strfmt.Registry) error {
	if swag.IsZero(m.Tables) { // not required
		return nil
	}

	if err := validate.UniqueItems("tables", "body", m.Tables); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigGetResp) validateTargetUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetUniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("targetUniverseUUID", "body", "uuid", m.TargetUniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigGetResp) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *XClusterConfigGetResp) validateXclusterConfig(formats strfmt.Registry) error {

	if err := validate.Required("xclusterConfig", "body", m.XclusterConfig); err != nil {
		return err
	}

	if m.XclusterConfig != nil {
		if err := m.XclusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("xclusterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("xclusterConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this x cluster config get resp based on the context it is used
func (m *XClusterConfigGetResp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateXclusterConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *XClusterConfigGetResp) contextValidateXclusterConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.XclusterConfig != nil {
		if err := m.XclusterConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("xclusterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("xclusterConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *XClusterConfigGetResp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *XClusterConfigGetResp) UnmarshalBinary(b []byte) error {
	var res XClusterConfigGetResp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
