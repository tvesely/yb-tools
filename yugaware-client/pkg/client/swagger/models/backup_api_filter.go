// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupAPIFilter backup Api filter
//
// swagger:model BackupApiFilter
type BackupAPIFilter struct {

	// date range end
	// Required: true
	// Format: date-time
	DateRangeEnd *strfmt.DateTime `json:"dateRangeEnd"`

	// date range start
	// Required: true
	// Format: date-time
	DateRangeStart *strfmt.DateTime `json:"dateRangeStart"`

	// keyspace list
	// Required: true
	// Unique: true
	KeyspaceList []string `json:"keyspaceList"`

	// only show deleted configs
	// Required: true
	OnlyShowDeletedConfigs *bool `json:"onlyShowDeletedConfigs"`

	// only show deleted universes
	// Required: true
	OnlyShowDeletedUniverses *bool `json:"onlyShowDeletedUniverses"`

	// schedule UUID list
	// Required: true
	// Unique: true
	ScheduleUUIDList []strfmt.UUID `json:"scheduleUUIDList"`

	// states
	// Required: true
	// Unique: true
	States []string `json:"states"`

	// storage config UUID list
	// Required: true
	// Unique: true
	StorageConfigUUIDList []strfmt.UUID `json:"storageConfigUUIDList"`

	// universe name list
	// Required: true
	// Unique: true
	UniverseNameList []string `json:"universeNameList"`

	// universe UUID list
	// Required: true
	// Unique: true
	UniverseUUIDList []strfmt.UUID `json:"universeUUIDList"`
}

// Validate validates this backup Api filter
func (m *BackupAPIFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateRangeEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateRangeStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyspaceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnlyShowDeletedConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnlyShowDeletedUniverses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleUUIDList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageConfigUUIDList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseNameList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUIDList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupAPIFilter) validateDateRangeEnd(formats strfmt.Registry) error {

	if err := validate.Required("dateRangeEnd", "body", m.DateRangeEnd); err != nil {
		return err
	}

	if err := validate.FormatOf("dateRangeEnd", "body", "date-time", m.DateRangeEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupAPIFilter) validateDateRangeStart(formats strfmt.Registry) error {

	if err := validate.Required("dateRangeStart", "body", m.DateRangeStart); err != nil {
		return err
	}

	if err := validate.FormatOf("dateRangeStart", "body", "date-time", m.DateRangeStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupAPIFilter) validateKeyspaceList(formats strfmt.Registry) error {

	if err := validate.Required("keyspaceList", "body", m.KeyspaceList); err != nil {
		return err
	}

	if err := validate.UniqueItems("keyspaceList", "body", m.KeyspaceList); err != nil {
		return err
	}

	return nil
}

func (m *BackupAPIFilter) validateOnlyShowDeletedConfigs(formats strfmt.Registry) error {

	if err := validate.Required("onlyShowDeletedConfigs", "body", m.OnlyShowDeletedConfigs); err != nil {
		return err
	}

	return nil
}

func (m *BackupAPIFilter) validateOnlyShowDeletedUniverses(formats strfmt.Registry) error {

	if err := validate.Required("onlyShowDeletedUniverses", "body", m.OnlyShowDeletedUniverses); err != nil {
		return err
	}

	return nil
}

func (m *BackupAPIFilter) validateScheduleUUIDList(formats strfmt.Registry) error {

	if err := validate.Required("scheduleUUIDList", "body", m.ScheduleUUIDList); err != nil {
		return err
	}

	if err := validate.UniqueItems("scheduleUUIDList", "body", m.ScheduleUUIDList); err != nil {
		return err
	}

	for i := 0; i < len(m.ScheduleUUIDList); i++ {

		if err := validate.FormatOf("scheduleUUIDList"+"."+strconv.Itoa(i), "body", "uuid", m.ScheduleUUIDList[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var backupApiFilterStatesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InProgress","Completed","Failed","Deleted","Skipped","FailedToDelete","Stopped","DeleteInProgress","QueuedForDeletion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupApiFilterStatesItemsEnum = append(backupApiFilterStatesItemsEnum, v)
	}
}

func (m *BackupAPIFilter) validateStatesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, backupApiFilterStatesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BackupAPIFilter) validateStates(formats strfmt.Registry) error {

	if err := validate.Required("states", "body", m.States); err != nil {
		return err
	}

	if err := validate.UniqueItems("states", "body", m.States); err != nil {
		return err
	}

	for i := 0; i < len(m.States); i++ {

		// value enum
		if err := m.validateStatesItemsEnum("states"+"."+strconv.Itoa(i), "body", m.States[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *BackupAPIFilter) validateStorageConfigUUIDList(formats strfmt.Registry) error {

	if err := validate.Required("storageConfigUUIDList", "body", m.StorageConfigUUIDList); err != nil {
		return err
	}

	if err := validate.UniqueItems("storageConfigUUIDList", "body", m.StorageConfigUUIDList); err != nil {
		return err
	}

	for i := 0; i < len(m.StorageConfigUUIDList); i++ {

		if err := validate.FormatOf("storageConfigUUIDList"+"."+strconv.Itoa(i), "body", "uuid", m.StorageConfigUUIDList[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *BackupAPIFilter) validateUniverseNameList(formats strfmt.Registry) error {

	if err := validate.Required("universeNameList", "body", m.UniverseNameList); err != nil {
		return err
	}

	if err := validate.UniqueItems("universeNameList", "body", m.UniverseNameList); err != nil {
		return err
	}

	return nil
}

func (m *BackupAPIFilter) validateUniverseUUIDList(formats strfmt.Registry) error {

	if err := validate.Required("universeUUIDList", "body", m.UniverseUUIDList); err != nil {
		return err
	}

	if err := validate.UniqueItems("universeUUIDList", "body", m.UniverseUUIDList); err != nil {
		return err
	}

	for i := 0; i < len(m.UniverseUUIDList); i++ {

		if err := validate.FormatOf("universeUUIDList"+"."+strconv.Itoa(i), "body", "uuid", m.UniverseUUIDList[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this backup Api filter based on context it is used
func (m *BackupAPIFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackupAPIFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupAPIFilter) UnmarshalBinary(b []byte) error {
	var res BackupAPIFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
