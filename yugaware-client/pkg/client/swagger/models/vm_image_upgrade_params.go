// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMImageUpgradeParams VM image upgrade params
//
// swagger:model VMImageUpgradeParams
type VMImageUpgradeParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// force VM image upgrade
	// Required: true
	ForceVMImageUpgrade *bool `json:"forceVMImageUpgrade"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// machine images
	// Required: true
	MachineImages map[string]string `json:"machineImages"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig XClusterConfigUpdateMasterAddresses CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`

	// yb software version
	// Required: true
	YbSoftwareVersion *string `json:"ybSoftwareVersion"`
}

// Validate validates this VM image upgrade params
func (m *VMImageUpgradeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceVMImageUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYbSoftwareVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmImageUpgradeParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmImageUpgradeParamsTypeCapabilityPropEnum = append(vmImageUpgradeParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// VMImageUpgradeParamsCapabilityREADONLY captures enum value "READ_ONLY"
	VMImageUpgradeParamsCapabilityREADONLY string = "READ_ONLY"

	// VMImageUpgradeParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	VMImageUpgradeParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *VMImageUpgradeParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmImageUpgradeParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VMImageUpgradeParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMImageUpgradeParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var vmImageUpgradeParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmImageUpgradeParamsTypeCurrentClusterTypePropEnum = append(vmImageUpgradeParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// VMImageUpgradeParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	VMImageUpgradeParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// VMImageUpgradeParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	VMImageUpgradeParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *VMImageUpgradeParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmImageUpgradeParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VMImageUpgradeParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VMImageUpgradeParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VMImageUpgradeParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *VMImageUpgradeParams) validateForceVMImageUpgrade(formats strfmt.Registry) error {

	if err := validate.Required("forceVMImageUpgrade", "body", m.ForceVMImageUpgrade); err != nil {
		return err
	}

	return nil
}

var vmImageUpgradeParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmImageUpgradeParamsTypeImportedStatePropEnum = append(vmImageUpgradeParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// VMImageUpgradeParamsImportedStateNONE captures enum value "NONE"
	VMImageUpgradeParamsImportedStateNONE string = "NONE"

	// VMImageUpgradeParamsImportedStateSTARTED captures enum value "STARTED"
	VMImageUpgradeParamsImportedStateSTARTED string = "STARTED"

	// VMImageUpgradeParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	VMImageUpgradeParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// VMImageUpgradeParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	VMImageUpgradeParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// VMImageUpgradeParamsImportedStateIMPORTED captures enum value "IMPORTED"
	VMImageUpgradeParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *VMImageUpgradeParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmImageUpgradeParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VMImageUpgradeParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateMachineImages(formats strfmt.Registry) error {

	if err := validate.Required("machineImages", "body", m.MachineImages); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMImageUpgradeParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *VMImageUpgradeParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *VMImageUpgradeParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var vmImageUpgradeParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","XClusterConfigUpdateMasterAddresses","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmImageUpgradeParamsTypeUpdatingTaskPropEnum = append(vmImageUpgradeParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// VMImageUpgradeParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	VMImageUpgradeParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// VMImageUpgradeParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	VMImageUpgradeParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// VMImageUpgradeParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	VMImageUpgradeParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// VMImageUpgradeParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	VMImageUpgradeParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// VMImageUpgradeParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	VMImageUpgradeParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// VMImageUpgradeParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	VMImageUpgradeParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// VMImageUpgradeParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	VMImageUpgradeParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// VMImageUpgradeParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	VMImageUpgradeParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// VMImageUpgradeParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	VMImageUpgradeParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// VMImageUpgradeParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	VMImageUpgradeParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// VMImageUpgradeParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	VMImageUpgradeParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// VMImageUpgradeParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	VMImageUpgradeParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// VMImageUpgradeParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	VMImageUpgradeParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// VMImageUpgradeParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	VMImageUpgradeParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// VMImageUpgradeParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	VMImageUpgradeParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// VMImageUpgradeParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	VMImageUpgradeParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// VMImageUpgradeParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	VMImageUpgradeParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// VMImageUpgradeParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	VMImageUpgradeParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// VMImageUpgradeParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	VMImageUpgradeParamsUpdatingTaskExternalScript string = "ExternalScript"

	// VMImageUpgradeParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	VMImageUpgradeParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// VMImageUpgradeParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	VMImageUpgradeParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// VMImageUpgradeParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	VMImageUpgradeParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// VMImageUpgradeParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	VMImageUpgradeParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// VMImageUpgradeParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	VMImageUpgradeParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// VMImageUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	VMImageUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// VMImageUpgradeParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	VMImageUpgradeParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// VMImageUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	VMImageUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// VMImageUpgradeParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	VMImageUpgradeParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// VMImageUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	VMImageUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// VMImageUpgradeParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	VMImageUpgradeParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// VMImageUpgradeParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	VMImageUpgradeParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// VMImageUpgradeParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	VMImageUpgradeParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// VMImageUpgradeParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	VMImageUpgradeParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// VMImageUpgradeParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	VMImageUpgradeParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// VMImageUpgradeParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	VMImageUpgradeParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// VMImageUpgradeParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	VMImageUpgradeParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// VMImageUpgradeParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	VMImageUpgradeParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// VMImageUpgradeParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	VMImageUpgradeParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// VMImageUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	VMImageUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// VMImageUpgradeParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	VMImageUpgradeParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// VMImageUpgradeParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	VMImageUpgradeParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// VMImageUpgradeParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	VMImageUpgradeParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// VMImageUpgradeParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	VMImageUpgradeParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// VMImageUpgradeParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	VMImageUpgradeParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// VMImageUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	VMImageUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// VMImageUpgradeParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	VMImageUpgradeParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// VMImageUpgradeParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	VMImageUpgradeParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// VMImageUpgradeParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	VMImageUpgradeParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// VMImageUpgradeParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	VMImageUpgradeParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// VMImageUpgradeParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	VMImageUpgradeParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// VMImageUpgradeParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	VMImageUpgradeParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// VMImageUpgradeParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	VMImageUpgradeParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// VMImageUpgradeParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	VMImageUpgradeParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// VMImageUpgradeParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	VMImageUpgradeParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// VMImageUpgradeParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	VMImageUpgradeParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// VMImageUpgradeParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	VMImageUpgradeParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// VMImageUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	VMImageUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// VMImageUpgradeParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	VMImageUpgradeParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// VMImageUpgradeParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	VMImageUpgradeParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// VMImageUpgradeParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	VMImageUpgradeParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// VMImageUpgradeParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	VMImageUpgradeParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// VMImageUpgradeParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	VMImageUpgradeParamsUpdatingTaskPauseServer string = "PauseServer"

	// VMImageUpgradeParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	VMImageUpgradeParamsUpdatingTaskResumeServer string = "ResumeServer"

	// VMImageUpgradeParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	VMImageUpgradeParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// VMImageUpgradeParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	VMImageUpgradeParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// VMImageUpgradeParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	VMImageUpgradeParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// VMImageUpgradeParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	VMImageUpgradeParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// VMImageUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	VMImageUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// VMImageUpgradeParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	VMImageUpgradeParamsUpdatingTaskBulkImport string = "BulkImport"

	// VMImageUpgradeParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	VMImageUpgradeParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// VMImageUpgradeParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	VMImageUpgradeParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// VMImageUpgradeParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	VMImageUpgradeParamsUpdatingTaskCreateTable string = "CreateTable"

	// VMImageUpgradeParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	VMImageUpgradeParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// VMImageUpgradeParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	VMImageUpgradeParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// VMImageUpgradeParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	VMImageUpgradeParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// VMImageUpgradeParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	VMImageUpgradeParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// VMImageUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	VMImageUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// VMImageUpgradeParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	VMImageUpgradeParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// VMImageUpgradeParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	VMImageUpgradeParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// VMImageUpgradeParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	VMImageUpgradeParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// VMImageUpgradeParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	VMImageUpgradeParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// VMImageUpgradeParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	VMImageUpgradeParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// VMImageUpgradeParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	VMImageUpgradeParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// VMImageUpgradeParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	VMImageUpgradeParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// VMImageUpgradeParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	VMImageUpgradeParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// VMImageUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	VMImageUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// VMImageUpgradeParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	VMImageUpgradeParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// VMImageUpgradeParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	VMImageUpgradeParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// VMImageUpgradeParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	VMImageUpgradeParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// VMImageUpgradeParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	VMImageUpgradeParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// VMImageUpgradeParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	VMImageUpgradeParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// VMImageUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	VMImageUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// VMImageUpgradeParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	VMImageUpgradeParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// VMImageUpgradeParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	VMImageUpgradeParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// VMImageUpgradeParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	VMImageUpgradeParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// VMImageUpgradeParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	VMImageUpgradeParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// VMImageUpgradeParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	VMImageUpgradeParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// VMImageUpgradeParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	VMImageUpgradeParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// VMImageUpgradeParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	VMImageUpgradeParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// VMImageUpgradeParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	VMImageUpgradeParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// VMImageUpgradeParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	VMImageUpgradeParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// VMImageUpgradeParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	VMImageUpgradeParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// VMImageUpgradeParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	VMImageUpgradeParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// VMImageUpgradeParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	VMImageUpgradeParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// VMImageUpgradeParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	VMImageUpgradeParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// VMImageUpgradeParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	VMImageUpgradeParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// VMImageUpgradeParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	VMImageUpgradeParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// VMImageUpgradeParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	VMImageUpgradeParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// VMImageUpgradeParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	VMImageUpgradeParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// VMImageUpgradeParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	VMImageUpgradeParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// VMImageUpgradeParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	VMImageUpgradeParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// VMImageUpgradeParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	VMImageUpgradeParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// VMImageUpgradeParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	VMImageUpgradeParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// VMImageUpgradeParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	VMImageUpgradeParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// VMImageUpgradeParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	VMImageUpgradeParamsUpdatingTaskBackupTable string = "BackupTable"

	// VMImageUpgradeParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	VMImageUpgradeParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// VMImageUpgradeParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	VMImageUpgradeParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// VMImageUpgradeParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	VMImageUpgradeParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// VMImageUpgradeParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	VMImageUpgradeParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// VMImageUpgradeParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	VMImageUpgradeParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// VMImageUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	VMImageUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// VMImageUpgradeParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	VMImageUpgradeParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// VMImageUpgradeParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	VMImageUpgradeParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// VMImageUpgradeParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	VMImageUpgradeParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// VMImageUpgradeParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	VMImageUpgradeParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// VMImageUpgradeParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	VMImageUpgradeParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// VMImageUpgradeParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	VMImageUpgradeParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// VMImageUpgradeParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	VMImageUpgradeParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// VMImageUpgradeParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	VMImageUpgradeParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// VMImageUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	VMImageUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// VMImageUpgradeParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	VMImageUpgradeParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// VMImageUpgradeParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	VMImageUpgradeParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// VMImageUpgradeParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	VMImageUpgradeParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// VMImageUpgradeParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	VMImageUpgradeParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// VMImageUpgradeParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	VMImageUpgradeParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// VMImageUpgradeParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	VMImageUpgradeParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// VMImageUpgradeParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	VMImageUpgradeParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// VMImageUpgradeParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	VMImageUpgradeParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// VMImageUpgradeParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	VMImageUpgradeParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// VMImageUpgradeParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	VMImageUpgradeParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// VMImageUpgradeParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	VMImageUpgradeParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// VMImageUpgradeParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	VMImageUpgradeParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// VMImageUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	VMImageUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// VMImageUpgradeParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	VMImageUpgradeParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// VMImageUpgradeParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	VMImageUpgradeParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// VMImageUpgradeParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	VMImageUpgradeParamsUpdatingTaskResizeNode string = "ResizeNode"

	// VMImageUpgradeParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	VMImageUpgradeParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// VMImageUpgradeParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	VMImageUpgradeParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// VMImageUpgradeParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	VMImageUpgradeParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"
)

// prop value enum
func (m *VMImageUpgradeParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmImageUpgradeParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VMImageUpgradeParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var vmImageUpgradeParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmImageUpgradeParamsTypeUpgradeOptionPropEnum = append(vmImageUpgradeParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// VMImageUpgradeParamsUpgradeOptionRolling captures enum value "Rolling"
	VMImageUpgradeParamsUpgradeOptionRolling string = "Rolling"

	// VMImageUpgradeParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	VMImageUpgradeParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// VMImageUpgradeParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	VMImageUpgradeParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *VMImageUpgradeParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmImageUpgradeParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VMImageUpgradeParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) validateYbSoftwareVersion(formats strfmt.Registry) error {

	if err := validate.Required("ybSoftwareVersion", "body", m.YbSoftwareVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this VM image upgrade params based on the context it is used
func (m *VMImageUpgradeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMImageUpgradeParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMImageUpgradeParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *VMImageUpgradeParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *VMImageUpgradeParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *VMImageUpgradeParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *VMImageUpgradeParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMImageUpgradeParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *VMImageUpgradeParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMImageUpgradeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMImageUpgradeParams) UnmarshalBinary(b []byte) error {
	var res VMImageUpgradeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
