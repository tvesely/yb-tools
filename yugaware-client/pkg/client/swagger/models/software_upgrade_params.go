// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SoftwareUpgradeParams software upgrade params
//
// swagger:model SoftwareUpgradeParams
type SoftwareUpgradeParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig XClusterConfigUpdateMasterAddresses CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`

	// yb software version
	// Required: true
	YbSoftwareVersion *string `json:"ybSoftwareVersion"`
}

// Validate validates this software upgrade params
func (m *SoftwareUpgradeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYbSoftwareVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var softwareUpgradeParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareUpgradeParamsTypeCapabilityPropEnum = append(softwareUpgradeParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// SoftwareUpgradeParamsCapabilityREADONLY captures enum value "READ_ONLY"
	SoftwareUpgradeParamsCapabilityREADONLY string = "READ_ONLY"

	// SoftwareUpgradeParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	SoftwareUpgradeParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *SoftwareUpgradeParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, softwareUpgradeParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SoftwareUpgradeParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SoftwareUpgradeParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var softwareUpgradeParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareUpgradeParamsTypeCurrentClusterTypePropEnum = append(softwareUpgradeParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// SoftwareUpgradeParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	SoftwareUpgradeParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// SoftwareUpgradeParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	SoftwareUpgradeParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *SoftwareUpgradeParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, softwareUpgradeParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SoftwareUpgradeParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var softwareUpgradeParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareUpgradeParamsTypeImportedStatePropEnum = append(softwareUpgradeParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// SoftwareUpgradeParamsImportedStateNONE captures enum value "NONE"
	SoftwareUpgradeParamsImportedStateNONE string = "NONE"

	// SoftwareUpgradeParamsImportedStateSTARTED captures enum value "STARTED"
	SoftwareUpgradeParamsImportedStateSTARTED string = "STARTED"

	// SoftwareUpgradeParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	SoftwareUpgradeParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// SoftwareUpgradeParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	SoftwareUpgradeParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// SoftwareUpgradeParamsImportedStateIMPORTED captures enum value "IMPORTED"
	SoftwareUpgradeParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *SoftwareUpgradeParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, softwareUpgradeParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SoftwareUpgradeParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SoftwareUpgradeParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *SoftwareUpgradeParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *SoftwareUpgradeParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var softwareUpgradeParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","XClusterConfigUpdateMasterAddresses","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareUpgradeParamsTypeUpdatingTaskPropEnum = append(softwareUpgradeParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// SoftwareUpgradeParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	SoftwareUpgradeParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// SoftwareUpgradeParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	SoftwareUpgradeParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// SoftwareUpgradeParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	SoftwareUpgradeParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// SoftwareUpgradeParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	SoftwareUpgradeParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// SoftwareUpgradeParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	SoftwareUpgradeParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// SoftwareUpgradeParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	SoftwareUpgradeParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// SoftwareUpgradeParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	SoftwareUpgradeParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// SoftwareUpgradeParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	SoftwareUpgradeParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// SoftwareUpgradeParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	SoftwareUpgradeParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// SoftwareUpgradeParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	SoftwareUpgradeParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// SoftwareUpgradeParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	SoftwareUpgradeParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// SoftwareUpgradeParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	SoftwareUpgradeParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// SoftwareUpgradeParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	SoftwareUpgradeParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// SoftwareUpgradeParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	SoftwareUpgradeParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// SoftwareUpgradeParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	SoftwareUpgradeParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// SoftwareUpgradeParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	SoftwareUpgradeParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// SoftwareUpgradeParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	SoftwareUpgradeParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// SoftwareUpgradeParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	SoftwareUpgradeParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// SoftwareUpgradeParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	SoftwareUpgradeParamsUpdatingTaskExternalScript string = "ExternalScript"

	// SoftwareUpgradeParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	SoftwareUpgradeParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// SoftwareUpgradeParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	SoftwareUpgradeParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// SoftwareUpgradeParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	SoftwareUpgradeParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// SoftwareUpgradeParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	SoftwareUpgradeParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// SoftwareUpgradeParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	SoftwareUpgradeParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	SoftwareUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	SoftwareUpgradeParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	SoftwareUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	SoftwareUpgradeParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// SoftwareUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	SoftwareUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	SoftwareUpgradeParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// SoftwareUpgradeParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	SoftwareUpgradeParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	SoftwareUpgradeParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	SoftwareUpgradeParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// SoftwareUpgradeParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	SoftwareUpgradeParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// SoftwareUpgradeParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	SoftwareUpgradeParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// SoftwareUpgradeParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	SoftwareUpgradeParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// SoftwareUpgradeParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	SoftwareUpgradeParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	SoftwareUpgradeParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// SoftwareUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	SoftwareUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// SoftwareUpgradeParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	SoftwareUpgradeParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// SoftwareUpgradeParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	SoftwareUpgradeParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// SoftwareUpgradeParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	SoftwareUpgradeParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// SoftwareUpgradeParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	SoftwareUpgradeParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// SoftwareUpgradeParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	SoftwareUpgradeParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// SoftwareUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	SoftwareUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// SoftwareUpgradeParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	SoftwareUpgradeParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// SoftwareUpgradeParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	SoftwareUpgradeParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// SoftwareUpgradeParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	SoftwareUpgradeParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// SoftwareUpgradeParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	SoftwareUpgradeParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// SoftwareUpgradeParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	SoftwareUpgradeParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// SoftwareUpgradeParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	SoftwareUpgradeParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// SoftwareUpgradeParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	SoftwareUpgradeParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// SoftwareUpgradeParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	SoftwareUpgradeParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// SoftwareUpgradeParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	SoftwareUpgradeParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// SoftwareUpgradeParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	SoftwareUpgradeParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// SoftwareUpgradeParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	SoftwareUpgradeParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// SoftwareUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	SoftwareUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// SoftwareUpgradeParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	SoftwareUpgradeParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// SoftwareUpgradeParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	SoftwareUpgradeParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// SoftwareUpgradeParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	SoftwareUpgradeParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// SoftwareUpgradeParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	SoftwareUpgradeParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// SoftwareUpgradeParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	SoftwareUpgradeParamsUpdatingTaskPauseServer string = "PauseServer"

	// SoftwareUpgradeParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	SoftwareUpgradeParamsUpdatingTaskResumeServer string = "ResumeServer"

	// SoftwareUpgradeParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	SoftwareUpgradeParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// SoftwareUpgradeParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	SoftwareUpgradeParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// SoftwareUpgradeParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	SoftwareUpgradeParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// SoftwareUpgradeParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	SoftwareUpgradeParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// SoftwareUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	SoftwareUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// SoftwareUpgradeParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	SoftwareUpgradeParamsUpdatingTaskBulkImport string = "BulkImport"

	// SoftwareUpgradeParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	SoftwareUpgradeParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// SoftwareUpgradeParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	SoftwareUpgradeParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// SoftwareUpgradeParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	SoftwareUpgradeParamsUpdatingTaskCreateTable string = "CreateTable"

	// SoftwareUpgradeParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	SoftwareUpgradeParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// SoftwareUpgradeParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	SoftwareUpgradeParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// SoftwareUpgradeParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	SoftwareUpgradeParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// SoftwareUpgradeParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	SoftwareUpgradeParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// SoftwareUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	SoftwareUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// SoftwareUpgradeParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	SoftwareUpgradeParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// SoftwareUpgradeParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	SoftwareUpgradeParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// SoftwareUpgradeParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	SoftwareUpgradeParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// SoftwareUpgradeParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	SoftwareUpgradeParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// SoftwareUpgradeParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	SoftwareUpgradeParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// SoftwareUpgradeParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	SoftwareUpgradeParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// SoftwareUpgradeParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	SoftwareUpgradeParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// SoftwareUpgradeParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	SoftwareUpgradeParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// SoftwareUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	SoftwareUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// SoftwareUpgradeParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	SoftwareUpgradeParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// SoftwareUpgradeParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	SoftwareUpgradeParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// SoftwareUpgradeParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	SoftwareUpgradeParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// SoftwareUpgradeParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	SoftwareUpgradeParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// SoftwareUpgradeParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	SoftwareUpgradeParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// SoftwareUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	SoftwareUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// SoftwareUpgradeParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	SoftwareUpgradeParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// SoftwareUpgradeParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	SoftwareUpgradeParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// SoftwareUpgradeParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	SoftwareUpgradeParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// SoftwareUpgradeParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	SoftwareUpgradeParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// SoftwareUpgradeParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	SoftwareUpgradeParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// SoftwareUpgradeParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	SoftwareUpgradeParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// SoftwareUpgradeParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	SoftwareUpgradeParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// SoftwareUpgradeParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	SoftwareUpgradeParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// SoftwareUpgradeParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	SoftwareUpgradeParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// SoftwareUpgradeParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	SoftwareUpgradeParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// SoftwareUpgradeParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	SoftwareUpgradeParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// SoftwareUpgradeParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	SoftwareUpgradeParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// SoftwareUpgradeParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	SoftwareUpgradeParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// SoftwareUpgradeParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	SoftwareUpgradeParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// SoftwareUpgradeParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	SoftwareUpgradeParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// SoftwareUpgradeParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	SoftwareUpgradeParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// SoftwareUpgradeParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	SoftwareUpgradeParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// SoftwareUpgradeParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	SoftwareUpgradeParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// SoftwareUpgradeParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	SoftwareUpgradeParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// SoftwareUpgradeParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	SoftwareUpgradeParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// SoftwareUpgradeParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	SoftwareUpgradeParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// SoftwareUpgradeParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	SoftwareUpgradeParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// SoftwareUpgradeParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	SoftwareUpgradeParamsUpdatingTaskBackupTable string = "BackupTable"

	// SoftwareUpgradeParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	SoftwareUpgradeParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// SoftwareUpgradeParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	SoftwareUpgradeParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// SoftwareUpgradeParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	SoftwareUpgradeParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// SoftwareUpgradeParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	SoftwareUpgradeParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// SoftwareUpgradeParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	SoftwareUpgradeParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// SoftwareUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	SoftwareUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// SoftwareUpgradeParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	SoftwareUpgradeParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// SoftwareUpgradeParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	SoftwareUpgradeParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// SoftwareUpgradeParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	SoftwareUpgradeParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// SoftwareUpgradeParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	SoftwareUpgradeParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// SoftwareUpgradeParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	SoftwareUpgradeParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// SoftwareUpgradeParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	SoftwareUpgradeParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// SoftwareUpgradeParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	SoftwareUpgradeParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// SoftwareUpgradeParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	SoftwareUpgradeParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// SoftwareUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	SoftwareUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// SoftwareUpgradeParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	SoftwareUpgradeParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// SoftwareUpgradeParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	SoftwareUpgradeParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// SoftwareUpgradeParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	SoftwareUpgradeParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// SoftwareUpgradeParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	SoftwareUpgradeParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// SoftwareUpgradeParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	SoftwareUpgradeParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// SoftwareUpgradeParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	SoftwareUpgradeParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// SoftwareUpgradeParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	SoftwareUpgradeParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// SoftwareUpgradeParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	SoftwareUpgradeParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// SoftwareUpgradeParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	SoftwareUpgradeParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// SoftwareUpgradeParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	SoftwareUpgradeParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// SoftwareUpgradeParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	SoftwareUpgradeParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// SoftwareUpgradeParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	SoftwareUpgradeParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// SoftwareUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	SoftwareUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// SoftwareUpgradeParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	SoftwareUpgradeParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// SoftwareUpgradeParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	SoftwareUpgradeParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// SoftwareUpgradeParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	SoftwareUpgradeParamsUpdatingTaskResizeNode string = "ResizeNode"

	// SoftwareUpgradeParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	SoftwareUpgradeParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// SoftwareUpgradeParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	SoftwareUpgradeParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// SoftwareUpgradeParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	SoftwareUpgradeParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"
)

// prop value enum
func (m *SoftwareUpgradeParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, softwareUpgradeParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SoftwareUpgradeParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var softwareUpgradeParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		softwareUpgradeParamsTypeUpgradeOptionPropEnum = append(softwareUpgradeParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// SoftwareUpgradeParamsUpgradeOptionRolling captures enum value "Rolling"
	SoftwareUpgradeParamsUpgradeOptionRolling string = "Rolling"

	// SoftwareUpgradeParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	SoftwareUpgradeParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// SoftwareUpgradeParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	SoftwareUpgradeParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *SoftwareUpgradeParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, softwareUpgradeParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SoftwareUpgradeParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) validateYbSoftwareVersion(formats strfmt.Registry) error {

	if err := validate.Required("ybSoftwareVersion", "body", m.YbSoftwareVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this software upgrade params based on the context it is used
func (m *SoftwareUpgradeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SoftwareUpgradeParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SoftwareUpgradeParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareUpgradeParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareUpgradeParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareUpgradeParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *SoftwareUpgradeParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SoftwareUpgradeParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *SoftwareUpgradeParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SoftwareUpgradeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SoftwareUpgradeParams) UnmarshalBinary(b []byte) error {
	var res SoftwareUpgradeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
