// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleAPIFilter schedule Api filter
//
// swagger:model ScheduleApiFilter
type ScheduleAPIFilter struct {

	// status
	// Required: true
	// Unique: true
	Status []string `json:"status"`

	// task types
	// Required: true
	// Unique: true
	TaskTypes []string `json:"taskTypes"`

	// universe UUID list
	// Required: true
	// Unique: true
	UniverseUUIDList []strfmt.UUID `json:"universeUUIDList"`
}

// Validate validates this schedule Api filter
func (m *ScheduleAPIFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUIDList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scheduleApiFilterStatusItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Paused","Stopped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleApiFilterStatusItemsEnum = append(scheduleApiFilterStatusItemsEnum, v)
	}
}

func (m *ScheduleAPIFilter) validateStatusItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleApiFilterStatusItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleAPIFilter) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.UniqueItems("status", "body", m.Status); err != nil {
		return err
	}

	for i := 0; i < len(m.Status); i++ {

		// value enum
		if err := m.validateStatusItemsEnum("status"+"."+strconv.Itoa(i), "body", m.Status[i]); err != nil {
			return err
		}

	}

	return nil
}

var scheduleApiFilterTaskTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","XClusterConfigUpdateMasterAddresses","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleApiFilterTaskTypesItemsEnum = append(scheduleApiFilterTaskTypesItemsEnum, v)
	}
}

func (m *ScheduleAPIFilter) validateTaskTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleApiFilterTaskTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleAPIFilter) validateTaskTypes(formats strfmt.Registry) error {

	if err := validate.Required("taskTypes", "body", m.TaskTypes); err != nil {
		return err
	}

	if err := validate.UniqueItems("taskTypes", "body", m.TaskTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.TaskTypes); i++ {

		// value enum
		if err := m.validateTaskTypesItemsEnum("taskTypes"+"."+strconv.Itoa(i), "body", m.TaskTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ScheduleAPIFilter) validateUniverseUUIDList(formats strfmt.Registry) error {

	if err := validate.Required("universeUUIDList", "body", m.UniverseUUIDList); err != nil {
		return err
	}

	if err := validate.UniqueItems("universeUUIDList", "body", m.UniverseUUIDList); err != nil {
		return err
	}

	for i := 0; i < len(m.UniverseUUIDList); i++ {

		if err := validate.FormatOf("universeUUIDList"+"."+strconv.Itoa(i), "body", "uuid", m.UniverseUUIDList[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this schedule Api filter based on context it is used
func (m *ScheduleAPIFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleAPIFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleAPIFilter) UnmarshalBinary(b []byte) error {
	var res ScheduleAPIFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
