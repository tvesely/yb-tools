// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GFlagsUpgradeParams g flags upgrade params
//
// swagger:model GFlagsUpgradeParams
type GFlagsUpgradeParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// master g flags
	// Required: true
	MasterGFlags map[string]string `json:"masterGFlags"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// tserver g flags
	// Required: true
	TserverGFlags map[string]string `json:"tserverGFlags"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig XClusterConfigUpdateMasterAddresses CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this g flags upgrade params
func (m *GFlagsUpgradeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterGFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTserverGFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gFlagsUpgradeParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gFlagsUpgradeParamsTypeCapabilityPropEnum = append(gFlagsUpgradeParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// GFlagsUpgradeParamsCapabilityREADONLY captures enum value "READ_ONLY"
	GFlagsUpgradeParamsCapabilityREADONLY string = "READ_ONLY"

	// GFlagsUpgradeParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	GFlagsUpgradeParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *GFlagsUpgradeParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gFlagsUpgradeParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GFlagsUpgradeParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GFlagsUpgradeParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var gFlagsUpgradeParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gFlagsUpgradeParamsTypeCurrentClusterTypePropEnum = append(gFlagsUpgradeParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// GFlagsUpgradeParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	GFlagsUpgradeParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// GFlagsUpgradeParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	GFlagsUpgradeParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *GFlagsUpgradeParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gFlagsUpgradeParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GFlagsUpgradeParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var gFlagsUpgradeParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gFlagsUpgradeParamsTypeImportedStatePropEnum = append(gFlagsUpgradeParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// GFlagsUpgradeParamsImportedStateNONE captures enum value "NONE"
	GFlagsUpgradeParamsImportedStateNONE string = "NONE"

	// GFlagsUpgradeParamsImportedStateSTARTED captures enum value "STARTED"
	GFlagsUpgradeParamsImportedStateSTARTED string = "STARTED"

	// GFlagsUpgradeParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	GFlagsUpgradeParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// GFlagsUpgradeParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	GFlagsUpgradeParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// GFlagsUpgradeParamsImportedStateIMPORTED captures enum value "IMPORTED"
	GFlagsUpgradeParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *GFlagsUpgradeParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gFlagsUpgradeParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GFlagsUpgradeParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateMasterGFlags(formats strfmt.Registry) error {

	if err := validate.Required("masterGFlags", "body", m.MasterGFlags); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GFlagsUpgradeParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *GFlagsUpgradeParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *GFlagsUpgradeParams) validateTserverGFlags(formats strfmt.Registry) error {

	if err := validate.Required("tserverGFlags", "body", m.TserverGFlags); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var gFlagsUpgradeParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","XClusterConfigUpdateMasterAddresses","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gFlagsUpgradeParamsTypeUpdatingTaskPropEnum = append(gFlagsUpgradeParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// GFlagsUpgradeParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	GFlagsUpgradeParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// GFlagsUpgradeParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	GFlagsUpgradeParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// GFlagsUpgradeParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	GFlagsUpgradeParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// GFlagsUpgradeParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	GFlagsUpgradeParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// GFlagsUpgradeParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	GFlagsUpgradeParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// GFlagsUpgradeParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	GFlagsUpgradeParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// GFlagsUpgradeParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	GFlagsUpgradeParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// GFlagsUpgradeParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	GFlagsUpgradeParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// GFlagsUpgradeParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	GFlagsUpgradeParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// GFlagsUpgradeParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	GFlagsUpgradeParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// GFlagsUpgradeParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	GFlagsUpgradeParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// GFlagsUpgradeParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	GFlagsUpgradeParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// GFlagsUpgradeParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	GFlagsUpgradeParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// GFlagsUpgradeParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	GFlagsUpgradeParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// GFlagsUpgradeParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	GFlagsUpgradeParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// GFlagsUpgradeParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	GFlagsUpgradeParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// GFlagsUpgradeParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	GFlagsUpgradeParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// GFlagsUpgradeParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	GFlagsUpgradeParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// GFlagsUpgradeParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	GFlagsUpgradeParamsUpdatingTaskExternalScript string = "ExternalScript"

	// GFlagsUpgradeParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	GFlagsUpgradeParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// GFlagsUpgradeParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	GFlagsUpgradeParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// GFlagsUpgradeParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	GFlagsUpgradeParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// GFlagsUpgradeParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	GFlagsUpgradeParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// GFlagsUpgradeParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	GFlagsUpgradeParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	GFlagsUpgradeParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	GFlagsUpgradeParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	GFlagsUpgradeParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	GFlagsUpgradeParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// GFlagsUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	GFlagsUpgradeParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	GFlagsUpgradeParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// GFlagsUpgradeParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	GFlagsUpgradeParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	GFlagsUpgradeParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	GFlagsUpgradeParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// GFlagsUpgradeParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	GFlagsUpgradeParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// GFlagsUpgradeParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	GFlagsUpgradeParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// GFlagsUpgradeParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	GFlagsUpgradeParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// GFlagsUpgradeParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	GFlagsUpgradeParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	GFlagsUpgradeParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// GFlagsUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	GFlagsUpgradeParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// GFlagsUpgradeParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	GFlagsUpgradeParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// GFlagsUpgradeParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	GFlagsUpgradeParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// GFlagsUpgradeParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	GFlagsUpgradeParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// GFlagsUpgradeParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	GFlagsUpgradeParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// GFlagsUpgradeParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	GFlagsUpgradeParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// GFlagsUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	GFlagsUpgradeParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// GFlagsUpgradeParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	GFlagsUpgradeParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// GFlagsUpgradeParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	GFlagsUpgradeParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// GFlagsUpgradeParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	GFlagsUpgradeParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// GFlagsUpgradeParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	GFlagsUpgradeParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// GFlagsUpgradeParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	GFlagsUpgradeParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// GFlagsUpgradeParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	GFlagsUpgradeParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// GFlagsUpgradeParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	GFlagsUpgradeParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// GFlagsUpgradeParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	GFlagsUpgradeParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// GFlagsUpgradeParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	GFlagsUpgradeParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// GFlagsUpgradeParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	GFlagsUpgradeParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// GFlagsUpgradeParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	GFlagsUpgradeParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// GFlagsUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	GFlagsUpgradeParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// GFlagsUpgradeParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	GFlagsUpgradeParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// GFlagsUpgradeParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	GFlagsUpgradeParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// GFlagsUpgradeParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	GFlagsUpgradeParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// GFlagsUpgradeParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	GFlagsUpgradeParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// GFlagsUpgradeParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	GFlagsUpgradeParamsUpdatingTaskPauseServer string = "PauseServer"

	// GFlagsUpgradeParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	GFlagsUpgradeParamsUpdatingTaskResumeServer string = "ResumeServer"

	// GFlagsUpgradeParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	GFlagsUpgradeParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// GFlagsUpgradeParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	GFlagsUpgradeParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// GFlagsUpgradeParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	GFlagsUpgradeParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// GFlagsUpgradeParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	GFlagsUpgradeParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// GFlagsUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	GFlagsUpgradeParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// GFlagsUpgradeParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	GFlagsUpgradeParamsUpdatingTaskBulkImport string = "BulkImport"

	// GFlagsUpgradeParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	GFlagsUpgradeParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// GFlagsUpgradeParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	GFlagsUpgradeParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// GFlagsUpgradeParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	GFlagsUpgradeParamsUpdatingTaskCreateTable string = "CreateTable"

	// GFlagsUpgradeParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	GFlagsUpgradeParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// GFlagsUpgradeParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	GFlagsUpgradeParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// GFlagsUpgradeParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	GFlagsUpgradeParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// GFlagsUpgradeParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	GFlagsUpgradeParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// GFlagsUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	GFlagsUpgradeParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// GFlagsUpgradeParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	GFlagsUpgradeParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// GFlagsUpgradeParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	GFlagsUpgradeParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// GFlagsUpgradeParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	GFlagsUpgradeParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// GFlagsUpgradeParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	GFlagsUpgradeParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// GFlagsUpgradeParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	GFlagsUpgradeParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// GFlagsUpgradeParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	GFlagsUpgradeParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// GFlagsUpgradeParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	GFlagsUpgradeParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// GFlagsUpgradeParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	GFlagsUpgradeParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// GFlagsUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	GFlagsUpgradeParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// GFlagsUpgradeParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	GFlagsUpgradeParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// GFlagsUpgradeParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	GFlagsUpgradeParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// GFlagsUpgradeParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	GFlagsUpgradeParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// GFlagsUpgradeParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	GFlagsUpgradeParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// GFlagsUpgradeParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	GFlagsUpgradeParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// GFlagsUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	GFlagsUpgradeParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// GFlagsUpgradeParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	GFlagsUpgradeParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// GFlagsUpgradeParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	GFlagsUpgradeParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// GFlagsUpgradeParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	GFlagsUpgradeParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// GFlagsUpgradeParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	GFlagsUpgradeParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// GFlagsUpgradeParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	GFlagsUpgradeParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// GFlagsUpgradeParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	GFlagsUpgradeParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// GFlagsUpgradeParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	GFlagsUpgradeParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// GFlagsUpgradeParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	GFlagsUpgradeParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// GFlagsUpgradeParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	GFlagsUpgradeParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// GFlagsUpgradeParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	GFlagsUpgradeParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// GFlagsUpgradeParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	GFlagsUpgradeParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// GFlagsUpgradeParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	GFlagsUpgradeParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// GFlagsUpgradeParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	GFlagsUpgradeParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// GFlagsUpgradeParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	GFlagsUpgradeParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// GFlagsUpgradeParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	GFlagsUpgradeParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// GFlagsUpgradeParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	GFlagsUpgradeParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// GFlagsUpgradeParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	GFlagsUpgradeParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// GFlagsUpgradeParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	GFlagsUpgradeParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// GFlagsUpgradeParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	GFlagsUpgradeParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// GFlagsUpgradeParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	GFlagsUpgradeParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// GFlagsUpgradeParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	GFlagsUpgradeParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// GFlagsUpgradeParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	GFlagsUpgradeParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// GFlagsUpgradeParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	GFlagsUpgradeParamsUpdatingTaskBackupTable string = "BackupTable"

	// GFlagsUpgradeParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	GFlagsUpgradeParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// GFlagsUpgradeParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	GFlagsUpgradeParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// GFlagsUpgradeParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	GFlagsUpgradeParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// GFlagsUpgradeParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	GFlagsUpgradeParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// GFlagsUpgradeParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	GFlagsUpgradeParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// GFlagsUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	GFlagsUpgradeParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// GFlagsUpgradeParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	GFlagsUpgradeParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// GFlagsUpgradeParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	GFlagsUpgradeParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// GFlagsUpgradeParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	GFlagsUpgradeParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// GFlagsUpgradeParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	GFlagsUpgradeParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// GFlagsUpgradeParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	GFlagsUpgradeParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// GFlagsUpgradeParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	GFlagsUpgradeParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// GFlagsUpgradeParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	GFlagsUpgradeParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// GFlagsUpgradeParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	GFlagsUpgradeParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// GFlagsUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	GFlagsUpgradeParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// GFlagsUpgradeParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	GFlagsUpgradeParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// GFlagsUpgradeParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	GFlagsUpgradeParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// GFlagsUpgradeParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	GFlagsUpgradeParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// GFlagsUpgradeParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	GFlagsUpgradeParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// GFlagsUpgradeParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	GFlagsUpgradeParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// GFlagsUpgradeParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	GFlagsUpgradeParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// GFlagsUpgradeParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	GFlagsUpgradeParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// GFlagsUpgradeParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	GFlagsUpgradeParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// GFlagsUpgradeParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	GFlagsUpgradeParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// GFlagsUpgradeParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	GFlagsUpgradeParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// GFlagsUpgradeParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	GFlagsUpgradeParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// GFlagsUpgradeParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	GFlagsUpgradeParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// GFlagsUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	GFlagsUpgradeParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// GFlagsUpgradeParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	GFlagsUpgradeParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// GFlagsUpgradeParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	GFlagsUpgradeParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// GFlagsUpgradeParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	GFlagsUpgradeParamsUpdatingTaskResizeNode string = "ResizeNode"

	// GFlagsUpgradeParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	GFlagsUpgradeParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// GFlagsUpgradeParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	GFlagsUpgradeParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// GFlagsUpgradeParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	GFlagsUpgradeParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"
)

// prop value enum
func (m *GFlagsUpgradeParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gFlagsUpgradeParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GFlagsUpgradeParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var gFlagsUpgradeParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gFlagsUpgradeParamsTypeUpgradeOptionPropEnum = append(gFlagsUpgradeParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// GFlagsUpgradeParamsUpgradeOptionRolling captures enum value "Rolling"
	GFlagsUpgradeParamsUpgradeOptionRolling string = "Rolling"

	// GFlagsUpgradeParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	GFlagsUpgradeParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// GFlagsUpgradeParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	GFlagsUpgradeParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *GFlagsUpgradeParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gFlagsUpgradeParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GFlagsUpgradeParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this g flags upgrade params based on the context it is used
func (m *GFlagsUpgradeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GFlagsUpgradeParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GFlagsUpgradeParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *GFlagsUpgradeParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GFlagsUpgradeParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *GFlagsUpgradeParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *GFlagsUpgradeParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GFlagsUpgradeParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *GFlagsUpgradeParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GFlagsUpgradeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GFlagsUpgradeParams) UnmarshalBinary(b []byte) error {
	var res GFlagsUpgradeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
