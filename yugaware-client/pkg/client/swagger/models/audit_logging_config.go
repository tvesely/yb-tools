// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditLoggingConfig Audit Logging Configuration
//
// swagger:model AuditLoggingConfig
type AuditLoggingConfig struct {

	// Max number of days up till which logs are kept
	// Example: 30
	// Minimum: 0
	MaxHistory *int32 `json:"maxHistory,omitempty"`

	// Flag to enable/disable audit logs output to file
	// Required: true
	OutputToFile *bool `json:"outputToFile"`

	// Flag to enable/disable audit logs output to stdout
	// Required: true
	OutputToStdout *bool `json:"outputToStdout"`

	// Rollover Pattern
	// Example: yyyy-MM-dd
	RolloverPattern string `json:"rolloverPattern,omitempty"`
}

// Validate validates this audit logging config
func (m *AuditLoggingConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputToFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputToStdout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditLoggingConfig) validateMaxHistory(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxHistory) { // not required
		return nil
	}

	if err := validate.MinimumInt("maxHistory", "body", int64(*m.MaxHistory), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *AuditLoggingConfig) validateOutputToFile(formats strfmt.Registry) error {

	if err := validate.Required("outputToFile", "body", m.OutputToFile); err != nil {
		return err
	}

	return nil
}

func (m *AuditLoggingConfig) validateOutputToStdout(formats strfmt.Registry) error {

	if err := validate.Required("outputToStdout", "body", m.OutputToStdout); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this audit logging config based on context it is used
func (m *AuditLoggingConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditLoggingConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditLoggingConfig) UnmarshalBinary(b []byte) error {
	var res AuditLoggingConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
