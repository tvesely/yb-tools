// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerConfig Customer configuration. Includes storage, alerts, password policy, and call-home level.
//
// swagger:model CustomerConfig
type CustomerConfig struct {

	// Config name
	// Example: backup20-01-2021
	// Required: true
	// Max Length: 100
	// Min Length: 1
	ConfigName *string `json:"configName"`

	// Config UUID
	// Read Only: true
	// Format: uuid
	ConfigUUID strfmt.UUID `json:"configUUID,omitempty"`

	// Customer UUID
	// Required: true
	// Read Only: true
	// Format: uuid
	CustomerUUID strfmt.UUID `json:"customerUUID"`

	// Configuration data
	// Example: {\"AWS_ACCESS_KEY_ID\": \"AK****************ZD\"}
	// Required: true
	Data interface{} `json:"data"`

	// Name
	// Example: S3
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Name *string `json:"name"`

	// state of the customerConfig. Possible values are Active, QueuedForDeletion.
	// Read Only: true
	// Enum: [Active QueuedForDeletion]
	State string `json:"state,omitempty"`

	// Config type
	// Example: STORAGE
	// Required: true
	// Enum: [STORAGE ALERTS CALLHOME PASSWORD_POLICY OTHER]
	Type *string `json:"type"`
}

// Validate validates this customer config
func (m *CustomerConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerConfig) validateConfigName(formats strfmt.Registry) error {

	if err := validate.Required("configName", "body", m.ConfigName); err != nil {
		return err
	}

	if err := validate.MinLength("configName", "body", *m.ConfigName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("configName", "body", *m.ConfigName, 100); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfig) validateConfigUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("configUUID", "body", "uuid", m.ConfigUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfig) validateCustomerUUID(formats strfmt.Registry) error {

	if err := validate.Required("customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	if err := validate.FormatOf("customerUUID", "body", "uuid", m.CustomerUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfig) validateData(formats strfmt.Registry) error {

	if m.Data == nil {
		return errors.Required("data", "body", nil)
	}

	return nil
}

func (m *CustomerConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 50); err != nil {
		return err
	}

	return nil
}

var customerConfigTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","QueuedForDeletion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerConfigTypeStatePropEnum = append(customerConfigTypeStatePropEnum, v)
	}
}

const (

	// CustomerConfigStateActive captures enum value "Active"
	CustomerConfigStateActive string = "Active"

	// CustomerConfigStateQueuedForDeletion captures enum value "QueuedForDeletion"
	CustomerConfigStateQueuedForDeletion string = "QueuedForDeletion"
)

// prop value enum
func (m *CustomerConfig) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerConfigTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerConfig) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var customerConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STORAGE","ALERTS","CALLHOME","PASSWORD_POLICY","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerConfigTypeTypePropEnum = append(customerConfigTypeTypePropEnum, v)
	}
}

const (

	// CustomerConfigTypeSTORAGE captures enum value "STORAGE"
	CustomerConfigTypeSTORAGE string = "STORAGE"

	// CustomerConfigTypeALERTS captures enum value "ALERTS"
	CustomerConfigTypeALERTS string = "ALERTS"

	// CustomerConfigTypeCALLHOME captures enum value "CALLHOME"
	CustomerConfigTypeCALLHOME string = "CALLHOME"

	// CustomerConfigTypePASSWORDPOLICY captures enum value "PASSWORD_POLICY"
	CustomerConfigTypePASSWORDPOLICY string = "PASSWORD_POLICY"

	// CustomerConfigTypeOTHER captures enum value "OTHER"
	CustomerConfigTypeOTHER string = "OTHER"
)

// prop value enum
func (m *CustomerConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customerConfigTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomerConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this customer config based on the context it is used
func (m *CustomerConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerConfig) contextValidateConfigUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "configUUID", "body", strfmt.UUID(m.ConfigUUID)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfig) contextValidateCustomerUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customerUUID", "body", strfmt.UUID(m.CustomerUUID)); err != nil {
		return err
	}

	return nil
}

func (m *CustomerConfig) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerConfig) UnmarshalBinary(b []byte) error {
	var res CustomerConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
