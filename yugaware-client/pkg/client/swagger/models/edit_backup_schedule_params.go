// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EditBackupScheduleParams Info to edit the schedule params for backups
//
// swagger:model EditBackupScheduleParams
type EditBackupScheduleParams struct {

	// Cron expression for scheduling
	CronExpression string `json:"cronExpression,omitempty"`

	// Frequency of the schedule
	Frequency int64 `json:"frequency,omitempty"`

	// Time Unit for frequency
	// Enum: [NANOSECONDS MICROSECONDS MILLISECONDS SECONDS MINUTES HOURS DAYS MONTHS YEARS]
	FrequencyTimeUnit string `json:"frequencyTimeUnit,omitempty"`

	// State of the schedule
	// Enum: [Active Paused Stopped]
	Status string `json:"status,omitempty"`
}

// Validate validates this edit backup schedule params
func (m *EditBackupScheduleParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrequencyTimeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var editBackupScheduleParamsTypeFrequencyTimeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NANOSECONDS","MICROSECONDS","MILLISECONDS","SECONDS","MINUTES","HOURS","DAYS","MONTHS","YEARS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		editBackupScheduleParamsTypeFrequencyTimeUnitPropEnum = append(editBackupScheduleParamsTypeFrequencyTimeUnitPropEnum, v)
	}
}

const (

	// EditBackupScheduleParamsFrequencyTimeUnitNANOSECONDS captures enum value "NANOSECONDS"
	EditBackupScheduleParamsFrequencyTimeUnitNANOSECONDS string = "NANOSECONDS"

	// EditBackupScheduleParamsFrequencyTimeUnitMICROSECONDS captures enum value "MICROSECONDS"
	EditBackupScheduleParamsFrequencyTimeUnitMICROSECONDS string = "MICROSECONDS"

	// EditBackupScheduleParamsFrequencyTimeUnitMILLISECONDS captures enum value "MILLISECONDS"
	EditBackupScheduleParamsFrequencyTimeUnitMILLISECONDS string = "MILLISECONDS"

	// EditBackupScheduleParamsFrequencyTimeUnitSECONDS captures enum value "SECONDS"
	EditBackupScheduleParamsFrequencyTimeUnitSECONDS string = "SECONDS"

	// EditBackupScheduleParamsFrequencyTimeUnitMINUTES captures enum value "MINUTES"
	EditBackupScheduleParamsFrequencyTimeUnitMINUTES string = "MINUTES"

	// EditBackupScheduleParamsFrequencyTimeUnitHOURS captures enum value "HOURS"
	EditBackupScheduleParamsFrequencyTimeUnitHOURS string = "HOURS"

	// EditBackupScheduleParamsFrequencyTimeUnitDAYS captures enum value "DAYS"
	EditBackupScheduleParamsFrequencyTimeUnitDAYS string = "DAYS"

	// EditBackupScheduleParamsFrequencyTimeUnitMONTHS captures enum value "MONTHS"
	EditBackupScheduleParamsFrequencyTimeUnitMONTHS string = "MONTHS"

	// EditBackupScheduleParamsFrequencyTimeUnitYEARS captures enum value "YEARS"
	EditBackupScheduleParamsFrequencyTimeUnitYEARS string = "YEARS"
)

// prop value enum
func (m *EditBackupScheduleParams) validateFrequencyTimeUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, editBackupScheduleParamsTypeFrequencyTimeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EditBackupScheduleParams) validateFrequencyTimeUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.FrequencyTimeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFrequencyTimeUnitEnum("frequencyTimeUnit", "body", m.FrequencyTimeUnit); err != nil {
		return err
	}

	return nil
}

var editBackupScheduleParamsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Paused","Stopped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		editBackupScheduleParamsTypeStatusPropEnum = append(editBackupScheduleParamsTypeStatusPropEnum, v)
	}
}

const (

	// EditBackupScheduleParamsStatusActive captures enum value "Active"
	EditBackupScheduleParamsStatusActive string = "Active"

	// EditBackupScheduleParamsStatusPaused captures enum value "Paused"
	EditBackupScheduleParamsStatusPaused string = "Paused"

	// EditBackupScheduleParamsStatusStopped captures enum value "Stopped"
	EditBackupScheduleParamsStatusStopped string = "Stopped"
)

// prop value enum
func (m *EditBackupScheduleParams) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, editBackupScheduleParamsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EditBackupScheduleParams) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this edit backup schedule params based on context it is used
func (m *EditBackupScheduleParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EditBackupScheduleParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EditBackupScheduleParams) UnmarshalBinary(b []byte) error {
	var res EditBackupScheduleParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
