// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UniverseDefinitionTaskParams universe definition task params
//
// swagger:model UniverseDefinitionTaskParams
type UniverseDefinitionTaskParams struct {

	// allow insecure
	AllowInsecure bool `json:"allowInsecure,omitempty"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Format: uuid
	ClientRootCA strfmt.UUID `json:"clientRootCA,omitempty"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	RootAndClientRootCASame bool `json:"rootAndClientRootCASame,omitempty"`

	// root c a
	// Format: uuid
	RootCA strfmt.UUID `json:"rootCA,omitempty"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload UpdateUniverseTags]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this universe definition task params
func (m *UniverseDefinitionTaskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var universeDefinitionTaskParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeDefinitionTaskParamsTypeCapabilityPropEnum = append(universeDefinitionTaskParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// UniverseDefinitionTaskParamsCapabilityREADONLY captures enum value "READ_ONLY"
	UniverseDefinitionTaskParamsCapabilityREADONLY string = "READ_ONLY"

	// UniverseDefinitionTaskParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	UniverseDefinitionTaskParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *UniverseDefinitionTaskParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeDefinitionTaskParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseDefinitionTaskParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateClientRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientRootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var universeDefinitionTaskParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeDefinitionTaskParamsTypeCurrentClusterTypePropEnum = append(universeDefinitionTaskParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// UniverseDefinitionTaskParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	UniverseDefinitionTaskParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// UniverseDefinitionTaskParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	UniverseDefinitionTaskParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *UniverseDefinitionTaskParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeDefinitionTaskParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseDefinitionTaskParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var universeDefinitionTaskParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeDefinitionTaskParamsTypeImportedStatePropEnum = append(universeDefinitionTaskParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// UniverseDefinitionTaskParamsImportedStateNONE captures enum value "NONE"
	UniverseDefinitionTaskParamsImportedStateNONE string = "NONE"

	// UniverseDefinitionTaskParamsImportedStateSTARTED captures enum value "STARTED"
	UniverseDefinitionTaskParamsImportedStateSTARTED string = "STARTED"

	// UniverseDefinitionTaskParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	UniverseDefinitionTaskParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// UniverseDefinitionTaskParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	UniverseDefinitionTaskParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// UniverseDefinitionTaskParamsImportedStateIMPORTED captures enum value "IMPORTED"
	UniverseDefinitionTaskParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *UniverseDefinitionTaskParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeDefinitionTaskParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseDefinitionTaskParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateRootCA(formats strfmt.Registry) error {
	if swag.IsZero(m.RootCA) { // not required
		return nil
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var universeDefinitionTaskParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload","UpdateUniverseTags"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		universeDefinitionTaskParamsTypeUpdatingTaskPropEnum = append(universeDefinitionTaskParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// UniverseDefinitionTaskParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	UniverseDefinitionTaskParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// UniverseDefinitionTaskParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	UniverseDefinitionTaskParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	UniverseDefinitionTaskParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	UniverseDefinitionTaskParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// UniverseDefinitionTaskParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	UniverseDefinitionTaskParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// UniverseDefinitionTaskParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	UniverseDefinitionTaskParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// UniverseDefinitionTaskParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	UniverseDefinitionTaskParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	UniverseDefinitionTaskParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// UniverseDefinitionTaskParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	UniverseDefinitionTaskParamsUpdatingTaskExternalScript string = "ExternalScript"

	// UniverseDefinitionTaskParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	UniverseDefinitionTaskParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// UniverseDefinitionTaskParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	UniverseDefinitionTaskParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// UniverseDefinitionTaskParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	UniverseDefinitionTaskParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// UniverseDefinitionTaskParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	UniverseDefinitionTaskParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// UniverseDefinitionTaskParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	UniverseDefinitionTaskParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// UniverseDefinitionTaskParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	UniverseDefinitionTaskParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// UniverseDefinitionTaskParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	UniverseDefinitionTaskParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// UniverseDefinitionTaskParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	UniverseDefinitionTaskParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// UniverseDefinitionTaskParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	UniverseDefinitionTaskParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// UniverseDefinitionTaskParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	UniverseDefinitionTaskParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// UniverseDefinitionTaskParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	UniverseDefinitionTaskParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	UniverseDefinitionTaskParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	UniverseDefinitionTaskParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	UniverseDefinitionTaskParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// UniverseDefinitionTaskParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	UniverseDefinitionTaskParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	UniverseDefinitionTaskParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	UniverseDefinitionTaskParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	UniverseDefinitionTaskParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	UniverseDefinitionTaskParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// UniverseDefinitionTaskParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	UniverseDefinitionTaskParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// UniverseDefinitionTaskParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	UniverseDefinitionTaskParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// UniverseDefinitionTaskParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	UniverseDefinitionTaskParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// UniverseDefinitionTaskParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	UniverseDefinitionTaskParamsUpdatingTaskPauseServer string = "PauseServer"

	// UniverseDefinitionTaskParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	UniverseDefinitionTaskParamsUpdatingTaskResumeServer string = "ResumeServer"

	// UniverseDefinitionTaskParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	UniverseDefinitionTaskParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// UniverseDefinitionTaskParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	UniverseDefinitionTaskParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// UniverseDefinitionTaskParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	UniverseDefinitionTaskParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// UniverseDefinitionTaskParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	UniverseDefinitionTaskParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// UniverseDefinitionTaskParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	UniverseDefinitionTaskParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// UniverseDefinitionTaskParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	UniverseDefinitionTaskParamsUpdatingTaskBulkImport string = "BulkImport"

	// UniverseDefinitionTaskParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	UniverseDefinitionTaskParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	UniverseDefinitionTaskParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	UniverseDefinitionTaskParamsUpdatingTaskCreateTable string = "CreateTable"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	UniverseDefinitionTaskParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	UniverseDefinitionTaskParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// UniverseDefinitionTaskParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	UniverseDefinitionTaskParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// UniverseDefinitionTaskParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	UniverseDefinitionTaskParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// UniverseDefinitionTaskParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	UniverseDefinitionTaskParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// UniverseDefinitionTaskParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	UniverseDefinitionTaskParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// UniverseDefinitionTaskParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	UniverseDefinitionTaskParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// UniverseDefinitionTaskParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	UniverseDefinitionTaskParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// UniverseDefinitionTaskParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	UniverseDefinitionTaskParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// UniverseDefinitionTaskParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	UniverseDefinitionTaskParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// UniverseDefinitionTaskParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	UniverseDefinitionTaskParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// UniverseDefinitionTaskParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	UniverseDefinitionTaskParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	UniverseDefinitionTaskParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// UniverseDefinitionTaskParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	UniverseDefinitionTaskParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	UniverseDefinitionTaskParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// UniverseDefinitionTaskParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	UniverseDefinitionTaskParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// UniverseDefinitionTaskParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	UniverseDefinitionTaskParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// UniverseDefinitionTaskParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	UniverseDefinitionTaskParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// UniverseDefinitionTaskParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	UniverseDefinitionTaskParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// UniverseDefinitionTaskParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	UniverseDefinitionTaskParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// UniverseDefinitionTaskParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	UniverseDefinitionTaskParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// UniverseDefinitionTaskParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	UniverseDefinitionTaskParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// UniverseDefinitionTaskParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	UniverseDefinitionTaskParamsUpdatingTaskBackupTable string = "BackupTable"

	// UniverseDefinitionTaskParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	UniverseDefinitionTaskParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// UniverseDefinitionTaskParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	UniverseDefinitionTaskParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// UniverseDefinitionTaskParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	UniverseDefinitionTaskParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// UniverseDefinitionTaskParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	UniverseDefinitionTaskParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// UniverseDefinitionTaskParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	UniverseDefinitionTaskParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// UniverseDefinitionTaskParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	UniverseDefinitionTaskParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// UniverseDefinitionTaskParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	UniverseDefinitionTaskParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// UniverseDefinitionTaskParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	UniverseDefinitionTaskParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// UniverseDefinitionTaskParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	UniverseDefinitionTaskParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// UniverseDefinitionTaskParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	UniverseDefinitionTaskParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// UniverseDefinitionTaskParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	UniverseDefinitionTaskParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// UniverseDefinitionTaskParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	UniverseDefinitionTaskParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// UniverseDefinitionTaskParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	UniverseDefinitionTaskParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// UniverseDefinitionTaskParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	UniverseDefinitionTaskParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	UniverseDefinitionTaskParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// UniverseDefinitionTaskParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	UniverseDefinitionTaskParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// UniverseDefinitionTaskParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	UniverseDefinitionTaskParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// UniverseDefinitionTaskParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	UniverseDefinitionTaskParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// UniverseDefinitionTaskParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	UniverseDefinitionTaskParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// UniverseDefinitionTaskParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	UniverseDefinitionTaskParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// UniverseDefinitionTaskParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	UniverseDefinitionTaskParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// UniverseDefinitionTaskParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	UniverseDefinitionTaskParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// UniverseDefinitionTaskParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	UniverseDefinitionTaskParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// UniverseDefinitionTaskParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	UniverseDefinitionTaskParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// UniverseDefinitionTaskParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	UniverseDefinitionTaskParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// UniverseDefinitionTaskParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	UniverseDefinitionTaskParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// UniverseDefinitionTaskParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	UniverseDefinitionTaskParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// UniverseDefinitionTaskParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	UniverseDefinitionTaskParamsUpdatingTaskResizeNode string = "ResizeNode"

	// UniverseDefinitionTaskParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	UniverseDefinitionTaskParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// UniverseDefinitionTaskParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	UniverseDefinitionTaskParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// UniverseDefinitionTaskParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	UniverseDefinitionTaskParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	UniverseDefinitionTaskParamsUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// UniverseDefinitionTaskParamsUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	UniverseDefinitionTaskParamsUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// UniverseDefinitionTaskParamsUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	UniverseDefinitionTaskParamsUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// UniverseDefinitionTaskParamsUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	UniverseDefinitionTaskParamsUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"

	// UniverseDefinitionTaskParamsUpdatingTaskUpdateUniverseTags captures enum value "UpdateUniverseTags"
	UniverseDefinitionTaskParamsUpdatingTaskUpdateUniverseTags string = "UpdateUniverseTags"
)

// prop value enum
func (m *UniverseDefinitionTaskParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, universeDefinitionTaskParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UniverseDefinitionTaskParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this universe definition task params based on the context it is used
func (m *UniverseDefinitionTaskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UniverseDefinitionTaskParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UniverseDefinitionTaskParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *UniverseDefinitionTaskParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UniverseDefinitionTaskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UniverseDefinitionTaskParams) UnmarshalBinary(b []byte) error {
	var res UniverseDefinitionTaskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
