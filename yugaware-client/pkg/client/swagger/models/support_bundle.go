// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SupportBundle support bundle
//
// swagger:model SupportBundle
type SupportBundle struct {

	// bundle details
	// Required: true
	BundleDetails *BundleDetails `json:"bundleDetails"`

	// bundle UUID
	// Required: true
	// Format: uuid
	BundleUUID *strfmt.UUID `json:"bundleUUID"`

	// end date
	// Required: true
	// Format: date-time
	EndDate *strfmt.DateTime `json:"endDate"`

	// path
	// Required: true
	Path *string `json:"path"`

	// scope UUID
	// Required: true
	// Format: uuid
	ScopeUUID *strfmt.UUID `json:"scopeUUID"`

	// start date
	// Required: true
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate"`

	// status
	// Required: true
	// Enum: [Running Success Failed]
	Status *string `json:"status"`
}

// Validate validates this support bundle
func (m *SupportBundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundleUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupportBundle) validateBundleDetails(formats strfmt.Registry) error {

	if err := validate.Required("bundleDetails", "body", m.BundleDetails); err != nil {
		return err
	}

	if m.BundleDetails != nil {
		if err := m.BundleDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundleDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundleDetails")
			}
			return err
		}
	}

	return nil
}

func (m *SupportBundle) validateBundleUUID(formats strfmt.Registry) error {

	if err := validate.Required("bundleUUID", "body", m.BundleUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("bundleUUID", "body", "uuid", m.BundleUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SupportBundle) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("endDate", "body", m.EndDate); err != nil {
		return err
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SupportBundle) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *SupportBundle) validateScopeUUID(formats strfmt.Registry) error {

	if err := validate.Required("scopeUUID", "body", m.ScopeUUID); err != nil {
		return err
	}

	if err := validate.FormatOf("scopeUUID", "body", "uuid", m.ScopeUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SupportBundle) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var supportBundleTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Success","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		supportBundleTypeStatusPropEnum = append(supportBundleTypeStatusPropEnum, v)
	}
}

const (

	// SupportBundleStatusRunning captures enum value "Running"
	SupportBundleStatusRunning string = "Running"

	// SupportBundleStatusSuccess captures enum value "Success"
	SupportBundleStatusSuccess string = "Success"

	// SupportBundleStatusFailed captures enum value "Failed"
	SupportBundleStatusFailed string = "Failed"
)

// prop value enum
func (m *SupportBundle) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, supportBundleTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SupportBundle) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this support bundle based on the context it is used
func (m *SupportBundle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBundleDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupportBundle) contextValidateBundleDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.BundleDetails != nil {
		if err := m.BundleDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bundleDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bundleDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SupportBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupportBundle) UnmarshalBinary(b []byte) error {
	var res SupportBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
