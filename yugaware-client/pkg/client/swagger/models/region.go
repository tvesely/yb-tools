// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Region Region within a given provider. Typically, this maps to a single cloud provider region.
//
// swagger:model Region
type Region struct {

	// active
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// architecture
	// Enum: [x86_64 arm64]
	Architecture string `json:"architecture,omitempty"`

	// Cloud provider region code
	// Example: us-west-2
	Code string `json:"code,omitempty"`

	// config
	Config map[string]string `json:"config,omitempty"`

	// The region's latitude
	// Example: 37.22
	// Read Only: true
	Latitude float64 `json:"latitude,omitempty"`

	// The region's longitude
	// Example: -120.01
	// Read Only: true
	Longitude float64 `json:"longitude,omitempty"`

	// Cloud provider region name
	// Example: US West (Oregon)
	// Read Only: true
	Name string `json:"name,omitempty"`

	// security group Id
	SecurityGroupID string `json:"securityGroupId,omitempty"`

	// Region UUID
	// Read Only: true
	// Format: uuid
	UUID strfmt.UUID `json:"uuid,omitempty"`

	// vnet name
	VnetName string `json:"vnetName,omitempty"`

	// The AMI to be used in this region.
	// Example: TODO
	YbImage string `json:"ybImage,omitempty"`

	// zones
	// Required: true
	Zones []*AvailabilityZone `json:"zones"`
}

// Validate validates this region
func (m *Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var regionTypeArchitecturePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["x86_64","arm64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		regionTypeArchitecturePropEnum = append(regionTypeArchitecturePropEnum, v)
	}
}

const (

	// RegionArchitectureX8664 captures enum value "x86_64"
	RegionArchitectureX8664 string = "x86_64"

	// RegionArchitectureArm64 captures enum value "arm64"
	RegionArchitectureArm64 string = "arm64"
)

// prop value enum
func (m *Region) validateArchitectureEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, regionTypeArchitecturePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Region) validateArchitecture(formats strfmt.Registry) error {
	if swag.IsZero(m.Architecture) { // not required
		return nil
	}

	// value enum
	if err := m.validateArchitectureEnum("architecture", "body", m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateZones(formats strfmt.Registry) error {

	if err := validate.Required("zones", "body", m.Zones); err != nil {
		return err
	}

	for i := 0; i < len(m.Zones); i++ {
		if swag.IsZero(m.Zones[i]) { // not required
			continue
		}

		if m.Zones[i] != nil {
			if err := m.Zones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this region based on the context it is used
func (m *Region) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatitude(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLongitude(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Region) contextValidateActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *Region) contextValidateLatitude(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "latitude", "body", float64(m.Latitude)); err != nil {
		return err
	}

	return nil
}

func (m *Region) contextValidateLongitude(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "longitude", "body", float64(m.Longitude)); err != nil {
		return err
	}

	return nil
}

func (m *Region) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Region) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", strfmt.UUID(m.UUID)); err != nil {
		return err
	}

	return nil
}

func (m *Region) contextValidateZones(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Zones); i++ {

		if m.Zones[i] != nil {
			if err := m.Zones[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zones" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("zones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Region) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Region) UnmarshalBinary(b []byte) error {
	var res Region
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
