// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TLSToggleParams Tls toggle params
//
// swagger:model TlsToggleParams
type TLSToggleParams struct {

	// allow insecure
	// Required: true
	AllowInsecure *bool `json:"allowInsecure"`

	// backup in progress
	BackupInProgress bool `json:"backupInProgress,omitempty"`

	// capability
	// Enum: [READ_ONLY EDITS_ALLOWED]
	Capability string `json:"capability,omitempty"`

	// client root c a
	// Required: true
	// Format: uuid
	ClientRootCA *strfmt.UUID `json:"clientRootCA"`

	// clusters
	// Required: true
	Clusters []*Cluster `json:"clusters"`

	// Amazon Resource Name (ARN) of the CMK
	CmkArn string `json:"cmkArn,omitempty"`

	// Communication ports
	CommunicationPorts *CommunicationPorts `json:"communicationPorts,omitempty"`

	// current cluster type
	// Enum: [PRIMARY ASYNC]
	CurrentClusterType string `json:"currentClusterType,omitempty"`

	// Device information
	DeviceInfo *DeviceInfo `json:"deviceInfo,omitempty"`

	// enable client to node encrypt
	// Required: true
	EnableClientToNodeEncrypt *bool `json:"enableClientToNodeEncrypt"`

	// enable node to node encrypt
	// Required: true
	EnableNodeToNodeEncrypt *bool `json:"enableNodeToNodeEncrypt"`

	// Encryption at rest configation
	EncryptionAtRestConfig *EncryptionAtRestConfig `json:"encryptionAtRestConfig,omitempty"`

	// Error message
	ErrorString string `json:"errorString,omitempty"`

	// Expected universe version
	ExpectedUniverseVersion int32 `json:"expectedUniverseVersion,omitempty"`

	// Extra dependencies
	ExtraDependencies *ExtraDependencies `json:"extraDependencies,omitempty"`

	// Whether this task has been tried before
	FirstTry bool `json:"firstTry,omitempty"`

	// imported state
	// Enum: [NONE STARTED MASTERS_ADDED TSERVERS_ADDED IMPORTED]
	ImportedState string `json:"importedState,omitempty"`

	// itest s3 package path
	ItestS3PackagePath string `json:"itestS3PackagePath,omitempty"`

	// kubernetes upgrade supported
	// Required: true
	KubernetesUpgradeSupported *bool `json:"kubernetesUpgradeSupported"`

	// next cluster index
	NextClusterIndex int32 `json:"nextClusterIndex,omitempty"`

	// Node details
	// Unique: true
	NodeDetailsSet []*NodeDetails `json:"nodeDetailsSet"`

	// Node exporter user
	NodeExporterUser string `json:"nodeExporterUser,omitempty"`

	// node prefix
	NodePrefix string `json:"nodePrefix,omitempty"`

	// nodes resize available
	NodesResizeAvailable bool `json:"nodesResizeAvailable,omitempty"`

	// Previous task UUID only if this task is a retry
	// Format: uuid
	PreviousTaskUUID strfmt.UUID `json:"previousTaskUUID,omitempty"`

	// remote package path
	RemotePackagePath string `json:"remotePackagePath,omitempty"`

	// reset a z config
	ResetAZConfig bool `json:"resetAZConfig,omitempty"`

	// root and client root c a same
	// Required: true
	RootAndClientRootCASame *bool `json:"rootAndClientRootCASame"`

	// root c a
	// Required: true
	// Format: uuid
	RootCA *strfmt.UUID `json:"rootCA"`

	// set txn table wait count flag
	SetTxnTableWaitCountFlag bool `json:"setTxnTableWaitCountFlag,omitempty"`

	// sleep after master restart millis
	// Required: true
	SleepAfterMasterRestartMillis *int32 `json:"sleepAfterMasterRestartMillis"`

	// sleep after t server restart millis
	// Required: true
	SleepAfterTServerRestartMillis *int32 `json:"sleepAfterTServerRestartMillis"`

	// The source universe's xcluster replication relationships
	// Read Only: true
	SourceXClusterConfigs []strfmt.UUID `json:"sourceXClusterConfigs"`

	// The target universe's xcluster replication relationships
	// Read Only: true
	TargetXClusterConfigs []strfmt.UUID `json:"targetXClusterConfigs"`

	// universe paused
	UniversePaused bool `json:"universePaused,omitempty"`

	// Associated universe UUID
	// Format: uuid
	UniverseUUID strfmt.UUID `json:"universeUUID,omitempty"`

	// update in progress
	UpdateInProgress bool `json:"updateInProgress,omitempty"`

	// update succeeded
	UpdateSucceeded bool `json:"updateSucceeded,omitempty"`

	// updating task
	// Enum: [CloudBootstrap CloudCleanup CreateCassandraTable CreateUniverse ReadOnlyClusterCreate ReadOnlyClusterDelete CreateKubernetesUniverse DestroyUniverse PauseUniverse ResumeUniverse DestroyKubernetesUniverse DeleteTable BackupUniverse RestoreBackup MultiTableBackup CreateBackup EditUniverse EditKubernetesUniverse ExternalScript KubernetesProvision ImportIntoTable UpgradeUniverse RestartUniverse SoftwareUpgrade SoftwareKubernetesUpgrade GFlagsUpgrade GFlagsKubernetesUpgrade CertsRotate CertsRotateKubernetesUpgrade TlsToggle VMImageUpgrade SystemdUpgrade CreateRootVolumes ReplaceRootVolume ChangeInstanceType PersistResizeNode PersistSystemdUpgrade UpdateNodeDetails UpgradeKubernetesUniverse DeleteNodeFromUniverse StopNodeInUniverse StartNodeInUniverse AddNodeToUniverse RemoveNodeFromUniverse ReleaseInstanceFromUniverse SetUniverseKey SetKubernetesUniverseKey CreateKMSConfig EditKMSConfig DeleteKMSConfig UpdateDiskSize StartMasterOnNode CreateXClusterConfig EditXClusterConfig DeleteXClusterConfig SyncXClusterConfig CreateSupportBundle AnsibleClusterServerCtl AnsibleConfigureServers AnsibleDestroyServer PauseServer ResumeServer AnsibleSetupServer AnsibleCreateServer PrecheckNode PrecheckNodeDetached AnsibleUpdateNodeInfo BulkImport ChangeMasterConfig ChangeAdminPassword CreateTable DeleteNode DeleteBackup DeleteBackupYb DeleteCustomerConfig DeleteCustomerStorageConfig UpdateNodeProcess DeleteTableFromUniverse LoadBalancerStateChange ModifyBlackList ManipulateDnsRecordTask RemoveUniverseEntry SetFlagInMemory SetNodeState SwamperTargetsFileUpdate UniverseUpdateSucceeded UpdateAndPersistGFlags UpdatePlacementInfo UpdateSoftwareVersion WaitForDataMove WaitForLeaderBlacklistCompletion WaitForFollowerLag WaitForLoadBalance WaitForMasterLeader WaitForServer WaitForTServerHeartBeats DeleteClusterFromUniverse InstanceActions WaitForServerReady RunExternalScript XClusterConfigSetup XClusterConfigSetStatus XClusterConfigModifyTables XClusterConfigRename XClusterConfigDelete XClusterConfigSync XClusterConfigUpdateMasterAddresses CloudAccessKeyCleanup CloudAccessKeySetup CloudInitializer CloudProviderCleanup CloudRegionCleanup CloudRegionSetup CloudSetup BackupTable BackupTableYb BackupUniverseKeys RestoreBackupYb RestoreUniverseKeys RestoreUniverseKeysYb WaitForLeadersOnPreferredOnly EnableEncryptionAtRest DisableEncryptionAtRest DestroyEncryptionAtRest KubernetesCommandExecutor KubernetesWaitForPod KubernetesCheckNumPod SetActiveUniverseKeys CopyEncryptionKeyFile WaitForEncryptionKeyInMemory UnivSetCertificate CreateAlertDefinitions ManageAlertDefinitions UniverseSetTlsParams UniverseUpdateRootCert ResetUniverseVersion DeleteCertificate SetNodeStatus CheckMasterLeader CheckMasters CheckTServers WaitForTServerHBs CreatePrometheusSwamperConfig PreflightNodeCheck RunYsqlUpgrade ResizeNode CheckMemory UpdateMountedDisks TransferXClusterCerts CreateTableSpacesInUniverse CreateTableSpaces ThirdpartySoftwareUpgrade MarkUniverseForHealthScriptReUpload UpdateUniverseTags]
	UpdatingTask string `json:"updatingTask,omitempty"`

	// updating task UUID
	// Format: uuid
	UpdatingTaskUUID strfmt.UUID `json:"updatingTaskUUID,omitempty"`

	// upgrade option
	// Required: true
	// Enum: [Rolling Non-Rolling Non-Restart]
	UpgradeOption *string `json:"upgradeOption"`

	// user a z selected
	UserAZSelected bool `json:"userAZSelected,omitempty"`

	// Previous software version
	YbPrevSoftwareVersion string `json:"ybPrevSoftwareVersion,omitempty"`
}

// Validate validates this Tls toggle params
func (m *TLSToggleParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowInsecure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommunicationPorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentClusterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableClientToNodeEncrypt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableNodeToNodeEncrypt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionAtRestConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportedState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesUpgradeSupported(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeDetailsSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootAndClientRootCASame(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootCA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterMasterRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepAfterTServerRestartMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetXClusterConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniverseUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatingTaskUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TLSToggleParams) validateAllowInsecure(formats strfmt.Registry) error {

	if err := validate.Required("allowInsecure", "body", m.AllowInsecure); err != nil {
		return err
	}

	return nil
}

var tlsToggleParamsTypeCapabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READ_ONLY","EDITS_ALLOWED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tlsToggleParamsTypeCapabilityPropEnum = append(tlsToggleParamsTypeCapabilityPropEnum, v)
	}
}

const (

	// TLSToggleParamsCapabilityREADONLY captures enum value "READ_ONLY"
	TLSToggleParamsCapabilityREADONLY string = "READ_ONLY"

	// TLSToggleParamsCapabilityEDITSALLOWED captures enum value "EDITS_ALLOWED"
	TLSToggleParamsCapabilityEDITSALLOWED string = "EDITS_ALLOWED"
)

// prop value enum
func (m *TLSToggleParams) validateCapabilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tlsToggleParamsTypeCapabilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TLSToggleParams) validateCapability(formats strfmt.Registry) error {
	if swag.IsZero(m.Capability) { // not required
		return nil
	}

	// value enum
	if err := m.validateCapabilityEnum("capability", "body", m.Capability); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateClientRootCA(formats strfmt.Registry) error {

	if err := validate.Required("clientRootCA", "body", m.ClientRootCA); err != nil {
		return err
	}

	if err := validate.FormatOf("clientRootCA", "body", "uuid", m.ClientRootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateClusters(formats strfmt.Registry) error {

	if err := validate.Required("clusters", "body", m.Clusters); err != nil {
		return err
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TLSToggleParams) validateCommunicationPorts(formats strfmt.Registry) error {
	if swag.IsZero(m.CommunicationPorts) { // not required
		return nil
	}

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

var tlsToggleParamsTypeCurrentClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRIMARY","ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tlsToggleParamsTypeCurrentClusterTypePropEnum = append(tlsToggleParamsTypeCurrentClusterTypePropEnum, v)
	}
}

const (

	// TLSToggleParamsCurrentClusterTypePRIMARY captures enum value "PRIMARY"
	TLSToggleParamsCurrentClusterTypePRIMARY string = "PRIMARY"

	// TLSToggleParamsCurrentClusterTypeASYNC captures enum value "ASYNC"
	TLSToggleParamsCurrentClusterTypeASYNC string = "ASYNC"
)

// prop value enum
func (m *TLSToggleParams) validateCurrentClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tlsToggleParamsTypeCurrentClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TLSToggleParams) validateCurrentClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrentClusterTypeEnum("currentClusterType", "body", m.CurrentClusterType); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateDeviceInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *TLSToggleParams) validateEnableClientToNodeEncrypt(formats strfmt.Registry) error {

	if err := validate.Required("enableClientToNodeEncrypt", "body", m.EnableClientToNodeEncrypt); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateEnableNodeToNodeEncrypt(formats strfmt.Registry) error {

	if err := validate.Required("enableNodeToNodeEncrypt", "body", m.EnableNodeToNodeEncrypt); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateEncryptionAtRestConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionAtRestConfig) { // not required
		return nil
	}

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *TLSToggleParams) validateExtraDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtraDependencies) { // not required
		return nil
	}

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

var tlsToggleParamsTypeImportedStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTED","MASTERS_ADDED","TSERVERS_ADDED","IMPORTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tlsToggleParamsTypeImportedStatePropEnum = append(tlsToggleParamsTypeImportedStatePropEnum, v)
	}
}

const (

	// TLSToggleParamsImportedStateNONE captures enum value "NONE"
	TLSToggleParamsImportedStateNONE string = "NONE"

	// TLSToggleParamsImportedStateSTARTED captures enum value "STARTED"
	TLSToggleParamsImportedStateSTARTED string = "STARTED"

	// TLSToggleParamsImportedStateMASTERSADDED captures enum value "MASTERS_ADDED"
	TLSToggleParamsImportedStateMASTERSADDED string = "MASTERS_ADDED"

	// TLSToggleParamsImportedStateTSERVERSADDED captures enum value "TSERVERS_ADDED"
	TLSToggleParamsImportedStateTSERVERSADDED string = "TSERVERS_ADDED"

	// TLSToggleParamsImportedStateIMPORTED captures enum value "IMPORTED"
	TLSToggleParamsImportedStateIMPORTED string = "IMPORTED"
)

// prop value enum
func (m *TLSToggleParams) validateImportedStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tlsToggleParamsTypeImportedStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TLSToggleParams) validateImportedState(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportedState) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportedStateEnum("importedState", "body", m.ImportedState); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateKubernetesUpgradeSupported(formats strfmt.Registry) error {

	if err := validate.Required("kubernetesUpgradeSupported", "body", m.KubernetesUpgradeSupported); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateNodeDetailsSet(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeDetailsSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("nodeDetailsSet", "body", m.NodeDetailsSet); err != nil {
		return err
	}

	for i := 0; i < len(m.NodeDetailsSet); i++ {
		if swag.IsZero(m.NodeDetailsSet[i]) { // not required
			continue
		}

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TLSToggleParams) validatePreviousTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("previousTaskUUID", "body", "uuid", m.PreviousTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateRootAndClientRootCASame(formats strfmt.Registry) error {

	if err := validate.Required("rootAndClientRootCASame", "body", m.RootAndClientRootCASame); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateRootCA(formats strfmt.Registry) error {

	if err := validate.Required("rootCA", "body", m.RootCA); err != nil {
		return err
	}

	if err := validate.FormatOf("rootCA", "body", "uuid", m.RootCA.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateSleepAfterMasterRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterMasterRestartMillis", "body", m.SleepAfterMasterRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateSleepAfterTServerRestartMillis(formats strfmt.Registry) error {

	if err := validate.Required("sleepAfterTServerRestartMillis", "body", m.SleepAfterTServerRestartMillis); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateSourceXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.SourceXClusterConfigs); i++ {

		if err := validate.FormatOf("sourceXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.SourceXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *TLSToggleParams) validateTargetXClusterConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetXClusterConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetXClusterConfigs); i++ {

		if err := validate.FormatOf("targetXClusterConfigs"+"."+strconv.Itoa(i), "body", "uuid", m.TargetXClusterConfigs[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *TLSToggleParams) validateUniverseUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UniverseUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("universeUUID", "body", "uuid", m.UniverseUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var tlsToggleParamsTypeUpdatingTaskPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CloudBootstrap","CloudCleanup","CreateCassandraTable","CreateUniverse","ReadOnlyClusterCreate","ReadOnlyClusterDelete","CreateKubernetesUniverse","DestroyUniverse","PauseUniverse","ResumeUniverse","DestroyKubernetesUniverse","DeleteTable","BackupUniverse","RestoreBackup","MultiTableBackup","CreateBackup","EditUniverse","EditKubernetesUniverse","ExternalScript","KubernetesProvision","ImportIntoTable","UpgradeUniverse","RestartUniverse","SoftwareUpgrade","SoftwareKubernetesUpgrade","GFlagsUpgrade","GFlagsKubernetesUpgrade","CertsRotate","CertsRotateKubernetesUpgrade","TlsToggle","VMImageUpgrade","SystemdUpgrade","CreateRootVolumes","ReplaceRootVolume","ChangeInstanceType","PersistResizeNode","PersistSystemdUpgrade","UpdateNodeDetails","UpgradeKubernetesUniverse","DeleteNodeFromUniverse","StopNodeInUniverse","StartNodeInUniverse","AddNodeToUniverse","RemoveNodeFromUniverse","ReleaseInstanceFromUniverse","SetUniverseKey","SetKubernetesUniverseKey","CreateKMSConfig","EditKMSConfig","DeleteKMSConfig","UpdateDiskSize","StartMasterOnNode","CreateXClusterConfig","EditXClusterConfig","DeleteXClusterConfig","SyncXClusterConfig","CreateSupportBundle","AnsibleClusterServerCtl","AnsibleConfigureServers","AnsibleDestroyServer","PauseServer","ResumeServer","AnsibleSetupServer","AnsibleCreateServer","PrecheckNode","PrecheckNodeDetached","AnsibleUpdateNodeInfo","BulkImport","ChangeMasterConfig","ChangeAdminPassword","CreateTable","DeleteNode","DeleteBackup","DeleteBackupYb","DeleteCustomerConfig","DeleteCustomerStorageConfig","UpdateNodeProcess","DeleteTableFromUniverse","LoadBalancerStateChange","ModifyBlackList","ManipulateDnsRecordTask","RemoveUniverseEntry","SetFlagInMemory","SetNodeState","SwamperTargetsFileUpdate","UniverseUpdateSucceeded","UpdateAndPersistGFlags","UpdatePlacementInfo","UpdateSoftwareVersion","WaitForDataMove","WaitForLeaderBlacklistCompletion","WaitForFollowerLag","WaitForLoadBalance","WaitForMasterLeader","WaitForServer","WaitForTServerHeartBeats","DeleteClusterFromUniverse","InstanceActions","WaitForServerReady","RunExternalScript","XClusterConfigSetup","XClusterConfigSetStatus","XClusterConfigModifyTables","XClusterConfigRename","XClusterConfigDelete","XClusterConfigSync","XClusterConfigUpdateMasterAddresses","CloudAccessKeyCleanup","CloudAccessKeySetup","CloudInitializer","CloudProviderCleanup","CloudRegionCleanup","CloudRegionSetup","CloudSetup","BackupTable","BackupTableYb","BackupUniverseKeys","RestoreBackupYb","RestoreUniverseKeys","RestoreUniverseKeysYb","WaitForLeadersOnPreferredOnly","EnableEncryptionAtRest","DisableEncryptionAtRest","DestroyEncryptionAtRest","KubernetesCommandExecutor","KubernetesWaitForPod","KubernetesCheckNumPod","SetActiveUniverseKeys","CopyEncryptionKeyFile","WaitForEncryptionKeyInMemory","UnivSetCertificate","CreateAlertDefinitions","ManageAlertDefinitions","UniverseSetTlsParams","UniverseUpdateRootCert","ResetUniverseVersion","DeleteCertificate","SetNodeStatus","CheckMasterLeader","CheckMasters","CheckTServers","WaitForTServerHBs","CreatePrometheusSwamperConfig","PreflightNodeCheck","RunYsqlUpgrade","ResizeNode","CheckMemory","UpdateMountedDisks","TransferXClusterCerts","CreateTableSpacesInUniverse","CreateTableSpaces","ThirdpartySoftwareUpgrade","MarkUniverseForHealthScriptReUpload","UpdateUniverseTags"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tlsToggleParamsTypeUpdatingTaskPropEnum = append(tlsToggleParamsTypeUpdatingTaskPropEnum, v)
	}
}

const (

	// TLSToggleParamsUpdatingTaskCloudBootstrap captures enum value "CloudBootstrap"
	TLSToggleParamsUpdatingTaskCloudBootstrap string = "CloudBootstrap"

	// TLSToggleParamsUpdatingTaskCloudCleanup captures enum value "CloudCleanup"
	TLSToggleParamsUpdatingTaskCloudCleanup string = "CloudCleanup"

	// TLSToggleParamsUpdatingTaskCreateCassandraTable captures enum value "CreateCassandraTable"
	TLSToggleParamsUpdatingTaskCreateCassandraTable string = "CreateCassandraTable"

	// TLSToggleParamsUpdatingTaskCreateUniverse captures enum value "CreateUniverse"
	TLSToggleParamsUpdatingTaskCreateUniverse string = "CreateUniverse"

	// TLSToggleParamsUpdatingTaskReadOnlyClusterCreate captures enum value "ReadOnlyClusterCreate"
	TLSToggleParamsUpdatingTaskReadOnlyClusterCreate string = "ReadOnlyClusterCreate"

	// TLSToggleParamsUpdatingTaskReadOnlyClusterDelete captures enum value "ReadOnlyClusterDelete"
	TLSToggleParamsUpdatingTaskReadOnlyClusterDelete string = "ReadOnlyClusterDelete"

	// TLSToggleParamsUpdatingTaskCreateKubernetesUniverse captures enum value "CreateKubernetesUniverse"
	TLSToggleParamsUpdatingTaskCreateKubernetesUniverse string = "CreateKubernetesUniverse"

	// TLSToggleParamsUpdatingTaskDestroyUniverse captures enum value "DestroyUniverse"
	TLSToggleParamsUpdatingTaskDestroyUniverse string = "DestroyUniverse"

	// TLSToggleParamsUpdatingTaskPauseUniverse captures enum value "PauseUniverse"
	TLSToggleParamsUpdatingTaskPauseUniverse string = "PauseUniverse"

	// TLSToggleParamsUpdatingTaskResumeUniverse captures enum value "ResumeUniverse"
	TLSToggleParamsUpdatingTaskResumeUniverse string = "ResumeUniverse"

	// TLSToggleParamsUpdatingTaskDestroyKubernetesUniverse captures enum value "DestroyKubernetesUniverse"
	TLSToggleParamsUpdatingTaskDestroyKubernetesUniverse string = "DestroyKubernetesUniverse"

	// TLSToggleParamsUpdatingTaskDeleteTable captures enum value "DeleteTable"
	TLSToggleParamsUpdatingTaskDeleteTable string = "DeleteTable"

	// TLSToggleParamsUpdatingTaskBackupUniverse captures enum value "BackupUniverse"
	TLSToggleParamsUpdatingTaskBackupUniverse string = "BackupUniverse"

	// TLSToggleParamsUpdatingTaskRestoreBackup captures enum value "RestoreBackup"
	TLSToggleParamsUpdatingTaskRestoreBackup string = "RestoreBackup"

	// TLSToggleParamsUpdatingTaskMultiTableBackup captures enum value "MultiTableBackup"
	TLSToggleParamsUpdatingTaskMultiTableBackup string = "MultiTableBackup"

	// TLSToggleParamsUpdatingTaskCreateBackup captures enum value "CreateBackup"
	TLSToggleParamsUpdatingTaskCreateBackup string = "CreateBackup"

	// TLSToggleParamsUpdatingTaskEditUniverse captures enum value "EditUniverse"
	TLSToggleParamsUpdatingTaskEditUniverse string = "EditUniverse"

	// TLSToggleParamsUpdatingTaskEditKubernetesUniverse captures enum value "EditKubernetesUniverse"
	TLSToggleParamsUpdatingTaskEditKubernetesUniverse string = "EditKubernetesUniverse"

	// TLSToggleParamsUpdatingTaskExternalScript captures enum value "ExternalScript"
	TLSToggleParamsUpdatingTaskExternalScript string = "ExternalScript"

	// TLSToggleParamsUpdatingTaskKubernetesProvision captures enum value "KubernetesProvision"
	TLSToggleParamsUpdatingTaskKubernetesProvision string = "KubernetesProvision"

	// TLSToggleParamsUpdatingTaskImportIntoTable captures enum value "ImportIntoTable"
	TLSToggleParamsUpdatingTaskImportIntoTable string = "ImportIntoTable"

	// TLSToggleParamsUpdatingTaskUpgradeUniverse captures enum value "UpgradeUniverse"
	TLSToggleParamsUpdatingTaskUpgradeUniverse string = "UpgradeUniverse"

	// TLSToggleParamsUpdatingTaskRestartUniverse captures enum value "RestartUniverse"
	TLSToggleParamsUpdatingTaskRestartUniverse string = "RestartUniverse"

	// TLSToggleParamsUpdatingTaskSoftwareUpgrade captures enum value "SoftwareUpgrade"
	TLSToggleParamsUpdatingTaskSoftwareUpgrade string = "SoftwareUpgrade"

	// TLSToggleParamsUpdatingTaskSoftwareKubernetesUpgrade captures enum value "SoftwareKubernetesUpgrade"
	TLSToggleParamsUpdatingTaskSoftwareKubernetesUpgrade string = "SoftwareKubernetesUpgrade"

	// TLSToggleParamsUpdatingTaskGFlagsUpgrade captures enum value "GFlagsUpgrade"
	TLSToggleParamsUpdatingTaskGFlagsUpgrade string = "GFlagsUpgrade"

	// TLSToggleParamsUpdatingTaskGFlagsKubernetesUpgrade captures enum value "GFlagsKubernetesUpgrade"
	TLSToggleParamsUpdatingTaskGFlagsKubernetesUpgrade string = "GFlagsKubernetesUpgrade"

	// TLSToggleParamsUpdatingTaskCertsRotate captures enum value "CertsRotate"
	TLSToggleParamsUpdatingTaskCertsRotate string = "CertsRotate"

	// TLSToggleParamsUpdatingTaskCertsRotateKubernetesUpgrade captures enum value "CertsRotateKubernetesUpgrade"
	TLSToggleParamsUpdatingTaskCertsRotateKubernetesUpgrade string = "CertsRotateKubernetesUpgrade"

	// TLSToggleParamsUpdatingTaskTLSToggle captures enum value "TlsToggle"
	TLSToggleParamsUpdatingTaskTLSToggle string = "TlsToggle"

	// TLSToggleParamsUpdatingTaskVMImageUpgrade captures enum value "VMImageUpgrade"
	TLSToggleParamsUpdatingTaskVMImageUpgrade string = "VMImageUpgrade"

	// TLSToggleParamsUpdatingTaskSystemdUpgrade captures enum value "SystemdUpgrade"
	TLSToggleParamsUpdatingTaskSystemdUpgrade string = "SystemdUpgrade"

	// TLSToggleParamsUpdatingTaskCreateRootVolumes captures enum value "CreateRootVolumes"
	TLSToggleParamsUpdatingTaskCreateRootVolumes string = "CreateRootVolumes"

	// TLSToggleParamsUpdatingTaskReplaceRootVolume captures enum value "ReplaceRootVolume"
	TLSToggleParamsUpdatingTaskReplaceRootVolume string = "ReplaceRootVolume"

	// TLSToggleParamsUpdatingTaskChangeInstanceType captures enum value "ChangeInstanceType"
	TLSToggleParamsUpdatingTaskChangeInstanceType string = "ChangeInstanceType"

	// TLSToggleParamsUpdatingTaskPersistResizeNode captures enum value "PersistResizeNode"
	TLSToggleParamsUpdatingTaskPersistResizeNode string = "PersistResizeNode"

	// TLSToggleParamsUpdatingTaskPersistSystemdUpgrade captures enum value "PersistSystemdUpgrade"
	TLSToggleParamsUpdatingTaskPersistSystemdUpgrade string = "PersistSystemdUpgrade"

	// TLSToggleParamsUpdatingTaskUpdateNodeDetails captures enum value "UpdateNodeDetails"
	TLSToggleParamsUpdatingTaskUpdateNodeDetails string = "UpdateNodeDetails"

	// TLSToggleParamsUpdatingTaskUpgradeKubernetesUniverse captures enum value "UpgradeKubernetesUniverse"
	TLSToggleParamsUpdatingTaskUpgradeKubernetesUniverse string = "UpgradeKubernetesUniverse"

	// TLSToggleParamsUpdatingTaskDeleteNodeFromUniverse captures enum value "DeleteNodeFromUniverse"
	TLSToggleParamsUpdatingTaskDeleteNodeFromUniverse string = "DeleteNodeFromUniverse"

	// TLSToggleParamsUpdatingTaskStopNodeInUniverse captures enum value "StopNodeInUniverse"
	TLSToggleParamsUpdatingTaskStopNodeInUniverse string = "StopNodeInUniverse"

	// TLSToggleParamsUpdatingTaskStartNodeInUniverse captures enum value "StartNodeInUniverse"
	TLSToggleParamsUpdatingTaskStartNodeInUniverse string = "StartNodeInUniverse"

	// TLSToggleParamsUpdatingTaskAddNodeToUniverse captures enum value "AddNodeToUniverse"
	TLSToggleParamsUpdatingTaskAddNodeToUniverse string = "AddNodeToUniverse"

	// TLSToggleParamsUpdatingTaskRemoveNodeFromUniverse captures enum value "RemoveNodeFromUniverse"
	TLSToggleParamsUpdatingTaskRemoveNodeFromUniverse string = "RemoveNodeFromUniverse"

	// TLSToggleParamsUpdatingTaskReleaseInstanceFromUniverse captures enum value "ReleaseInstanceFromUniverse"
	TLSToggleParamsUpdatingTaskReleaseInstanceFromUniverse string = "ReleaseInstanceFromUniverse"

	// TLSToggleParamsUpdatingTaskSetUniverseKey captures enum value "SetUniverseKey"
	TLSToggleParamsUpdatingTaskSetUniverseKey string = "SetUniverseKey"

	// TLSToggleParamsUpdatingTaskSetKubernetesUniverseKey captures enum value "SetKubernetesUniverseKey"
	TLSToggleParamsUpdatingTaskSetKubernetesUniverseKey string = "SetKubernetesUniverseKey"

	// TLSToggleParamsUpdatingTaskCreateKMSConfig captures enum value "CreateKMSConfig"
	TLSToggleParamsUpdatingTaskCreateKMSConfig string = "CreateKMSConfig"

	// TLSToggleParamsUpdatingTaskEditKMSConfig captures enum value "EditKMSConfig"
	TLSToggleParamsUpdatingTaskEditKMSConfig string = "EditKMSConfig"

	// TLSToggleParamsUpdatingTaskDeleteKMSConfig captures enum value "DeleteKMSConfig"
	TLSToggleParamsUpdatingTaskDeleteKMSConfig string = "DeleteKMSConfig"

	// TLSToggleParamsUpdatingTaskUpdateDiskSize captures enum value "UpdateDiskSize"
	TLSToggleParamsUpdatingTaskUpdateDiskSize string = "UpdateDiskSize"

	// TLSToggleParamsUpdatingTaskStartMasterOnNode captures enum value "StartMasterOnNode"
	TLSToggleParamsUpdatingTaskStartMasterOnNode string = "StartMasterOnNode"

	// TLSToggleParamsUpdatingTaskCreateXClusterConfig captures enum value "CreateXClusterConfig"
	TLSToggleParamsUpdatingTaskCreateXClusterConfig string = "CreateXClusterConfig"

	// TLSToggleParamsUpdatingTaskEditXClusterConfig captures enum value "EditXClusterConfig"
	TLSToggleParamsUpdatingTaskEditXClusterConfig string = "EditXClusterConfig"

	// TLSToggleParamsUpdatingTaskDeleteXClusterConfig captures enum value "DeleteXClusterConfig"
	TLSToggleParamsUpdatingTaskDeleteXClusterConfig string = "DeleteXClusterConfig"

	// TLSToggleParamsUpdatingTaskSyncXClusterConfig captures enum value "SyncXClusterConfig"
	TLSToggleParamsUpdatingTaskSyncXClusterConfig string = "SyncXClusterConfig"

	// TLSToggleParamsUpdatingTaskCreateSupportBundle captures enum value "CreateSupportBundle"
	TLSToggleParamsUpdatingTaskCreateSupportBundle string = "CreateSupportBundle"

	// TLSToggleParamsUpdatingTaskAnsibleClusterServerCtl captures enum value "AnsibleClusterServerCtl"
	TLSToggleParamsUpdatingTaskAnsibleClusterServerCtl string = "AnsibleClusterServerCtl"

	// TLSToggleParamsUpdatingTaskAnsibleConfigureServers captures enum value "AnsibleConfigureServers"
	TLSToggleParamsUpdatingTaskAnsibleConfigureServers string = "AnsibleConfigureServers"

	// TLSToggleParamsUpdatingTaskAnsibleDestroyServer captures enum value "AnsibleDestroyServer"
	TLSToggleParamsUpdatingTaskAnsibleDestroyServer string = "AnsibleDestroyServer"

	// TLSToggleParamsUpdatingTaskPauseServer captures enum value "PauseServer"
	TLSToggleParamsUpdatingTaskPauseServer string = "PauseServer"

	// TLSToggleParamsUpdatingTaskResumeServer captures enum value "ResumeServer"
	TLSToggleParamsUpdatingTaskResumeServer string = "ResumeServer"

	// TLSToggleParamsUpdatingTaskAnsibleSetupServer captures enum value "AnsibleSetupServer"
	TLSToggleParamsUpdatingTaskAnsibleSetupServer string = "AnsibleSetupServer"

	// TLSToggleParamsUpdatingTaskAnsibleCreateServer captures enum value "AnsibleCreateServer"
	TLSToggleParamsUpdatingTaskAnsibleCreateServer string = "AnsibleCreateServer"

	// TLSToggleParamsUpdatingTaskPrecheckNode captures enum value "PrecheckNode"
	TLSToggleParamsUpdatingTaskPrecheckNode string = "PrecheckNode"

	// TLSToggleParamsUpdatingTaskPrecheckNodeDetached captures enum value "PrecheckNodeDetached"
	TLSToggleParamsUpdatingTaskPrecheckNodeDetached string = "PrecheckNodeDetached"

	// TLSToggleParamsUpdatingTaskAnsibleUpdateNodeInfo captures enum value "AnsibleUpdateNodeInfo"
	TLSToggleParamsUpdatingTaskAnsibleUpdateNodeInfo string = "AnsibleUpdateNodeInfo"

	// TLSToggleParamsUpdatingTaskBulkImport captures enum value "BulkImport"
	TLSToggleParamsUpdatingTaskBulkImport string = "BulkImport"

	// TLSToggleParamsUpdatingTaskChangeMasterConfig captures enum value "ChangeMasterConfig"
	TLSToggleParamsUpdatingTaskChangeMasterConfig string = "ChangeMasterConfig"

	// TLSToggleParamsUpdatingTaskChangeAdminPassword captures enum value "ChangeAdminPassword"
	TLSToggleParamsUpdatingTaskChangeAdminPassword string = "ChangeAdminPassword"

	// TLSToggleParamsUpdatingTaskCreateTable captures enum value "CreateTable"
	TLSToggleParamsUpdatingTaskCreateTable string = "CreateTable"

	// TLSToggleParamsUpdatingTaskDeleteNode captures enum value "DeleteNode"
	TLSToggleParamsUpdatingTaskDeleteNode string = "DeleteNode"

	// TLSToggleParamsUpdatingTaskDeleteBackup captures enum value "DeleteBackup"
	TLSToggleParamsUpdatingTaskDeleteBackup string = "DeleteBackup"

	// TLSToggleParamsUpdatingTaskDeleteBackupYb captures enum value "DeleteBackupYb"
	TLSToggleParamsUpdatingTaskDeleteBackupYb string = "DeleteBackupYb"

	// TLSToggleParamsUpdatingTaskDeleteCustomerConfig captures enum value "DeleteCustomerConfig"
	TLSToggleParamsUpdatingTaskDeleteCustomerConfig string = "DeleteCustomerConfig"

	// TLSToggleParamsUpdatingTaskDeleteCustomerStorageConfig captures enum value "DeleteCustomerStorageConfig"
	TLSToggleParamsUpdatingTaskDeleteCustomerStorageConfig string = "DeleteCustomerStorageConfig"

	// TLSToggleParamsUpdatingTaskUpdateNodeProcess captures enum value "UpdateNodeProcess"
	TLSToggleParamsUpdatingTaskUpdateNodeProcess string = "UpdateNodeProcess"

	// TLSToggleParamsUpdatingTaskDeleteTableFromUniverse captures enum value "DeleteTableFromUniverse"
	TLSToggleParamsUpdatingTaskDeleteTableFromUniverse string = "DeleteTableFromUniverse"

	// TLSToggleParamsUpdatingTaskLoadBalancerStateChange captures enum value "LoadBalancerStateChange"
	TLSToggleParamsUpdatingTaskLoadBalancerStateChange string = "LoadBalancerStateChange"

	// TLSToggleParamsUpdatingTaskModifyBlackList captures enum value "ModifyBlackList"
	TLSToggleParamsUpdatingTaskModifyBlackList string = "ModifyBlackList"

	// TLSToggleParamsUpdatingTaskManipulateDNSRecordTask captures enum value "ManipulateDnsRecordTask"
	TLSToggleParamsUpdatingTaskManipulateDNSRecordTask string = "ManipulateDnsRecordTask"

	// TLSToggleParamsUpdatingTaskRemoveUniverseEntry captures enum value "RemoveUniverseEntry"
	TLSToggleParamsUpdatingTaskRemoveUniverseEntry string = "RemoveUniverseEntry"

	// TLSToggleParamsUpdatingTaskSetFlagInMemory captures enum value "SetFlagInMemory"
	TLSToggleParamsUpdatingTaskSetFlagInMemory string = "SetFlagInMemory"

	// TLSToggleParamsUpdatingTaskSetNodeState captures enum value "SetNodeState"
	TLSToggleParamsUpdatingTaskSetNodeState string = "SetNodeState"

	// TLSToggleParamsUpdatingTaskSwamperTargetsFileUpdate captures enum value "SwamperTargetsFileUpdate"
	TLSToggleParamsUpdatingTaskSwamperTargetsFileUpdate string = "SwamperTargetsFileUpdate"

	// TLSToggleParamsUpdatingTaskUniverseUpdateSucceeded captures enum value "UniverseUpdateSucceeded"
	TLSToggleParamsUpdatingTaskUniverseUpdateSucceeded string = "UniverseUpdateSucceeded"

	// TLSToggleParamsUpdatingTaskUpdateAndPersistGFlags captures enum value "UpdateAndPersistGFlags"
	TLSToggleParamsUpdatingTaskUpdateAndPersistGFlags string = "UpdateAndPersistGFlags"

	// TLSToggleParamsUpdatingTaskUpdatePlacementInfo captures enum value "UpdatePlacementInfo"
	TLSToggleParamsUpdatingTaskUpdatePlacementInfo string = "UpdatePlacementInfo"

	// TLSToggleParamsUpdatingTaskUpdateSoftwareVersion captures enum value "UpdateSoftwareVersion"
	TLSToggleParamsUpdatingTaskUpdateSoftwareVersion string = "UpdateSoftwareVersion"

	// TLSToggleParamsUpdatingTaskWaitForDataMove captures enum value "WaitForDataMove"
	TLSToggleParamsUpdatingTaskWaitForDataMove string = "WaitForDataMove"

	// TLSToggleParamsUpdatingTaskWaitForLeaderBlacklistCompletion captures enum value "WaitForLeaderBlacklistCompletion"
	TLSToggleParamsUpdatingTaskWaitForLeaderBlacklistCompletion string = "WaitForLeaderBlacklistCompletion"

	// TLSToggleParamsUpdatingTaskWaitForFollowerLag captures enum value "WaitForFollowerLag"
	TLSToggleParamsUpdatingTaskWaitForFollowerLag string = "WaitForFollowerLag"

	// TLSToggleParamsUpdatingTaskWaitForLoadBalance captures enum value "WaitForLoadBalance"
	TLSToggleParamsUpdatingTaskWaitForLoadBalance string = "WaitForLoadBalance"

	// TLSToggleParamsUpdatingTaskWaitForMasterLeader captures enum value "WaitForMasterLeader"
	TLSToggleParamsUpdatingTaskWaitForMasterLeader string = "WaitForMasterLeader"

	// TLSToggleParamsUpdatingTaskWaitForServer captures enum value "WaitForServer"
	TLSToggleParamsUpdatingTaskWaitForServer string = "WaitForServer"

	// TLSToggleParamsUpdatingTaskWaitForTServerHeartBeats captures enum value "WaitForTServerHeartBeats"
	TLSToggleParamsUpdatingTaskWaitForTServerHeartBeats string = "WaitForTServerHeartBeats"

	// TLSToggleParamsUpdatingTaskDeleteClusterFromUniverse captures enum value "DeleteClusterFromUniverse"
	TLSToggleParamsUpdatingTaskDeleteClusterFromUniverse string = "DeleteClusterFromUniverse"

	// TLSToggleParamsUpdatingTaskInstanceActions captures enum value "InstanceActions"
	TLSToggleParamsUpdatingTaskInstanceActions string = "InstanceActions"

	// TLSToggleParamsUpdatingTaskWaitForServerReady captures enum value "WaitForServerReady"
	TLSToggleParamsUpdatingTaskWaitForServerReady string = "WaitForServerReady"

	// TLSToggleParamsUpdatingTaskRunExternalScript captures enum value "RunExternalScript"
	TLSToggleParamsUpdatingTaskRunExternalScript string = "RunExternalScript"

	// TLSToggleParamsUpdatingTaskXClusterConfigSetup captures enum value "XClusterConfigSetup"
	TLSToggleParamsUpdatingTaskXClusterConfigSetup string = "XClusterConfigSetup"

	// TLSToggleParamsUpdatingTaskXClusterConfigSetStatus captures enum value "XClusterConfigSetStatus"
	TLSToggleParamsUpdatingTaskXClusterConfigSetStatus string = "XClusterConfigSetStatus"

	// TLSToggleParamsUpdatingTaskXClusterConfigModifyTables captures enum value "XClusterConfigModifyTables"
	TLSToggleParamsUpdatingTaskXClusterConfigModifyTables string = "XClusterConfigModifyTables"

	// TLSToggleParamsUpdatingTaskXClusterConfigRename captures enum value "XClusterConfigRename"
	TLSToggleParamsUpdatingTaskXClusterConfigRename string = "XClusterConfigRename"

	// TLSToggleParamsUpdatingTaskXClusterConfigDelete captures enum value "XClusterConfigDelete"
	TLSToggleParamsUpdatingTaskXClusterConfigDelete string = "XClusterConfigDelete"

	// TLSToggleParamsUpdatingTaskXClusterConfigSync captures enum value "XClusterConfigSync"
	TLSToggleParamsUpdatingTaskXClusterConfigSync string = "XClusterConfigSync"

	// TLSToggleParamsUpdatingTaskXClusterConfigUpdateMasterAddresses captures enum value "XClusterConfigUpdateMasterAddresses"
	TLSToggleParamsUpdatingTaskXClusterConfigUpdateMasterAddresses string = "XClusterConfigUpdateMasterAddresses"

	// TLSToggleParamsUpdatingTaskCloudAccessKeyCleanup captures enum value "CloudAccessKeyCleanup"
	TLSToggleParamsUpdatingTaskCloudAccessKeyCleanup string = "CloudAccessKeyCleanup"

	// TLSToggleParamsUpdatingTaskCloudAccessKeySetup captures enum value "CloudAccessKeySetup"
	TLSToggleParamsUpdatingTaskCloudAccessKeySetup string = "CloudAccessKeySetup"

	// TLSToggleParamsUpdatingTaskCloudInitializer captures enum value "CloudInitializer"
	TLSToggleParamsUpdatingTaskCloudInitializer string = "CloudInitializer"

	// TLSToggleParamsUpdatingTaskCloudProviderCleanup captures enum value "CloudProviderCleanup"
	TLSToggleParamsUpdatingTaskCloudProviderCleanup string = "CloudProviderCleanup"

	// TLSToggleParamsUpdatingTaskCloudRegionCleanup captures enum value "CloudRegionCleanup"
	TLSToggleParamsUpdatingTaskCloudRegionCleanup string = "CloudRegionCleanup"

	// TLSToggleParamsUpdatingTaskCloudRegionSetup captures enum value "CloudRegionSetup"
	TLSToggleParamsUpdatingTaskCloudRegionSetup string = "CloudRegionSetup"

	// TLSToggleParamsUpdatingTaskCloudSetup captures enum value "CloudSetup"
	TLSToggleParamsUpdatingTaskCloudSetup string = "CloudSetup"

	// TLSToggleParamsUpdatingTaskBackupTable captures enum value "BackupTable"
	TLSToggleParamsUpdatingTaskBackupTable string = "BackupTable"

	// TLSToggleParamsUpdatingTaskBackupTableYb captures enum value "BackupTableYb"
	TLSToggleParamsUpdatingTaskBackupTableYb string = "BackupTableYb"

	// TLSToggleParamsUpdatingTaskBackupUniverseKeys captures enum value "BackupUniverseKeys"
	TLSToggleParamsUpdatingTaskBackupUniverseKeys string = "BackupUniverseKeys"

	// TLSToggleParamsUpdatingTaskRestoreBackupYb captures enum value "RestoreBackupYb"
	TLSToggleParamsUpdatingTaskRestoreBackupYb string = "RestoreBackupYb"

	// TLSToggleParamsUpdatingTaskRestoreUniverseKeys captures enum value "RestoreUniverseKeys"
	TLSToggleParamsUpdatingTaskRestoreUniverseKeys string = "RestoreUniverseKeys"

	// TLSToggleParamsUpdatingTaskRestoreUniverseKeysYb captures enum value "RestoreUniverseKeysYb"
	TLSToggleParamsUpdatingTaskRestoreUniverseKeysYb string = "RestoreUniverseKeysYb"

	// TLSToggleParamsUpdatingTaskWaitForLeadersOnPreferredOnly captures enum value "WaitForLeadersOnPreferredOnly"
	TLSToggleParamsUpdatingTaskWaitForLeadersOnPreferredOnly string = "WaitForLeadersOnPreferredOnly"

	// TLSToggleParamsUpdatingTaskEnableEncryptionAtRest captures enum value "EnableEncryptionAtRest"
	TLSToggleParamsUpdatingTaskEnableEncryptionAtRest string = "EnableEncryptionAtRest"

	// TLSToggleParamsUpdatingTaskDisableEncryptionAtRest captures enum value "DisableEncryptionAtRest"
	TLSToggleParamsUpdatingTaskDisableEncryptionAtRest string = "DisableEncryptionAtRest"

	// TLSToggleParamsUpdatingTaskDestroyEncryptionAtRest captures enum value "DestroyEncryptionAtRest"
	TLSToggleParamsUpdatingTaskDestroyEncryptionAtRest string = "DestroyEncryptionAtRest"

	// TLSToggleParamsUpdatingTaskKubernetesCommandExecutor captures enum value "KubernetesCommandExecutor"
	TLSToggleParamsUpdatingTaskKubernetesCommandExecutor string = "KubernetesCommandExecutor"

	// TLSToggleParamsUpdatingTaskKubernetesWaitForPod captures enum value "KubernetesWaitForPod"
	TLSToggleParamsUpdatingTaskKubernetesWaitForPod string = "KubernetesWaitForPod"

	// TLSToggleParamsUpdatingTaskKubernetesCheckNumPod captures enum value "KubernetesCheckNumPod"
	TLSToggleParamsUpdatingTaskKubernetesCheckNumPod string = "KubernetesCheckNumPod"

	// TLSToggleParamsUpdatingTaskSetActiveUniverseKeys captures enum value "SetActiveUniverseKeys"
	TLSToggleParamsUpdatingTaskSetActiveUniverseKeys string = "SetActiveUniverseKeys"

	// TLSToggleParamsUpdatingTaskCopyEncryptionKeyFile captures enum value "CopyEncryptionKeyFile"
	TLSToggleParamsUpdatingTaskCopyEncryptionKeyFile string = "CopyEncryptionKeyFile"

	// TLSToggleParamsUpdatingTaskWaitForEncryptionKeyInMemory captures enum value "WaitForEncryptionKeyInMemory"
	TLSToggleParamsUpdatingTaskWaitForEncryptionKeyInMemory string = "WaitForEncryptionKeyInMemory"

	// TLSToggleParamsUpdatingTaskUnivSetCertificate captures enum value "UnivSetCertificate"
	TLSToggleParamsUpdatingTaskUnivSetCertificate string = "UnivSetCertificate"

	// TLSToggleParamsUpdatingTaskCreateAlertDefinitions captures enum value "CreateAlertDefinitions"
	TLSToggleParamsUpdatingTaskCreateAlertDefinitions string = "CreateAlertDefinitions"

	// TLSToggleParamsUpdatingTaskManageAlertDefinitions captures enum value "ManageAlertDefinitions"
	TLSToggleParamsUpdatingTaskManageAlertDefinitions string = "ManageAlertDefinitions"

	// TLSToggleParamsUpdatingTaskUniverseSetTLSParams captures enum value "UniverseSetTlsParams"
	TLSToggleParamsUpdatingTaskUniverseSetTLSParams string = "UniverseSetTlsParams"

	// TLSToggleParamsUpdatingTaskUniverseUpdateRootCert captures enum value "UniverseUpdateRootCert"
	TLSToggleParamsUpdatingTaskUniverseUpdateRootCert string = "UniverseUpdateRootCert"

	// TLSToggleParamsUpdatingTaskResetUniverseVersion captures enum value "ResetUniverseVersion"
	TLSToggleParamsUpdatingTaskResetUniverseVersion string = "ResetUniverseVersion"

	// TLSToggleParamsUpdatingTaskDeleteCertificate captures enum value "DeleteCertificate"
	TLSToggleParamsUpdatingTaskDeleteCertificate string = "DeleteCertificate"

	// TLSToggleParamsUpdatingTaskSetNodeStatus captures enum value "SetNodeStatus"
	TLSToggleParamsUpdatingTaskSetNodeStatus string = "SetNodeStatus"

	// TLSToggleParamsUpdatingTaskCheckMasterLeader captures enum value "CheckMasterLeader"
	TLSToggleParamsUpdatingTaskCheckMasterLeader string = "CheckMasterLeader"

	// TLSToggleParamsUpdatingTaskCheckMasters captures enum value "CheckMasters"
	TLSToggleParamsUpdatingTaskCheckMasters string = "CheckMasters"

	// TLSToggleParamsUpdatingTaskCheckTServers captures enum value "CheckTServers"
	TLSToggleParamsUpdatingTaskCheckTServers string = "CheckTServers"

	// TLSToggleParamsUpdatingTaskWaitForTServerHBs captures enum value "WaitForTServerHBs"
	TLSToggleParamsUpdatingTaskWaitForTServerHBs string = "WaitForTServerHBs"

	// TLSToggleParamsUpdatingTaskCreatePrometheusSwamperConfig captures enum value "CreatePrometheusSwamperConfig"
	TLSToggleParamsUpdatingTaskCreatePrometheusSwamperConfig string = "CreatePrometheusSwamperConfig"

	// TLSToggleParamsUpdatingTaskPreflightNodeCheck captures enum value "PreflightNodeCheck"
	TLSToggleParamsUpdatingTaskPreflightNodeCheck string = "PreflightNodeCheck"

	// TLSToggleParamsUpdatingTaskRunYsqlUpgrade captures enum value "RunYsqlUpgrade"
	TLSToggleParamsUpdatingTaskRunYsqlUpgrade string = "RunYsqlUpgrade"

	// TLSToggleParamsUpdatingTaskResizeNode captures enum value "ResizeNode"
	TLSToggleParamsUpdatingTaskResizeNode string = "ResizeNode"

	// TLSToggleParamsUpdatingTaskCheckMemory captures enum value "CheckMemory"
	TLSToggleParamsUpdatingTaskCheckMemory string = "CheckMemory"

	// TLSToggleParamsUpdatingTaskUpdateMountedDisks captures enum value "UpdateMountedDisks"
	TLSToggleParamsUpdatingTaskUpdateMountedDisks string = "UpdateMountedDisks"

	// TLSToggleParamsUpdatingTaskTransferXClusterCerts captures enum value "TransferXClusterCerts"
	TLSToggleParamsUpdatingTaskTransferXClusterCerts string = "TransferXClusterCerts"

	// TLSToggleParamsUpdatingTaskCreateTableSpacesInUniverse captures enum value "CreateTableSpacesInUniverse"
	TLSToggleParamsUpdatingTaskCreateTableSpacesInUniverse string = "CreateTableSpacesInUniverse"

	// TLSToggleParamsUpdatingTaskCreateTableSpaces captures enum value "CreateTableSpaces"
	TLSToggleParamsUpdatingTaskCreateTableSpaces string = "CreateTableSpaces"

	// TLSToggleParamsUpdatingTaskThirdpartySoftwareUpgrade captures enum value "ThirdpartySoftwareUpgrade"
	TLSToggleParamsUpdatingTaskThirdpartySoftwareUpgrade string = "ThirdpartySoftwareUpgrade"

	// TLSToggleParamsUpdatingTaskMarkUniverseForHealthScriptReUpload captures enum value "MarkUniverseForHealthScriptReUpload"
	TLSToggleParamsUpdatingTaskMarkUniverseForHealthScriptReUpload string = "MarkUniverseForHealthScriptReUpload"

	// TLSToggleParamsUpdatingTaskUpdateUniverseTags captures enum value "UpdateUniverseTags"
	TLSToggleParamsUpdatingTaskUpdateUniverseTags string = "UpdateUniverseTags"
)

// prop value enum
func (m *TLSToggleParams) validateUpdatingTaskEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tlsToggleParamsTypeUpdatingTaskPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TLSToggleParams) validateUpdatingTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTask) { // not required
		return nil
	}

	// value enum
	if err := m.validateUpdatingTaskEnum("updatingTask", "body", m.UpdatingTask); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) validateUpdatingTaskUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatingTaskUUID) { // not required
		return nil
	}

	if err := validate.FormatOf("updatingTaskUUID", "body", "uuid", m.UpdatingTaskUUID.String(), formats); err != nil {
		return err
	}

	return nil
}

var tlsToggleParamsTypeUpgradeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rolling","Non-Rolling","Non-Restart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tlsToggleParamsTypeUpgradeOptionPropEnum = append(tlsToggleParamsTypeUpgradeOptionPropEnum, v)
	}
}

const (

	// TLSToggleParamsUpgradeOptionRolling captures enum value "Rolling"
	TLSToggleParamsUpgradeOptionRolling string = "Rolling"

	// TLSToggleParamsUpgradeOptionNonDashRolling captures enum value "Non-Rolling"
	TLSToggleParamsUpgradeOptionNonDashRolling string = "Non-Rolling"

	// TLSToggleParamsUpgradeOptionNonDashRestart captures enum value "Non-Restart"
	TLSToggleParamsUpgradeOptionNonDashRestart string = "Non-Restart"
)

// prop value enum
func (m *TLSToggleParams) validateUpgradeOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tlsToggleParamsTypeUpgradeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TLSToggleParams) validateUpgradeOption(formats strfmt.Registry) error {

	if err := validate.Required("upgradeOption", "body", m.UpgradeOption); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpgradeOptionEnum("upgradeOption", "body", *m.UpgradeOption); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Tls toggle params based on the context it is used
func (m *TLSToggleParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommunicationPorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionAtRestConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtraDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeDetailsSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetXClusterConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TLSToggleParams) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TLSToggleParams) contextValidateCommunicationPorts(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunicationPorts != nil {
		if err := m.CommunicationPorts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communicationPorts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communicationPorts")
			}
			return err
		}
	}

	return nil
}

func (m *TLSToggleParams) contextValidateDeviceInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *TLSToggleParams) contextValidateEncryptionAtRestConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionAtRestConfig != nil {
		if err := m.EncryptionAtRestConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionAtRestConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionAtRestConfig")
			}
			return err
		}
	}

	return nil
}

func (m *TLSToggleParams) contextValidateExtraDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtraDependencies != nil {
		if err := m.ExtraDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extraDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extraDependencies")
			}
			return err
		}
	}

	return nil
}

func (m *TLSToggleParams) contextValidateNodeDetailsSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeDetailsSet); i++ {

		if m.NodeDetailsSet[i] != nil {
			if err := m.NodeDetailsSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeDetailsSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TLSToggleParams) contextValidateSourceXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "sourceXClusterConfigs", "body", []strfmt.UUID(m.SourceXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

func (m *TLSToggleParams) contextValidateTargetXClusterConfigs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetXClusterConfigs", "body", []strfmt.UUID(m.TargetXClusterConfigs)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TLSToggleParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TLSToggleParams) UnmarshalBinary(b []byte) error {
	var res TLSToggleParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
